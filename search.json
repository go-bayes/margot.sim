[{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"code-coverage-status-2025-01-11","dir":"","previous_headings":"","what":"Code Coverage Status (2025-01-11)","title":"margot.sim Package Context","text":"Overall coverage: 54.24% Files 0% coverage mainly example/documentation files (expected) Core functionality good coverage (56-96%) shift-interventions.R (0%) - new feature needing tests scenario-library-simple.R (42%) - use comprehensive tests monte-carlo.R (43%) - critical functionality needs better coverage distributions.R (56%) - many edge cases tested","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"margot.sim Package Context","text":"margot.sim R package simulating longitudinal data realistic observational challenges evaluating causal inference methods Monte Carlo simulation. implements “shadowing” framework inspired Plato’s Allegory Cave, observed data distorted versions (“shadows”) true causal processes.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"margot.sim Development Roadmap","text":"document consolidates feedback recent code review existing implementation plans, creating unified roadmap package development. roadmap prioritises architectural improvements must completed API solidifies, maintaining package’s core strengths usability intuitive “shadow” metaphor.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"id_1-formal-object-system-s3r6","dir":"","previous_headings":"Immediate Priorities (Do Before API Solidifies)","what":"1. Formal Object System (S3/R6)","title":"margot.sim Development Roadmap","text":"Status: startedPriority: CRITICAL - Must done external users adopt packageWhy: users start writing shadows scenarios, changing object system break code Implementation: Files modify: - R/margot-shadows.R - Convert shadow functions S3 - R/margot-scenario.R - Convert scenario functions S3 - Add new file: R/margot-s3-methods.R generic methods","code":"# S3 approach (recommended for simplicity) new_shadow <- function(type, params) {   structure(     list(type = type, params = params),     class = c(paste0(type, \"_shadow\"), \"margot_shadow\")   ) }  new_scenario <- function(name, description, shadows = list()) {   structure(     list(name = name, description = description, shadows = shadows),     class = \"margot_scenario\"   ) }  # Generic methods print.margot_shadow <- function(x, ...) {   cat(\"Shadow:\", x$type, \"\\n\")   cat(\"Parameters:\\n\")   print(x$params)   invisible(x) }  validate.margot_shadow <- function(x, ...) {   # Shadow-specific validation   UseMethod(\"validate\", x) }"},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"id_2-seed-discipline--parallel-rng","dir":"","previous_headings":"Immediate Priorities (Do Before API Solidifies)","what":"2. Seed Discipline & Parallel RNG","title":"margot.sim Development Roadmap","text":"Status: Partially implemented (basic seed support exists)Priority: CRITICAL - Silent reproducibility failures unacceptableWhy: Current parallel implementation may guarantee reproducibility Implementation: Files modify: - R/monte-carlo.R - Implement proper RNG stream management - simulation functions accept propagate seed parameter","code":"# Option 1: future package approach margot_monte_carlo <- function(..., seed = NULL) {   if (!is.null(seed)) {     future::plan(future::multisession, seed = TRUE)     withr::with_seed(seed, {       # Run simulations     })   } }  # Option 2: parallel package approach margot_monte_carlo <- function(..., seed = NULL) {   if (!is.null(seed)) {     RNGkind(\"L'Ecuyer-CMRG\")     set.seed(seed)     mc.reset.stream()   }   # Use parallel::mclapply with mc.set.seed = TRUE }"},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"id_3-shadow-algebradependencies","dir":"","previous_headings":"Immediate Priorities (Do Before API Solidifies)","what":"3. Shadow Algebra/Dependencies","title":"margot.sim Development Roadmap","text":"Status: implementedPriority: HIGH - Shadows can interact unexpected waysWhy: E.g., truncation changes variance assumptions measurement error Implementation: Files modify: - R/margot-shadows.R - Add dependency system - New file: R/margot-shadow-dependencies.R","code":"# Shadow dependency system shadow_dependencies <- list(   truncation = list(     affects = c(\"variance\", \"mean\"),     update_fn = function(params, truncation_params) {       # Recalculate variance after truncation       params$variance <- calculate_truncated_variance(         params$variance,          truncation_params       )       params     }   ) )  apply_shadows_with_dependencies <- function(data, shadows) {   # Apply shadows in dependency order   ordered_shadows <- topological_sort_shadows(shadows)      for (shadow in ordered_shadows) {     # Check for upstream effects     upstream_params <- get_upstream_parameters(shadow, applied_shadows)          # Update parameters if needed     if (!is.null(upstream_params)) {       shadow$params <- update_shadow_params(shadow, upstream_params)     }          # Apply shadow     data <- apply_shadow(data, shadow)     applied_shadows <- c(applied_shadows, list(shadow))   }      data }"},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"id_4-positivity--support-diagnostics","dir":"","previous_headings":"Immediate Priorities (Do Before API Solidifies)","what":"4. Positivity & Support Diagnostics","title":"margot.sim Development Roadmap","text":"Status: implementedPriority: HIGH - Users need immediatelyWhy: Violated positivity common cause estimator failure Implementation: Files create: - R/margot-diagnostics.R - Positivity support checks","code":"margot_check_positivity <- function(data, treatment_var, covariates,                                     threshold = 0.1, plot = TRUE) {   # Calculate propensity scores   formula <- as.formula(paste(treatment_var, \"~\", paste(covariates, collapse = \" + \")))   ps_model <- glm(formula, data = data, family = binomial())   data$propensity <- predict(ps_model, type = \"response\")      # Check for violations   violations <- data %>%     group_by(!!sym(treatment_var)) %>%     summarise(       min_ps = min(propensity),       max_ps = max(propensity),       n_extreme = sum(propensity < threshold | propensity > (1 - threshold)),       n_eff = sum(1 / (propensity * (1 - propensity)))     )      # Plot if requested   if (plot) {     p <- ggplot(data, aes(x = propensity, fill = factor(!!sym(treatment_var)))) +       geom_density(alpha = 0.5) +       geom_vline(xintercept = c(threshold, 1 - threshold),                   linetype = \"dashed\", color = \"red\") +       labs(title = \"Propensity Score Distribution\",            subtitle = paste(\"Positivity threshold:\", threshold))     print(p)   }      # Return diagnostics   structure(     list(       violations = violations,       n_violations = sum(violations$n_extreme),       effective_sample_size = violations$n_eff,       plot = if(plot) p else NULL     ),     class = \"margot_positivity_check\"   ) }"},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"id_5-memory-management","dir":"","previous_headings":"Immediate Priorities (Do Before API Solidifies)","what":"5. Memory Management","title":"margot.sim Development Roadmap","text":"Status: implementedPriority: HIGH - Large simulations can exhaust memoryWhy: 1000 reps × 10,000 rows × 50 vars × 2 (true/observed) = 2-3 GB Implementation options: Files modify: - R/monte-carlo.R - Add memory management options","code":"# Option 1: Streaming to disk margot_monte_carlo <- function(..., output_dir = NULL, keep = \"summary\") {   if (!is.null(output_dir)) {     # Stream results to parquet files     for (i in seq_len(n_reps)) {       result <- run_single_simulation(...)              if (keep == \"summary\") {         # Only save summary statistics         summary <- calculate_summary(result)         arrow::write_parquet(summary,            file.path(output_dir, sprintf(\"summary_%04d.parquet\", i)))       } else {         # Save full data         arrow::write_parquet(result$data,            file.path(output_dir, sprintf(\"data_%04d.parquet\", i)))       }     }   } }  # Option 2: On-the-fly summarisation margot_monte_carlo <- function(..., summarise_fn = NULL) {   if (!is.null(summarise_fn)) {     # Only keep summaries in memory     results <- parallel::mclapply(seq_len(n_reps), function(i) {       sim_data <- run_single_simulation(...)       summarise_fn(sim_data)  # User-defined summary function     })   } }"},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"id_6-enhanced-testing-infrastructure","dir":"","previous_headings":"Immediate Priorities (Do Before API Solidifies)","what":"6. Enhanced Testing Infrastructure","title":"margot.sim Development Roadmap","text":"Status: Basic tests exist (54% coverage)Priority: HIGH - Need property-based testsWhy: Must verify bias → 0 shadow → 0 Implementation: Files create: - tests/testthat/test-properties.R - Property-based tests - Update existing tests improve coverage","code":"# Property-based test example test_that(\"bias approaches zero as shadow strength decreases\", {   shadow_strengths <- c(1, 0.5, 0.1, 0.01, 0)      biases <- sapply(shadow_strengths, function(strength) {     sim_data <- margot_simulate(       n = 1000,       params = list(true_effect = 0.5),       shadows = list(         create_shadow(\"measurement_error\", list(sigma = strength))       )     )          # Calculate bias     estimated <- mean(sim_data$estimated_effect)     true <- 0.5     abs(estimated - true)   })      # Bias should decrease monotonically   expect_true(all(diff(biases) <= 0))   # Final bias should be near zero   expect_lt(biases[length(biases)], 0.01) })"},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"id_7-cran-compliance","dir":"","previous_headings":"Immediate Priorities (Do Before API Solidifies)","what":"7. CRAN Compliance","title":"margot.sim Development Roadmap","text":"Status: Package passes basic R CMD checkPriority: HIGH - Must sorted submissionWhy: CRAN requirements affect design decisions Checklist: - [ ] Reduce example data < 5 MB - [ ] Set LazyData: false data large - [ ] Ensure examples run < 5 seconds - [ ] Add \\donttest{} longer examples - [ ] Check platform-specific code - [ ] Verify external dependencies tests","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"next-phase-cran-submission-priorities","dir":"","previous_headings":"","what":"Next Phase: CRAN Submission Priorities","title":"margot.sim Development Roadmap","text":"Based IMPLEMENTATION_PLAN.md, scheduled completion CRAN submission:","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"id_1-natural-value-interventions","dir":"","previous_headings":"Next Phase: CRAN Submission Priorities","what":"1. Natural Value Interventions","title":"margot.sim Development Roadmap","text":"Status: Design complete, implementedPriority: MEDIUMFiles: R/margot-simulate-core.R lines 436-444","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"id_2-comprehensive-vignettes","dir":"","previous_headings":"Next Phase: CRAN Submission Priorities","what":"2. Comprehensive Vignettes","title":"margot.sim Development Roadmap","text":"Status: Outlined detailPriority: HIGH - heterogeneous-effects-tutorial.Rmd - practical-shift-interventions.Rmd - monte-carlo-best-practices.Rmd - unmeasured-confounding.Rmd","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"id_3-unmeasured-confounder-u","dir":"","previous_headings":"Next Phase: CRAN Submission Priorities","what":"3. Unmeasured Confounder U","title":"margot.sim Development Roadmap","text":"Status: Design complete, implementedPriority: MEDIUMImplementation: Add U parameters .default_sim_params()","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"long-term-features-post-cran","dir":"","previous_headings":"","what":"Long-term Features (Post-CRAN)","title":"margot.sim Development Roadmap","text":"implementation plan code review:","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"phase-1-enhanced-shadow-framework","dir":"","previous_headings":"Long-term Features (Post-CRAN)","what":"Phase 1: Enhanced Shadow Framework","title":"margot.sim Development Roadmap","text":"Shadow parameter library (YAML/JSON manifests) Advanced shadow plotting DAG visualisation Shadow composition algebra","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"phase-2-theoretical-enhancements","dir":"","previous_headings":"Long-term Features (Post-CRAN)","what":"Phase 2: Theoretical Enhancements","title":"margot.sim Development Roadmap","text":"Frugal parameterisation interface (margot_simulate_frugal()) SCM constructor approach Variation independence testing","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"phase-3-advanced-features","dir":"","previous_headings":"Long-term Features (Post-CRAN)","what":"Phase 3: Advanced Features","title":"margot.sim Development Roadmap","text":"Shift intervention engine completion Benchmark suite classic estimators Cross-language support (Python wrapper) Path-specific effects natural direct/indirect effects","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"testing-priorities","dir":"","previous_headings":"Testing & Documentation Strategy","what":"Testing Priorities","title":"margot.sim Development Roadmap","text":"Property-based tests - Invariants like bias → 0 Shadow interaction tests - Verify dependency system Memory/performance tests - Large simulation benchmarks CRAN compliance tests - Platform independence","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"documentation-priorities","dir":"","previous_headings":"Testing & Documentation Strategy","what":"Documentation Priorities","title":"margot.sim Development Roadmap","text":"API documentation - Complete roxygen2 functions Vignettes - Four comprehensive tutorials README updates - Add limitations section pkgdown site - Update major feature","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"week-1-2-architecture-must-do-now","dir":"","previous_headings":"Implementation Order","what":"Week 1-2: Architecture (MUST DO NOW)","title":"margot.sim Development Roadmap","text":"Implement S3 object system Fix RNG/seed discipline Add shadow dependency system Create positivity diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"week-3-4-infrastructure","dir":"","previous_headings":"Implementation Order","what":"Week 3-4: Infrastructure","title":"margot.sim Development Roadmap","text":"Memory management options Property-based tests CRAN compliance fixes","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"week-5-6-features--documentation","dir":"","previous_headings":"Implementation Order","what":"Week 5-6: Features & Documentation","title":"margot.sim Development Roadmap","text":"Natural value interventions Unmeasured confounder U Write comprehensive vignettes Update documentation","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"post-cran-advanced-features","dir":"","previous_headings":"Implementation Order","what":"Post-CRAN: Advanced Features","title":"margot.sim Development Roadmap","text":"Implement based user feedback priorities","code":""},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"success-metrics","dir":"","previous_headings":"","what":"Success Metrics","title":"margot.sim Development Roadmap","text":"high-priority items complete API release Test coverage > 80% vignettes render without errors Memory usage < 4GB standard simulations CRAN checks pass platforms Reproducibility guaranteed across parallel runs","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"new-files-required","dir":"","previous_headings":"File Structure Changes","what":"New Files Required","title":"margot.sim Development Roadmap","text":"","code":"R/ ├── margot-s3-methods.R          # S3 generic methods ├── margot-shadow-dependencies.R  # Shadow interaction system ├── margot-diagnostics.R         # Positivity & support checks └── margot-memory.R              # Memory management utilities  tests/testthat/ ├── test-properties.R            # Property-based tests ├── test-reproducibility.R       # RNG stream tests └── test-memory.R               # Memory usage tests  vignettes/ ├── heterogeneous-effects-tutorial.Rmd ├── practical-shift-interventions.Rmd ├── monte-carlo-best-practices.Rmd └── unmeasured-confounding.Rmd"},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"files-to-modify","dir":"","previous_headings":"File Structure Changes","what":"Files to Modify","title":"margot.sim Development Roadmap","text":"","code":"R/ ├── margot-shadows.R            # Convert to S3 ├── margot-scenario.R           # Convert to S3 ├── monte-carlo.R               # Add RNG discipline └── margot-simulate-core.R      # Natural values, U confounder  man/ └── *.Rd                        # Update all documentation"},{"path":"https://go-bayes.github.io/margot.sim/DEVELOPMENT_ROADMAP.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"margot.sim Development Roadmap","text":"Maintain backward compatibility throughout Document breaking changes absolutely necessary Keep simple API basic use cases Advanced features opt-, required","code":""},{"path":[]},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-1-enforce-temporal-order-validation-across-all-shadow-types","dir":"","previous_headings":"Critical Issues","what":"Issue 1: Enforce temporal order validation across all shadow types","title":"GitHub Issues for margot.sim","text":"Priority: High Labels: bug, validation Currently, temporal order validation applied shadow types. Need : - Enforce validation apply_shadows() shadow types - Ensure shadows can depend concurrent past variables - Add comprehensive tests","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-2-add-validation-for-estimator-returns-in-monte-carlo","dir":"","previous_headings":"Critical Issues","what":"Issue 2: Add validation for estimator returns in Monte Carlo","title":"GitHub Issues for margot.sim","text":"Priority: HighLabels: enhancement, validation margot_monte_carlo() validate estimator functions return required fields: - Check estimate (required) - Warn missing se converged - Provide clear error messages","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-3-clarify-two-stage-censoring-approach","dir":"","previous_headings":"Critical Issues","what":"Issue 3: Clarify two-stage censoring approach","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: documentation relationship apply_censoring = TRUE margot_simulate() apply_censoring_post_hoc() confusing: - Document censoring probs calculated applied - Provide clear workflow examples - Consider renaming clarity","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-4-implement-heterogeneous-treatment-effects-by-baseline-covariates","dir":"","previous_headings":"Critical Issues","what":"Issue 4: Implement heterogeneous treatment effects by baseline covariates","title":"GitHub Issues for margot.sim","text":"Priority: High Labels: enhancement, feature Add support treatment effect heterogeneity baseline characteristics: - Effect modification baseline covariates (b1, b2, b3) - Effect modification baseline outcome (t0_y) available - Effect modification baseline exposure (t0_a) - Clear documentation examples","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-5-track-shadow-interaction-effects","dir":"","previous_headings":"Critical Issues","what":"Issue 5: Track shadow interaction effects","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: enhancement, validation multiple shadows applied sequentially: - Track earlier shadows affect later ones - Warn potentially problematic combinations - Document shadow ordering best practices","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-6-validate-intervention-function-outputs","dir":"","previous_headings":"Critical Issues","what":"Issue 6: Validate intervention function outputs","title":"GitHub Issues for margot.sim","text":"Priority: High Labels: bug, validation Add validation intervention functions applied: - Check binary treatments 0/1 - Check continuous treatments within reasonable bounds - Provide informative error messages","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-7-add-warnings-for-positivity-violations","dir":"","previous_headings":"Critical Issues","what":"Issue 7: Add warnings for positivity violations","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: enhancement, user-experience positivity shadows filter data: - Warn >X% data removed - Report strata empty - Suggest diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-8-fix-misclassification-for-continuous-variables","dir":"","previous_headings":"Critical Issues","what":"Issue 8: Fix misclassification for continuous variables","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: bug Currently warns continues. either: - Error clear message continuous vars - Implement proper continuous misclassification","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-9-add-memory-efficient-options-for-large-monte-carlo","dir":"","previous_headings":"Critical Issues","what":"Issue 9: Add memory-efficient options for large Monte Carlo","title":"GitHub Issues for margot.sim","text":"Priority: Low Labels: enhancement, performance large simulations save_data = TRUE: - Option save disk - Implement chunking - Document memory requirements","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-10-document-parallel-processing-limitations","dir":"","previous_headings":"Critical Issues","what":"Issue 10: Document parallel processing limitations","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: documentation Clarify functions/objects available parallel workers: - Document objects need explicit export - Provide examples custom functions - Add troubleshooting guide","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-11-implement-flexible-baseline-covariate-generation","dir":"","previous_headings":"Critical Issues","what":"Issue 11: Implement flexible baseline covariate generation","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: enhancement, feature Currently hardcoded MVN(0, Σ) correlation 0.3: - Allow custom baseline distributions - Support categorical baselines - Enable time-varying baseline generation","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-12-add-support-for-bounded-continuous-outcomes","dir":"","previous_headings":"Critical Issues","what":"Issue 12: Add support for bounded continuous outcomes","title":"GitHub Issues for margot.sim","text":"Priority: Low Labels: enhancement, feature Many real outcomes natural bounds: - Add outcome_bounds parameter - Implement appropriate transformations - Document bounded outcome handling","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-13-clarify-causal-estimands-in-longitudinal-settings","dir":"","previous_headings":"Critical Issues","what":"Issue 13: Clarify causal estimands in longitudinal settings","title":"GitHub Issues for margot.sim","text":"Priority: High Labels: documentation Better documentation estimands mean longitudinally: - Define ATE time periods - Clarify natural vs stochastic interventions - Provide estimand notation","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-14-add-performance-benchmarks","dir":"","previous_headings":"Critical Issues","what":"Issue 14: Add performance benchmarks","title":"GitHub Issues for margot.sim","text":"Priority: Low Labels: documentation, performance Provide guidance computational complexity: - Benchmark different parameter combinations - Document memory/time scaling - Optimization tips","code":""},{"path":"https://go-bayes.github.io/margot.sim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Joseph Bulbulia Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Advanced Shift Interventions: Practical Patterns","text":"vignette explores advanced shift intervention patterns arise real-world applications: Threshold-based interventions - Bringing everyone minimum standard Bounded realistic shifts - Respecting practical constraints Dynamic responsive interventions - Shifts depend individual characteristics Incremental propensity interventions - Nudging treatment probabilities Combined intervention strategies - Multiple simultaneous shifts patterns demonstrate modified treatment policies (MTPs) can represent realistic, implementable interventions.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"example-1-threshold-based-minimum-standards","dir":"Articles","previous_headings":"","what":"Example 1: Threshold-Based Minimum Standards","title":"Advanced Shift Interventions: Practical Patterns","text":"Many real interventions aim ensure everyone meets minimum standard rather shifting everyone equally.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"scenario-minimum-physical-activity-guidelines","dir":"Articles","previous_headings":"Example 1: Threshold-Based Minimum Standards","what":"Scenario: Minimum Physical Activity Guidelines","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"set.seed(2025)  # Create threshold intervention: Everyone below 3 units brought up to 3 # (e.g., ensuring minimum 150 minutes/week of moderate activity) minimum_activity_intervention <- create_threshold_shift(   threshold = 3,   shift_to = 3,   direction = \"up\",   start_wave = 1 )  # Simulate data with heterogeneous baseline activity n <- 2000 waves <- 3  # Parameters favoring persistence of behaviour activity_params <- list(   a_lag_a_coef = 0.7,  # Strong autocorrelation in activity   a_lag_y_coef = 0.4,  # Activity improves health outcomes   b1_a_coef = 0.5,     # Some people naturally more active (b1 = fitness level)   exposure_type = \"continuous\" )  # Compare natural vs intervention results <- margot_simulate_causal(   n = n,   waves = waves,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]],     minimum_standard = minimum_activity_intervention   ),   common_params = list(     params = activity_params   ),   seed = 2025 )  # Extract data natural_data <- results$data$natural intervention_data <- results$data$minimum_standard  # Visualize the intervention effect on distributions plot_data <- bind_rows(   natural_data %>%      select(id, t0_a, t1_a, t2_a) %>%     mutate(scenario = \"Natural\"),   intervention_data %>%     select(id, t0_a, t1_a, t2_a) %>%     mutate(scenario = \"Minimum Standard\") ) %>%   pivot_longer(cols = starts_with(\"t\"), names_to = \"wave\", values_to = \"activity\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)))  # Distribution plots p1 <- ggplot(plot_data %>% filter(wave == 0),               aes(x = activity, fill = scenario)) +   geom_histogram(alpha = 0.6, position = \"identity\", bins = 30) +   geom_vline(xintercept = 3, linetype = \"dashed\", color = \"red\") +   scale_fill_manual(values = c(\"Natural\" = \"#E69F00\", \"Minimum Standard\" = \"#56B4E9\")) +   labs(title = \"Baseline (Wave 0): Identical Distributions\",        x = \"Activity Level\", y = \"Count\") +   theme_minimal()  p2 <- ggplot(plot_data %>% filter(wave == 1),               aes(x = activity, fill = scenario)) +   geom_histogram(alpha = 0.6, position = \"identity\", bins = 30) +   geom_vline(xintercept = 3, linetype = \"dashed\", color = \"red\") +   scale_fill_manual(values = c(\"Natural\" = \"#E69F00\", \"Minimum Standard\" = \"#56B4E9\")) +   labs(title = \"Wave 1: Threshold Intervention Applied\",        subtitle = \"No one below minimum standard in intervention group\",        x = \"Activity Level\", y = \"Count\") +   theme_minimal()  print(p1 / p2) # Calculate effects cat(\"\\n=== Threshold Intervention Effects ===\\n\") #>  #> === Threshold Intervention Effects === cat(\"Proportion below threshold at Wave 1:\\n\") #> Proportion below threshold at Wave 1: cat(\"  Natural:\", mean(natural_data$t1_a < 3), \"\\n\") #>   Natural: 1 cat(\"  Intervention:\", mean(intervention_data$t1_a < 3), \"\\n\") #>   Intervention: 0  # Health outcomes outcome_effect <- mean(intervention_data$t4_y) - mean(natural_data$t4_y) cat(\"\\nHealth outcome improvement:\", round(outcome_effect, 3), \"\\n\") #>  #> Health outcome improvement: 1.531  # Who benefits most? threshold_effects <- bind_rows(   natural_data %>%      mutate(       initially_below = t0_a < 3,       scenario = \"Natural\"     ),   intervention_data %>%     mutate(       initially_below = t0_a < 3,       scenario = \"Intervention\"     ) ) %>%   group_by(scenario, initially_below) %>%   summarise(     n = n(),     mean_outcome = mean(t4_y),     .groups = \"drop\"   ) %>%   pivot_wider(names_from = scenario, values_from = mean_outcome) %>%   mutate(effect = Intervention - Natural)  cat(\"\\nDifferential effects by baseline status:\\n\") #>  #> Differential effects by baseline status: print(threshold_effects) #> # A tibble: 1 × 5 #>   initially_below     n Intervention Natural effect #>   <lgl>           <int>        <dbl>   <dbl>  <dbl> #> 1 TRUE             2000         1.93   0.403   1.53"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"example-2-realistic-bounded-shifts-with-decay","dir":"Articles","previous_headings":"","what":"Example 2: Realistic Bounded Shifts with Decay","title":"Advanced Shift Interventions: Practical Patterns","text":"Real interventions often bounded effects decay time.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"scenario-workplace-wellness-program","dir":"Articles","previous_headings":"Example 2: Realistic Bounded Shifts with Decay","what":"Scenario: Workplace Wellness Program","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"# Create realistic intervention with: # - Maximum 20% improvement  # - Respects individual capacity limits # - Effect decays over time  create_realistic_wellness_shift <- function(initial_boost = 0.2,                                            decay_rate = 0.5,                                           individual_max_multiplier = 1.5) {   function(data, time, trt) {     if (time == 0) {       return(data[[trt]])     }          # Get baseline values to determine individual capacity     baseline_var <- \"t0_a\"     baseline_values <- data[[baseline_var]]          # Individual maximum based on baseline (some people have higher capacity)     individual_max <- baseline_values * individual_max_multiplier          # Current natural values     current_values <- data[[trt]]          # Calculate boost with decay     time_since_start <- time - 1     current_boost <- initial_boost * (decay_rate ^ time_since_start)          # Apply bounded shift     shifted_values <- current_values * (1 + current_boost)          # Respect individual maximums     bounded_values <- pmin(shifted_values, individual_max)          # Also respect absolute maximum (e.g., scale limit)     final_values <- pmin(bounded_values, 7)          return(final_values)   } }  # Create the intervention wellness_shift <- create_realistic_wellness_shift(   initial_boost = 0.2,      # 20% initial boost   decay_rate = 0.7,         # 30% decay per wave   individual_max_multiplier = 1.5  # Can't exceed 150% of baseline )  # Simulate with the wellness intervention wellness_results <- margot_simulate_causal(   n = 1500,   waves = 5,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]],     wellness = wellness_shift   ),   common_params = list(     params = list(       a_lag_a_coef = 0.8,  # High persistence       a_lag_y_coef = 0.3   # Moderate health effect     )   ),   seed = 2025 )  # Extract and analyze trajectory trajectory_data <- bind_rows(   wellness_results$data$natural %>%     select(id, starts_with(\"t\") & ends_with(\"_a\")) %>%     mutate(scenario = \"Natural\"),   wellness_results$data$wellness %>%     select(id, starts_with(\"t\") & ends_with(\"_a\")) %>%     mutate(scenario = \"Wellness Program\") ) %>%   pivot_longer(cols = starts_with(\"t\"), names_to = \"wave\", values_to = \"activity\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)))  # Calculate mean trajectories mean_trajectories <- trajectory_data %>%   group_by(scenario, wave) %>%   summarise(     mean_activity = mean(activity),     se_activity = sd(activity) / sqrt(n()),     .groups = \"drop\"   )  # Plot trajectories p_trajectory <- ggplot(mean_trajectories,                        aes(x = wave, y = mean_activity, color = scenario)) +   geom_line(size = 1.2) +   geom_point(size = 3) +   geom_errorbar(aes(ymin = mean_activity - 1.96 * se_activity,                     ymax = mean_activity + 1.96 * se_activity),                 width = 0.1) +   scale_color_manual(values = c(\"Natural\" = \"#E69F00\",                                 \"Wellness Program\" = \"#56B4E9\")) +   labs(     title = \"Realistic Intervention with Decay\",     subtitle = \"Initial boost followed by gradual decay\",     x = \"Wave\",     y = \"Mean Activity Level (95% CI)\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p_trajectory) # Show individual heterogeneity in response individual_effects <- wellness_results$data$wellness %>%   mutate(     baseline_category = cut(t0_a, breaks = c(0, 2, 4, 7),                            labels = c(\"Low\", \"Medium\", \"High\")),     max_achieved = pmax(t1_a, t2_a, t3_a, t4_a, t5_a),     improvement_ratio = max_achieved / t0_a   )  p_hetero <- ggplot(individual_effects,                     aes(x = baseline_category, y = improvement_ratio)) +   geom_boxplot(fill = \"#56B4E9\", alpha = 0.7) +   geom_hline(yintercept = 1.5, linetype = \"dashed\", color = \"red\") +   labs(     title = \"Heterogeneous Response to Intervention\",     subtitle = \"Improvement limited by individual capacity (red line = 150% cap)\",     x = \"Baseline Activity Level\",     y = \"Maximum Improvement Ratio\"   ) +   theme_minimal()  print(p_hetero)"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"example-3-dynamic-responsive-interventions","dir":"Articles","previous_headings":"","what":"Example 3: Dynamic Responsive Interventions","title":"Advanced Shift Interventions: Practical Patterns","text":"Interventions adapt based individual characteristics responses.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"scenario-personalized-learning-support","dir":"Articles","previous_headings":"Example 3: Dynamic Responsive Interventions","what":"Scenario: Personalized Learning Support","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"# Create intervention that responds to: # - Current performance (stronger support for struggling students) # - Rate of improvement (reduce support for rapid improvers) # - Individual characteristics (consider baseline ability)  create_responsive_intervention <- function(data, time, trt) {   if (time == 0) {     return(data[[trt]])   }      current_values <- data[[trt]]      # Get performance indicators   if (time > 1) {     # Previous outcome as performance indicator     prev_outcome_var <- paste0(\"t\", time - 1, \"_y\")     if (prev_outcome_var %in% names(data)) {       performance <- data[[prev_outcome_var]]              # Identify struggling students (bottom quartile)       struggling <- performance < quantile(performance, 0.25, na.rm = TRUE)              # Calculate improvement rate if possible       if (time > 2) {         prev_prev_outcome <- paste0(\"t\", time - 2, \"_y\")         if (prev_prev_outcome %in% names(data)) {           improvement_rate <- performance - data[[prev_prev_outcome]]           rapid_improvers <- improvement_rate > quantile(improvement_rate, 0.75, na.rm = TRUE)         } else {           rapid_improvers <- rep(FALSE, length(performance))         }       } else {         rapid_improvers <- rep(FALSE, length(performance))       }              # Apply differential shifts       shifted_values <- current_values              # Larger shift for struggling students       shifted_values[struggling] <- pmin(current_values[struggling] + 2, 7)              # Moderate shift for others       shifted_values[!struggling & !rapid_improvers] <-          pmin(current_values[!struggling & !rapid_improvers] + 1, 7)              # No additional support for rapid improvers (they're doing well)       # shifted_values[rapid_improvers] stay at current values              return(shifted_values)     }   }      # Default shift if we can't determine performance   return(pmin(current_values + 1, 7)) }  # Parameters for educational setting education_params <- list(   a_lag_y_coef = 0.4,      # Support improves outcomes   y_lag_y_coef = 0.6,      # Outcome persistence   b1_y_coef = 0.5,         # Baseline ability matters   l_y_coef = 0.3,          # Time-varying factors   exposure_type = \"continuous\" )  # Simulate responsive intervention responsive_results <- margot_simulate_causal(   n = 1500,   waves = 4,   treatments = \"a\",   interventions = list(     uniform = create_shift_intervention(1, 1, 7, start_wave = 1),     responsive = create_responsive_intervention   ),   common_params = list(     params = education_params   ),   seed = 2025 )  # Analyze who gets what level of support support_analysis <- responsive_results$data$responsive %>%   mutate(     # Categorize by baseline ability     ability_group = cut(b1, breaks = c(-Inf, -0.5, 0.5, Inf),                        labels = c(\"Low\", \"Medium\", \"High\")),     # Calculate total support received     total_support = t1_a + t2_a + t3_a + t4_a,     # Final outcome     final_outcome = t5_y   )  # Compare support allocation support_summary <- support_analysis %>%   group_by(ability_group) %>%   summarise(     n = n(),     mean_total_support = mean(total_support),     sd_support = sd(total_support),     mean_outcome = mean(final_outcome),     .groups = \"drop\"   )  cat(\"\\n=== Responsive Intervention Analysis ===\\n\") #>  #> === Responsive Intervention Analysis === cat(\"Support allocation by baseline ability:\\n\") #> Support allocation by baseline ability: print(support_summary) #> # A tibble: 3 × 5 #>   ability_group     n mean_total_support sd_support mean_outcome #>   <fct>         <int>              <dbl>      <dbl>        <dbl> #> 1 Low             447               6.06      1.11        0.0578 #> 2 Medium          580               6.37      1.02        1.00   #> 3 High            473               6.66      0.978       1.97  # Visualize adaptive support over time adaptive_plot_data <- support_analysis %>%   group_by(ability_group) %>%   sample_n(min(50, n())) %>%  # Sample for clarity   ungroup() %>%   select(id, ability_group, t1_a, t2_a, t3_a, t4_a) %>%   pivot_longer(cols = starts_with(\"t\"), names_to = \"wave\", values_to = \"support\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)))  p_adaptive <- ggplot(adaptive_plot_data,                       aes(x = wave, y = support, group = id, color = ability_group)) +   geom_line(alpha = 0.3) +   facet_wrap(~ ability_group) +   scale_color_manual(values = c(\"Low\" = \"#D55E00\", \"Medium\" = \"#F0E442\", \"High\" = \"#009E73\")) +   labs(     title = \"Adaptive Support Patterns by Ability Group\",     subtitle = \"Low ability students receive more intensive, sustained support\",     x = \"Wave\",     y = \"Support Level\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  print(p_adaptive) # Compare effectiveness effectiveness_comparison <- bind_rows(   responsive_results$data$uniform %>%     mutate(intervention = \"Uniform\",             ability_group = cut(b1, breaks = c(-Inf, -0.5, 0.5, Inf),                               labels = c(\"Low\", \"Medium\", \"High\"))),   support_analysis %>%     mutate(intervention = \"Responsive\") ) %>%   group_by(intervention, ability_group) %>%   summarise(     n = n(),     mean_outcome = mean(t5_y),     .groups = \"drop\"   ) %>%   pivot_wider(names_from = intervention, values_from = mean_outcome) %>%   mutate(benefit = Responsive - Uniform)  cat(\"\\n=== Effectiveness Comparison ===\\n\") #>  #> === Effectiveness Comparison === cat(\"Benefit of responsive vs uniform intervention:\\n\") #> Benefit of responsive vs uniform intervention: print(effectiveness_comparison) #> # A tibble: 3 × 5 #>   ability_group     n Responsive Uniform benefit #>   <fct>         <int>      <dbl>   <dbl>   <dbl> #> 1 Low             447     0.0578  0.0578       0 #> 2 Medium          580     1.00    1.00         0 #> 3 High            473     1.97    1.97         0"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"example-4-propensity-based-nudge-interventions","dir":"Articles","previous_headings":"","what":"Example 4: Propensity-Based Nudge Interventions","title":"Advanced Shift Interventions: Practical Patterns","text":"Interventions shift probability treatment rather deterministic values.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"scenario-preventive-healthcare-uptake","dir":"Articles","previous_headings":"Example 4: Propensity-Based Nudge Interventions","what":"Scenario: Preventive Healthcare Uptake","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"# Create intervention that increases odds of preventive care by 50% preventive_care_nudge <- create_ips_intervention(   delta = 1.5,  # 50% increase in odds   start_wave = 1 )  # For binary outcomes, we need different parameters binary_params <- list(   exposure_type = \"binary\",   a_lag_y_coef = 0.5,      # Preventive care improves health   b1_a_coef = 0.3,         # Health consciousness affects uptake   l_a_coef = 0.4           # Time-varying barriers )  # Simulate nudge intervention nudge_results <- margot_simulate_causal(   n = 2000,   waves = 3,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]],     nudge = preventive_care_nudge   ),   common_params = list(     params = binary_params   ),   seed = 2025 )  # Analyze uptake patterns uptake_comparison <- bind_rows(   nudge_results$data$natural %>%     select(id, b1, t0_a, t1_a, t2_a, t3_a, t4_y) %>%     mutate(scenario = \"Natural\"),   nudge_results$data$nudge %>%     select(id, b1, t0_a, t1_a, t2_a, t3_a, t4_y) %>%     mutate(scenario = \"Nudge\") ) %>%   mutate(     health_conscious = b1 > 0,     ever_treated = (t1_a + t2_a + t3_a) > 0   )  # Calculate uptake rates uptake_summary <- uptake_comparison %>%   group_by(scenario, health_conscious) %>%   summarise(     n = n(),     baseline_rate = mean(t0_a),     wave1_rate = mean(t1_a),     wave2_rate = mean(t2_a),     wave3_rate = mean(t3_a),     ever_treated_rate = mean(ever_treated),     mean_outcome = mean(t4_y),     .groups = \"drop\"   )  cat(\"\\n=== Preventive Care Nudge Analysis ===\\n\") #>  #> === Preventive Care Nudge Analysis === print(uptake_summary) #> # A tibble: 4 × 9 #>   scenario health_conscious     n baseline_rate wave1_rate wave2_rate wave3_rate #>   <chr>    <lgl>            <int>         <dbl>      <dbl>      <dbl>      <dbl> #> 1 Natural  FALSE              958         0.476      0.518      0.482      0.473 #> 2 Natural  TRUE              1042         0.532      0.591      0.580      0.615 #> 3 Nudge    FALSE              958         0.476      0.640      0.637      0.608 #> 4 Nudge    TRUE              1042         0.532      0.675      0.683      0.622 #> # ℹ 2 more variables: ever_treated_rate <dbl>, mean_outcome <dbl>  # Visualize uptake trajectories uptake_trajectory <- uptake_summary %>%   select(scenario, health_conscious, baseline_rate, wave1_rate, wave2_rate, wave3_rate) %>%   pivot_longer(cols = ends_with(\"_rate\"), names_to = \"wave\", values_to = \"uptake_rate\") %>%   mutate(     wave = case_when(       wave == \"baseline_rate\" ~ 0,       wave == \"wave1_rate\" ~ 1,       wave == \"wave2_rate\" ~ 2,       wave == \"wave3_rate\" ~ 3     ),     group = paste(scenario, ifelse(health_conscious, \"Health Conscious\", \"Not Health Conscious\"))   )  p_uptake <- ggplot(uptake_trajectory,                     aes(x = wave, y = uptake_rate, color = scenario, linetype = health_conscious)) +   geom_line(size = 1.2) +   geom_point(size = 3) +   scale_color_manual(values = c(\"Natural\" = \"#E69F00\", \"Nudge\" = \"#56B4E9\")) +   scale_linetype_manual(values = c(\"FALSE\" = \"dashed\", \"TRUE\" = \"solid\"),                        labels = c(\"Not Health Conscious\", \"Health Conscious\")) +   scale_y_continuous(labels = scales::percent) +   labs(     title = \"Preventive Care Uptake: Natural vs Nudge Intervention\",     subtitle = \"50% increase in odds translates to different absolute increases by subgroup\",     x = \"Wave\",     y = \"Uptake Rate\",     color = \"Scenario\",     linetype = \"Baseline Type\"   ) +   theme_minimal()  print(p_uptake) # Number needed to nudge nnt_analysis <- uptake_comparison %>%   group_by(scenario) %>%   summarise(     treated_rate = mean(ever_treated),     mean_outcome = mean(t4_y),     .groups = \"drop\"   ) %>%   summarise(     additional_treated = diff(treated_rate),     outcome_improvement = diff(mean_outcome),     nnt = 1 / additional_treated,     health_gain_per_nudged = outcome_improvement / additional_treated   )  cat(\"\\n=== Number Needed to Nudge ===\\n\") #>  #> === Number Needed to Nudge === cat(\"Additional people getting preventive care:\",      round(nnt_analysis$additional_treated * 100, 1), \"%\\n\") #> Additional people getting preventive care: 6.3 % cat(\"Number needed to nudge for one additional uptake:\",      round(nnt_analysis$nnt, 1), \"\\n\") #> Number needed to nudge for one additional uptake: 15.7 cat(\"Health outcome improvement per additional uptake:\",      round(nnt_analysis$health_gain_per_nudged, 3), \"\\n\") #> Health outcome improvement per additional uptake: -0.89"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"example-5-combined-multi-component-interventions","dir":"Articles","previous_headings":"","what":"Example 5: Combined Multi-Component Interventions","title":"Advanced Shift Interventions: Practical Patterns","text":"Real policies often combine multiple intervention components.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"scenario-comprehensive-diabetes-prevention","dir":"Articles","previous_headings":"Example 5: Combined Multi-Component Interventions","what":"Scenario: Comprehensive Diabetes Prevention","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"# Create multi-component intervention: # 1. Minimum activity threshold (150 min/week = level 3) # 2. Progressive dietary improvement (20% healthier choices) # 3. Responsive support based on risk factors  create_diabetes_prevention_program <- function(wave_components) {   function(data, time, trt) {     if (time == 0) {       return(data[[trt]])     }          # Get current values     current <- data[[trt]]          # Component 1: Activity minimum (waves 1+)     if (time >= 1 && \"activity_minimum\" %in% wave_components[[as.character(time)]]) {       current <- pmax(current, 3)     }          # Component 2: Dietary improvement (waves 2+)     if (time >= 2 && \"dietary_improvement\" %in% wave_components[[as.character(time)]]) {       # 20% improvement bounded by reasonable maximum       current <- pmin(current * 1.2, 6)     }          # Component 3: Responsive support (waves 3+)     if (time >= 3 && \"responsive_support\" %in% wave_components[[as.character(time)]]) {       # Extra support for high-risk individuals (high b1 = risk score)       high_risk <- data$b1 > 0.5       current[high_risk] <- pmin(current[high_risk] + 1, 7)     }          return(current)   } }  # Define wave-specific components wave_components <- list(   \"1\" = c(\"activity_minimum\"),   \"2\" = c(\"activity_minimum\", \"dietary_improvement\"),   \"3\" = c(\"activity_minimum\", \"dietary_improvement\", \"responsive_support\"),   \"4\" = c(\"activity_minimum\", \"dietary_improvement\", \"responsive_support\") )  # Create the comprehensive intervention comprehensive_intervention <- create_diabetes_prevention_program(wave_components)  # Parameters reflecting diabetes risk diabetes_params <- list(   a_lag_y_coef = -0.5,     # Lifestyle improvements reduce risk (negative = lower risk)   b1_y_coef = 0.8,         # Baseline risk strongly predictive   a_b1_y_het = -0.3,       # Intervention more effective for high-risk   y_lag_y_coef = 0.7,      # Risk tends to persist   exposure_type = \"continuous\" )  # Simulate comprehensive program comprehensive_results <- margot_simulate_causal(   n = 2000,   waves = 4,   treatments = \"a\",   interventions = list(     control = function(data, time, trt) data[[trt]],     activity_only = create_threshold_shift(3, 3, \"up\", start_wave = 1),     comprehensive = comprehensive_intervention   ),   common_params = list(     params = diabetes_params   ),   seed = 2025 )  # Analyze component effects component_analysis <- list()  # Extract final outcomes for (intervention in names(comprehensive_results$data)) {   data <- comprehensive_results$data[[intervention]]      # Risk reduction (lower is better)   risk_reduction <- mean(data$t0_y) - mean(data$t5_y)      # By risk group   risk_groups <- data %>%     mutate(risk_category = cut(b1, breaks = c(-Inf, 0, 0.5, Inf),                               labels = c(\"Low\", \"Medium\", \"High\"))) %>%     group_by(risk_category) %>%     summarise(       n = n(),       baseline_risk = mean(t0_y),       final_risk = mean(t5_y),       risk_reduction = baseline_risk - final_risk,       mean_lifestyle = mean(t4_a),       .groups = \"drop\"     ) %>%     mutate(intervention = intervention)      component_analysis[[intervention]] <- risk_groups }  component_results <- bind_rows(component_analysis)  # Visualize comparative effectiveness p_components <- ggplot(component_results,                        aes(x = risk_category, y = risk_reduction, fill = intervention)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   scale_fill_manual(values = c(\"control\" = \"#999999\",                                 \"activity_only\" = \"#E69F00\",                                \"comprehensive\" = \"#56B4E9\"),                     labels = c(\"Control\", \"Activity Only\", \"Comprehensive\")) +   labs(     title = \"Diabetes Risk Reduction by Intervention Type\",     subtitle = \"Comprehensive program shows synergistic effects, especially for high-risk\",     x = \"Baseline Risk Category\",     y = \"Risk Score Reduction\",     fill = \"Intervention\"   ) +   theme_minimal()  print(p_components) # Calculate incremental benefits incremental_benefits <- component_results %>%   select(risk_category, intervention, risk_reduction) %>%   pivot_wider(names_from = intervention, values_from = risk_reduction) %>%   mutate(     activity_benefit = activity_only - control,     additional_benefit = comprehensive - activity_only,     synergy_ratio = comprehensive / activity_only   )  cat(\"\\n=== Incremental Benefits of Comprehensive Program ===\\n\") #>  #> === Incremental Benefits of Comprehensive Program === print(incremental_benefits) #> # A tibble: 3 × 7 #>   risk_category control activity_only comprehensive activity_benefit #>   <fct>           <dbl>         <dbl>         <dbl>            <dbl> #> 1 Low            0.0687          1.03          1.24            0.957 #> 2 Medium         0.108           1.46          1.78            1.35  #> 3 High           0.0310          1.76          2.85            1.73  #> # ℹ 2 more variables: additional_benefit <dbl>, synergy_ratio <dbl>  # Timeline of component activation timeline_data <- comprehensive_results$data$comprehensive %>%   select(id, b1, t0_a, t1_a, t2_a, t3_a, t4_a) %>%   mutate(risk_level = ifelse(b1 > 0.5, \"High Risk\", \"Lower Risk\")) %>%   group_by(risk_level) %>%   sample_n(min(100, n())) %>%   ungroup() %>%   pivot_longer(cols = starts_with(\"t\"), names_to = \"wave\", values_to = \"lifestyle\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)))  p_timeline <- ggplot(timeline_data,                      aes(x = wave, y = lifestyle, group = id, color = risk_level)) +   geom_line(alpha = 0.2) +   geom_smooth(aes(group = risk_level), method = \"loess\", se = TRUE, size = 1.5) +   geom_vline(xintercept = c(1, 2, 3), linetype = \"dashed\", alpha = 0.5) +   annotate(\"text\", x = 1, y = 6.5, label = \"Activity\\nMinimum\", size = 3) +   annotate(\"text\", x = 2, y = 6.5, label = \"+ Dietary\\nImprovement\", size = 3) +   annotate(\"text\", x = 3, y = 6.5, label = \"+ Responsive\\nSupport\", size = 3) +   scale_color_manual(values = c(\"Lower Risk\" = \"#009E73\", \"High Risk\" = \"#D55E00\")) +   labs(     title = \"Multi-Component Intervention Timeline\",     subtitle = \"Components layer on progressively, with differential effects by risk\",     x = \"Wave\",     y = \"Lifestyle Score\",     color = \"Risk Level\"   ) +   theme_minimal()  print(p_timeline)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"choosing-the-right-shift-pattern","dir":"Articles","previous_headings":"Practical Guidelines for Shift Interventions","what":"1. Choosing the Right Shift Pattern","title":"Advanced Shift Interventions: Practical Patterns","text":"Comparison Shift Intervention Types","code":"# Create comparison of different shift types shift_comparison <- data.frame(   Type = c(\"Uniform Shift\", \"Threshold\", \"Bounded\", \"Responsive\", \"Propensity\"),   Use_Case = c(     \"Population-wide campaigns\",     \"Minimum standards policies\",      \"Resource-constrained programs\",     \"Personalized interventions\",     \"Behavioral nudges\"   ),   Advantages = c(     \"Simple to implement and communicate\",     \"Ensures equity, helps most vulnerable\",     \"Realistic, respects constraints\",     \"Maximizes efficiency, targets need\",     \"Preserves choice, scalable\"   ),   Limitations = c(     \"May waste resources on those who don't need it\",     \"No benefit for those above threshold\",     \"May not achieve maximum possible impact\",     \"Complex to implement, requires monitoring\",     \"Indirect effects, harder to predict\"   ) )  knitr::kable(shift_comparison, caption = \"Comparison of Shift Intervention Types\")"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"implementation-considerations","dir":"Articles","previous_headings":"Practical Guidelines for Shift Interventions","what":"2. Implementation Considerations","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"cat(\"=== Key Implementation Considerations ===\\n\\n\") #> === Key Implementation Considerations ===  considerations <- list(   \"1. Feasibility\" = \"Can the shift be realistically implemented given resources?\",   \"2. Sustainability\" = \"Will effects persist or decay over time?\",   \"3. Equity\" = \"Does the intervention reduce or increase disparities?\",   \"4. Scalability\" = \"Can it be rolled out population-wide?\",   \"5. Monitoring\" = \"What data is needed to track implementation?\",   \"6. Side Effects\" = \"Could shifts in one domain affect others?\" )  for (point in names(considerations)) {   cat(point, \":\", considerations[[point]], \"\\n\") } #> 1. Feasibility : Can the shift be realistically implemented given resources?  #> 2. Sustainability : Will effects persist or decay over time?  #> 3. Equity : Does the intervention reduce or increase disparities?  #> 4. Scalability : Can it be rolled out population-wide?  #> 5. Monitoring : What data is needed to track implementation?  #> 6. Side Effects : Could shifts in one domain affect others?  # Example: Checking intervention feasibility check_intervention_feasibility <- function(data, intervention, waves = 3) {   # Simulate the intervention   test_result <- margot_simulate(     n = nrow(data),     waves = waves,     intervention = intervention,     baseline_data = data,     params = list(a_lag_a_coef = 0.7)  # High persistence   )      # Calculate key metrics   metrics <- list()      # Resource intensity (average shift magnitude)   for (w in 1:waves) {     natural_var <- paste0(\"t\", w, \"_a_natural\")     shifted_var <- paste0(\"t\", w, \"_a\")          if (all(c(natural_var, shifted_var) %in% names(test_result))) {       metrics[[paste0(\"wave_\", w, \"_shift\")]] <-          mean(abs(test_result[[shifted_var]] - test_result[[natural_var]]))     }   }      # Coverage (proportion affected)   metrics$coverage <- mean(test_result$t1_a != test_result$t1_a_natural)      # Sustainability (maintained elevation)   if (waves > 1) {     metrics$sustainability <- cor(test_result$t1_a, test_result[[paste0(\"t\", waves, \"_a\")]])   }      return(metrics) }"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"combining-with-other-package-features","dir":"Articles","previous_headings":"Practical Guidelines for Shift Interventions","what":"3. Combining with Other Package Features","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"cat(\"=== Combining Shifts with Shadows and Weights ===\\n\\n\") #> === Combining Shifts with Shadows and Weights ===  # Example: Shift intervention with measurement error example_combined <- function() {   # 1. Generate base data   base_data <- margot_simulate(     n = 1000,     waves = 2,     intervention = create_shift_intervention(1, 1, 7),     seed = 2025   )      # 2. Apply measurement error shadow   shadow <- create_shadow(     type = \"measurement_error\",     params = list(       variables = \"t1_a\",       error_type = \"classical\",       sigma = 0.5     )   )      shadowed_data <- apply_shadow(base_data, shadow)      # 3. Add sampling weights   shadowed_data$weight <- ifelse(shadowed_data$b1 > 0, 2, 0.5)      # 4. Compare true vs observed effects   true_effect <- mean(base_data$t3_y[base_data$t2_a == 1]) -                   mean(base_data$t3_y[base_data$t2_a == 0])      observed_effect <- mean(shadowed_data$t3_y[shadowed_data$t2_a == 1], na.rm = TRUE) -                       mean(shadowed_data$t3_y[shadowed_data$t2_a == 0], na.rm = TRUE)      weighted_effect <- weighted.mean(shadowed_data$t3_y[shadowed_data$t2_a == 1],                                    shadowed_data$weight[shadowed_data$t2_a == 1], na.rm = TRUE) -                      weighted.mean(shadowed_data$t3_y[shadowed_data$t2_a == 0],                                    shadowed_data$weight[shadowed_data$t2_a == 0], na.rm = TRUE)      return(list(     true = true_effect,     observed = observed_effect,     weighted = weighted_effect   )) }  combined_example <- example_combined() cat(\"True effect:\", round(combined_example$true, 3), \"\\n\") #> True effect: NaN cat(\"Observed (with measurement error):\", round(combined_example$observed, 3), \"\\n\") #> Observed (with measurement error): NaN cat(\"Weighted (accounting for sampling):\", round(combined_example$weighted, 3), \"\\n\") #> Weighted (accounting for sampling): NaN"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Advanced Shift Interventions: Practical Patterns","text":"vignette demonstrated five advanced shift intervention patterns: Threshold interventions ensure minimum standards cost-effective Bounded realistic shifts respect practical constraints natural limits Dynamic responsive interventions adapt individual needs progress Propensity nudges change probabilities rather forcing specific values Multi-component programs combine strategies synergistic effects Key insights: - Different shift patterns suit different policy goals - Realistic interventions often involve bounds, decay, heterogeneity - Responsive interventions can efficient require complex implementation - Combined strategies often outperform single-component interventions - Always consider feasibility, sustainability, equity patterns can combined margot.sim’s features (shadows, weights, Monte Carlo) evaluate interventions realistic conditions. next vignette provide complete practical workflow example.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Applying Observational Shadows","text":"Real-world observational data often “shadow” true underlying process. margot.sim package implements various types observational distortions shadow system. vignette demonstrates apply shadows simulated data.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"what-are-shadows","dir":"Articles","previous_headings":"","what":"What are Shadows?","title":"Applying Observational Shadows","text":"Shadows represent common data quality issues observational studies: Measurement error: Variables measured noise Item missingness: Missing data patterns (MCAR, MAR, MNAR) Selection bias: Non-representative sampling Positivity violations: Lack overlap treatment groups","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"basic-shadow-application","dir":"Articles","previous_headings":"","what":"Basic Shadow Application","title":"Applying Observational Shadows","text":"Let’s start simulating clean data applying shadows:","code":"# Generate clean data set.seed(456) clean_data <- margot_simulate(   n = 1000,   waves = 2,   apply_process_function = FALSE  # Keep raw data )  # Create a measurement error shadow me_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     error_type = \"classical\",     variables = c(\"t1_a\", \"t2_a\"),  # Apply to exposures     sigma = 0.3  # Standard deviation of error   ) )  # Apply the shadow data_with_error <- apply_shadow(clean_data, me_shadow)  # Compare clean vs error-prone measurements plot(clean_data$t1_a, data_with_error$t1_a,      xlab = \"True Exposure\", ylab = \"Measured Exposure\",      main = \"Classical Measurement Error\") abline(0, 1, col = \"red\", lty = 2)"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"item-missingness-patterns","dir":"Articles","previous_headings":"","what":"Item Missingness Patterns","title":"Applying Observational Shadows","text":"Different missing data mechanisms different implications:","code":"# Missing Completely at Random (MCAR) mcar_shadow <- create_item_missingness_shadow(   variables = c(\"t1_y\", \"t2_y\"),   missing_rate = 0.2,   missing_mechanism = \"MCAR\" )  # Missing at Random (MAR) - depends on observed variables mar_shadow <- create_item_missingness_shadow(   variables = c(\"t1_y\", \"t2_y\"),   missing_rate = 0.3,   missing_mechanism = \"MAR\",   dependent_vars = c(\"b1\", \"t0_a\")  # Missingness depends on these )  # Apply both shadows data_mcar <- apply_shadow(clean_data, mcar_shadow) data_mar <- apply_shadow(clean_data, mar_shadow)  # Compare missingness rates cat(\"MCAR missingness rate:\", mean(is.na(data_mcar$t1_y)), \"\\n\") #> MCAR missingness rate: 0.226 cat(\"MAR missingness rate:\", mean(is.na(data_mar$t1_y)), \"\\n\") #> MAR missingness rate: 0.336"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"multiple-shadows","dir":"Articles","previous_headings":"","what":"Multiple Shadows","title":"Applying Observational Shadows","text":"can apply multiple shadows sequentially combine :","code":"# Create multiple shadows shadow1 <- create_shadow(   type = \"measurement_error\",   params = list(     error_type = \"classical\",     variables = \"t1_a\",     sigma = 0.2   ) )  shadow2 <- create_item_missingness_shadow(   variables = c(\"t2_y\"),   missing_rate = 0.25,   missing_mechanism = \"MAR\",   dependent_vars = c(\"t1_a\", \"t1_y\") )  # Apply shadows sequentially data_shadowed <- clean_data |>   apply_shadow(shadow1) |>   apply_shadow(shadow2)  # Or use apply_shadows for multiple at once shadows <- list(shadow1, shadow2) data_shadowed2 <- apply_shadows(clean_data, shadows)  # Check results sum(is.na(data_shadowed2$t2_y)) #> [1] 238"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"positivity-violations","dir":"Articles","previous_headings":"","what":"Positivity Violations","title":"Applying Observational Shadows","text":"Positivity violations occur certain covariate combinations treated/untreated units:","code":"# Create positivity shadow that removes extreme covariate values # Filter function keeps only observations where b1 and b2 are in reasonable range pos_shadow <- create_positivity_shadow(   exposure_var = \"t1_a\",   filter_fn = function(data) {     # Keep observations where covariates are within central 90%     b1_limits <- quantile(data$b1, c(0.05, 0.95))     b2_limits <- quantile(data$b2, c(0.05, 0.95))     data$b1 >= b1_limits[1] & data$b1 <= b1_limits[2] &     data$b2 >= b2_limits[1] & data$b2 <= b2_limits[2]   } )  data_trimmed <- apply_shadow(clean_data, pos_shadow)  # Compare sample sizes cat(\"Original n:\", nrow(clean_data), \"\\n\") #> Original n: 1000 cat(\"After positivity trimming:\", nrow(data_trimmed), \"\\n\") #> After positivity trimming: 811"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"analyzing-shadow-effects","dir":"Articles","previous_headings":"","what":"Analyzing Shadow Effects","title":"Applying Observational Shadows","text":"can analyze shadows affect data:","code":"# Analyze the effect of measurement error shadow_effects <- analyse_shadow_effects(   original = clean_data,   shadowed = data_with_error,   variables = c(\"t1_a\", \"t2_a\", \"t2_y\") )  print(shadow_effects) #> Shadow Effects Analysis #> ==================== #>  #> Variable: t1_a #>   Missing introduced: 0.0% #>   Mean shift: -0.007 #>   SD ratio: 1.182 #>  #> Variable: t2_a #>   Missing introduced: 0.0% #>   Mean shift: 0.000 #>   SD ratio: 1.179 #>  #> Variable: t2_y #>   Missing introduced: 0.0% #>   Mean shift: 0.000 #>   SD ratio: 1.000"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"real-world-example-selection-bias","dir":"Articles","previous_headings":"","what":"Real-World Example: Selection Bias","title":"Applying Observational Shadows","text":"Let’s simulate realistic scenario selection bias:","code":"# Generate population data population <- margot_simulate(   n = 5000,   waves = 2,   params = list(     b_a_coef = 0.4,     a_y_coef = 0.6   ) ) #> Warning in validate_proportions(a_coefs, paste0(\"t\", t, \"_a\")): coefficients #> for t1_a sum to 1.00 (>= 0.95), reducing proportionally #> Warning in validate_proportions(a_coefs, paste0(\"t\", t, \"_a\")): coefficients #> for t2_a sum to 1.00 (>= 0.95), reducing proportionally  # Create selection shadow - higher SES more likely to participate selection_shadow <- create_shadow(   type = \"selection\",   params = list(     selection_type = \"custom\",     selection_prob_fn = function(data) {       # Higher b1 and b2 values increase selection probability       # Normalize to 0-1 scale       ses_score <- (data$b1 + data$b2) / 2       ses_normalized <- (ses_score - min(ses_score)) / (max(ses_score) - min(ses_score))       # Map to 30-70% selection probability range       0.3 + 0.4 * ses_normalized     }   ) )  # Apply selection study_sample <- apply_shadow(population, selection_shadow)  # Compare distributions par(mfrow = c(1, 2)) hist(population$b1, main = \"Population SES\", xlab = \"SES Score\") hist(study_sample$b1, main = \"Study Sample SES\", xlab = \"SES Score\")"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"combining-everything","dir":"Articles","previous_headings":"","what":"Combining Everything","title":"Applying Observational Shadows","text":"’s complete example multiple realistic shadows:","code":"# Start with clean data set.seed(789) true_data <- margot_simulate(   n = 2000,   waves = 3,   n_outcomes = 2 )  # Create realistic shadows shadows <- list(   # Measurement error in exposure   create_shadow(     type = \"measurement_error\",     params = list(       error_type = \"classical\",       variables = c(\"t1_a\", \"t2_a\"),       sigma = 0.25     )   ),      # Differential missingness in outcomes   create_item_missingness_shadow(     variables = c(\"t2_y1\", \"t2_y2\", \"t3_y1\", \"t3_y2\"),     missing_rate = 0.2,     missing_mechanism = \"MAR\",     dependent_vars = c(\"t1_a\", \"b1\")   ),      # Selection on baseline characteristics   create_positivity_shadow(     exposure_var = \"t1_a\",     filter_fn = function(data) {       # Keep central 80% based on covariate values       # This ensures overlap in covariate distributions across treatment levels       cov_score <- rowMeans(scale(data[, c(\"b1\", \"b2\", \"b3\")]))       cov_limits <- quantile(cov_score, c(0.1, 0.9))       cov_score >= cov_limits[1] & cov_score <= cov_limits[2]     }   ) )  # Apply all shadows observed_data <- apply_shadows(true_data, shadows)  # Summary of data quality cat(\"Original sample size:\", nrow(true_data), \"\\n\") #> Original sample size: 2000 cat(\"After shadows:\", nrow(observed_data), \"\\n\") #> After shadows: 1600 cat(\"Outcome missingness rate:\",      mean(is.na(observed_data[, grep(\"y\", names(observed_data))])), \"\\n\") #> Outcome missingness rate: 0.087625"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Applying Observational Shadows","text":"Document shadows: Keep track distortions ’ve applied Validate assumptions: Check shadow parameters realistic Compare results: Always compare analyses clean vs shadowed data Use Monte Carlo: systematic evaluation, use margot_monte_carlo()","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Applying Observational Shadows","text":"shadow system margot.sim allows : - Add realistic observational distortions simulated data - Combine multiple types bias measurement issues - Systematically evaluate affect analyses - Better understand robustness statistical methods helps bridge gap idealized simulations messy real-world data.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Basic Simulation with margot.sim","text":"margot.sim package extends margot package provide sophisticated simulation capabilities longitudinal data analysis. vignette demonstrates basic workflow simulating longitudinal data realistic observational challenges.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"basic-simulation","dir":"Articles","previous_headings":"","what":"Basic Simulation","title":"Basic Simulation with margot.sim","text":"core function margot_simulate() generates longitudinal data following semi-Markovian structural causal model (SCM): generated data includes: - id: Subject identifier - b1-b5: Baseline covariates - t0_a, t1_a, etc.: Treatment/exposure wave - t0_y, t1_y, etc.: Outcomes wave - t1_l, t2_l, etc.: Time-varying confounders","code":"# Simulate basic longitudinal data set.seed(123) sim_data <- margot_simulate(   n = 1000,      # Number of subjects   waves = 3,     # Number of measurement waves   n_outcomes = 1 # Number of outcomes (default) )  # View structure str(sim_data[1:5, 1:10]) #> tibble [5 × 10] (S3: tbl_df/tbl/data.frame) #>  $ id                        : int [1:5] 1 2 3 4 5 #>  $ b1                        : num [1:5] 0.519 0.639 -0.532 -1.008 -1.602 #>  $ b2                        : num [1:5] 0.0218 0.2721 -1.1797 1.1948 -0.2153 #>  $ b3                        : num [1:5] 0.6527 0.1079 -0.0967 0.0312 -1.2504 #>  $ b4                        : num [1:5] 0.922 0.487 -1.67 -0.148 2.828 #>  $ b5                        : num [1:5] -0.256 -0.743 -1.691 -0.304 -0.189 #>  $ t0_a                      : int [1:5] 1 1 1 0 0 #>  $ t0_y                      : num [1:5] -1.029 -0.947 -1.347 0.708 -1.455 #>  $ t0_not_lost_following_wave: int [1:5] 1 1 1 1 1 #>  $ t1_l                      : num [1:5] 0.7542 -0.0428 1.5278 1.5838 -1.1977 #>  - attr(*, \"time_points\")= chr [1:5] \"t0\" \"t1\" \"t2\" \"t3\" ... #>  - attr(*, \"n_waves\")= int 5 #>  - attr(*, \"processed\")= logi TRUE #>  - attr(*, \"margot_meta\")=List of 15 #>   ..$ params                  :List of 32 #>   .. ..$ cens_rate     : num 0.1 #>   .. ..$ cens_a_coef   : num 0.2 #>   .. ..$ cens_l_coef   : num 0.1 #>   .. ..$ cens_y_coef   : num 0.15 #>   .. ..$ cens_latent_sd: num 0.5 #>   .. ..$ b_l_coef      : num 0.15 #>   .. ..$ b_a_coef      : num 0.1 #>   .. ..$ b_y_coef      : num 0.15 #>   .. ..$ b_l_time_trend: num 0.05 #>   .. ..$ b_l_time_decay: num 0.02 #>   .. ..$ b_l_time_cycle: num 1 #>   .. ..$ a_autoreg     : num 0.25 #>   .. ..$ y_autoreg     : num 0.2 #>   .. ..$ y_a_coef      : num 0.15 #>   .. ..$ y_l_coef      : num 0.1 #>   .. ..$ a_l_coef      : num 0.1 #>   .. ..$ l_a_coef      : num 0.2 #>   .. ..$ l_y_coef      : num 0.15 #>   .. ..$ a_lag_y_coef  : num 0.25 #>   .. ..$ a_b_y_het     : num 0.1 #>   .. ..$ a_l_y_het     : num 0.05 #>   .. ..$ a_b1_y_het    : num 0.1 #>   .. ..$ a_b2_y_het    : num 0.08 #>   .. ..$ a_b3_y_het    : num 0.06 #>   .. ..$ a_y0_y_het    : num 0.15 #>   .. ..$ a_a0_y_het    : num 0.12 #>   .. ..$ y_cor         : num 0.5 #>   .. ..$ y2_shrink     : num 0.8 #>   .. ..$ y3_shrink     : num 0.6 #>   .. ..$ y1_y2_cross   : num 0.1 #>   .. ..$ y1_y3_cross   : num 0.05 #>   .. ..$ y2_y3_cross   : num 0.05 #>   ..$ y_feedback              : chr \"full\" #>   ..$ n_outcomes              : num 1 #>   ..$ n_baselines             : num 5 #>   ..$ exposure_type           : chr \"binary\" #>   ..$ outcome_type            : chr \"continuous\" #>   ..$ structural_model        : chr \"semi-markovian\" #>   ..$ intervention_applied    : logi FALSE #>   ..$ sampling_weights_applied: logi FALSE #>   ..$ censoring_probs         :List of 4 #>   .. ..$ : num [1:1000] 0.119 0.119 0.119 0.1 0.1 ... #>   .. ..$ : num [1:1000] 0.119 0.119 0.119 0.1 0.1 ... #>   .. ..$ : num [1:1000] 0.1 0.119 0.1 0.1 0.1 ... #>   .. ..$ : num [1:1000] 0.1 0.119 0.1 0.1 0.1 ... #>   ..$ waves                   : num 3 #>   ..$ n                       : num 1000 #>   ..$ format                  : chr \"wide\" #>   ..$ timestamp               : POSIXct[1:1], format: \"2025-06-14 04:45:11\" #>   ..$ shadows_applied         : logi FALSE"},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"customizing-the-data-generation-process","dir":"Articles","previous_headings":"","what":"Customizing the Data Generation Process","title":"Basic Simulation with margot.sim","text":"can customize various aspects simulation:","code":"# Custom simulation with specific parameters sim_custom <- margot_simulate(   n = 500,   waves = 4,   n_baselines = 3,        # Fewer baseline covariates   exposure_type = \"continuous\",  # Continuous exposure   outcome_type = \"binary\",       # Binary outcome   params = list(     b_a_coef = 0.3,      # Baseline → exposure effect     a_y_coef = 0.5,      # Exposure → outcome effect     b_y_coef = 0.2       # Baseline → outcome effect   ) )  # Check exposure and outcome types summary(sim_custom$t1_a)  # Continuous #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> -3.2059 -0.8023 -0.0603 -0.0563  0.6681  5.0258 table(sim_custom$t2_y)    # Binary #>  #>   0   1  #> 240 260"},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"adding-censoring","dir":"Articles","previous_headings":"","what":"Adding Censoring","title":"Basic Simulation with margot.sim","text":"Real-world longitudinal studies often dropout. can add censoring:","code":"# Simulate with censoring sim_censored <- margot_simulate(   n = 1000,   waves = 3,   censoring = list(     rate = 0.2,                    # 20% censoring rate per wave     exposure_dependence = TRUE,    # Censoring depends on exposure     y_dependence = TRUE           # Censoring depends on outcome   ) )  # Check censoring indicators table(sim_censored$t0_not_lost_following_wave) #>  #>    1  #> 1000 table(sim_censored$t1_not_lost_following_wave) #>  #>    1  #> 1000"},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"working-with-long-format","dir":"Articles","previous_headings":"","what":"Working with Long Format","title":"Basic Simulation with margot.sim","text":"many analyses, may want data long format:","code":"# Generate in long format sim_long <- margot_simulate(   n = 200,   waves = 3,   wide = FALSE  # Request long format )  # View structure head(sim_long) #> # A tibble: 6 × 11 #>      id    b1    b2     b3    b4     b5  time     a       y #>   <int> <dbl> <dbl>  <dbl> <dbl>  <dbl> <int> <int>   <dbl> #> 1     1 -1.52 -1.42 -0.815 0.898 -1.76      0     1 -2.05   #> 2     1 -1.52 -1.42 -0.815 0.898 -1.76      1     0 -0.896  #> 3     1 -1.52 -1.42 -0.815 0.898 -1.76      2     1 -0.487  #> 4     1 -1.52 -1.42 -0.815 0.898 -1.76      3     0 -0.0148 #> 5     1 -1.52 -1.42 -0.815 0.898 -1.76      4    NA  1.10   #> 6     2  1.40  3.08  0.996 0.252  0.530     0     1  0.592  #> # ℹ 2 more variables: not_lost_following_wave <int>, l <dbl>  # Number of observations per person table(table(sim_long$id)) #>  #>   5  #> 200"},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"using-interventions","dir":"Articles","previous_headings":"","what":"Using Interventions","title":"Basic Simulation with margot.sim","text":"can simulate data specific intervention regimes:","code":"# Define an intervention that sets treatment to 1 for everyone always_treat <- function(data, time, trt) {   rep(1, nrow(data)) }  # Simulate under intervention sim_intervention <- margot_simulate(   n = 500,   waves = 2,   intervention = always_treat )  # Verify intervention was applied table(sim_intervention$t1_a)  # All 1s #>  #>   1  #> 500"},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Basic Simulation with margot.sim","text":"vignette covered basic simulation. See vignettes : Applying Shadows: add measurement error, missingness, selection bias Monte Carlo Evaluation: evaluate estimator performance Causal Inference: simulate data causal effect estimation","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Basic Simulation with margot.sim","text":"margot_simulate() function provides flexible framework generating realistic longitudinal data : Customizable structural causal models Various exposure outcome types Realistic censoring patterns Support interventions wide long format output forms foundation advanced simulation studies evaluate statistical methods realistic conditions.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Censoring and Effect Modification","text":"vignette explores critical interaction censoring effect modification longitudinal studies. demonstrate : Differential censoring can occur dropout depends effect modifiers Selection bias emerges analyses ignore informative censoring Weighted analyses can help correct censoring-induced bias Sensitivity analyses assess robustness censoring assumptions","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"motivating-example-mental-health-intervention","dir":"Articles","previous_headings":"","what":"Motivating Example: Mental Health Intervention","title":"Censoring and Effect Modification","text":"Consider digital mental health intervention : Participants severe baseline symptoms (high B1) benefit treatment However, participants likely drop treatment reduces symptoms severe group (effect modification) Ignoring differential dropout underestimate treatment benefits creates challenging scenario subgroup largest treatment benefit likely censored.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"step-1-define-effect-modification-and-censoring-parameters","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 1: Define Effect Modification and Censoring Parameters","title":"Censoring and Effect Modification","text":"","code":"# Simulation parameters n <- 2000 waves <- 4  # Effect modification parameters base_effect <- 0.2          # Base treatment effect severe_modifier <- 0.5      # Additional effect for severe symptoms severe_threshold <- 0       # B1 > 0 indicates severe symptoms  # Censoring parameters base_censoring_prob <- 0.05    # 5% per wave for low severity severe_censoring_multiplier <- 4 # 4x higher for severe group treatment_protection <- 0.5      # Treatment reduces dropout by 50%  cat(\"Effect Modification Setup:\\n\") #> Effect Modification Setup: cat(\"  Base treatment effect:\", base_effect, \"\\n\") #>   Base treatment effect: 0.2 cat(\"  Additional effect for severe group:\", severe_modifier, \"\\n\") #>   Additional effect for severe group: 0.5 cat(\"  Total effect for severe group:\", base_effect + severe_modifier, \"\\n\") #>   Total effect for severe group: 0.7  cat(\"\\nCensoring Setup:\\n\") #>  #> Censoring Setup: cat(\"  Base censoring probability:\", base_censoring_prob, \"\\n\") #>   Base censoring probability: 0.05 cat(\"  Severe group multiplier:\", severe_censoring_multiplier, \"\\n\") #>   Severe group multiplier: 4 cat(\"  Treatment protection factor:\", treatment_protection, \"\\n\") #>   Treatment protection factor: 0.5"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"step-2-simulate-data-with-strong-effect-modification","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 2: Simulate Data with Strong Effect Modification","title":"Censoring and Effect Modification","text":"","code":"set.seed(2025)  # Simulation parameters with effect modification sim_params <- list(   # Base treatment effect   a_lag_y_coef = base_effect,      # Strong effect modification by baseline severity (b1)   a_b1_y_het = severe_modifier,      # Make severe symptoms stable over time   b1_y_coef = 0.8,      # Other parameters   y_feedback = \"full\" )  # Simulate data sim_result <- margot_simulate(   n = n,   waves = waves,   params = sim_params,   seed = 2025 )  # Add severity indicator sim_result$severity_group <- ifelse(sim_result$b1 > severe_threshold,                                      \"Severe\", \"Mild\")  # Check balance severity_summary <- sim_result %>%   group_by(severity_group) %>%   summarise(     n = n(),     prop = n / nrow(sim_result),     mean_b1 = mean(b1),     baseline_outcome = mean(t0_y),     .groups = \"drop\"   )  print(severity_summary) #> # A tibble: 2 × 5 #>   severity_group     n  prop mean_b1 baseline_outcome #>   <chr>          <int> <dbl>   <dbl>            <dbl> #> 1 Mild             958 0.479  -0.794          0.00545 #> 2 Severe          1042 0.521   0.810          0.240"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"step-3-apply-differential-censoring","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 3: Apply Differential Censoring","title":"Censoring and Effect Modification","text":"","code":"# Create censoring shadow that depends on severity and treatment create_differential_censoring <- function(data) {   n_obs <- nrow(data)   censored <- rep(FALSE, n_obs)   censoring_wave <- rep(NA, n_obs)   censoring_prob <- rep(NA, n_obs)      for (wave in 1:waves) {     # Skip if already censored     still_observed <- !censored          if (sum(still_observed) == 0) break          # Get current treatment status     treatment_var <- paste0(\"t\", wave, \"_a\")     if (!(treatment_var %in% names(data))) next          # Calculate censoring probability     # Base probability     prob <- rep(base_censoring_prob, n_obs)          # Increase for severe group     prob[data$severity_group == \"Severe\"] <- prob[data$severity_group == \"Severe\"] *                                                severe_censoring_multiplier          # Reduce if treated (protective effect)     prob[data[[treatment_var]] == 1] <- prob[data[[treatment_var]] == 1] *                                           treatment_protection          # Apply censoring     newly_censored <- still_observed & (runif(n_obs) < prob)     censored[newly_censored] <- TRUE     censoring_wave[newly_censored] <- wave     censoring_prob[newly_censored] <- prob[newly_censored]   }      # Add censoring info to data   data$censored <- censored   data$censoring_wave <- censoring_wave   data$censoring_prob <- censoring_prob      # Apply censoring to outcome variables   data_censored <- data   for (i in 1:n_obs) {     if (data_censored$censored[i]) {       cwave <- data_censored$censoring_wave[i]       # Set all variables after censoring wave to NA       for (w in cwave:(waves + 1)) {         outcome_var <- paste0(\"t\", w, \"_y\")         if (outcome_var %in% names(data_censored)) {           data_censored[[outcome_var]][i] <- NA         }       }     }   }      return(data_censored) }  # Apply censoring data_censored <- create_differential_censoring(sim_result)  # Censoring summary censoring_summary <- data_censored %>%   group_by(severity_group) %>%   summarise(     n = n(),     n_censored = sum(censored),     prop_censored = mean(censored),     .groups = \"drop\"   )  cat(\"\\n=== Censoring Summary ===\\n\") #>  #> === Censoring Summary === print(censoring_summary) #> # A tibble: 2 × 4 #>   severity_group     n n_censored prop_censored #>   <chr>          <int>      <int>         <dbl> #> 1 Mild             958        147         0.153 #> 2 Severe          1042        469         0.450  # By treatment and severity censoring_by_treatment <- data_censored %>%   group_by(severity_group, t1_a) %>%   summarise(     n = n(),     prop_censored = mean(censored),     .groups = \"drop\"   ) %>%   mutate(Treatment = ifelse(t1_a == 1, \"Treated\", \"Control\"))  print(censoring_by_treatment) #> # A tibble: 4 × 5 #>   severity_group  t1_a     n prop_censored Treatment #>   <chr>          <int> <int>         <dbl> <chr>     #> 1 Mild               0   469         0.164 Control   #> 2 Mild               1   489         0.143 Treated   #> 3 Severe             0   436         0.495 Control   #> 4 Severe             1   606         0.417 Treated"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"step-4-visualize-censoring-patterns","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 4: Visualize Censoring Patterns","title":"Censoring and Effect Modification","text":"","code":"# Survival curves by group surv_data <- data_censored %>%   mutate(     time = ifelse(censored, censoring_wave, waves + 1),     status = as.numeric(!censored),  # 1 = observed (not censored)     group = paste(severity_group, ifelse(t1_a == 1, \"Treated\", \"Control\"))   )  # Kaplan-Meier curves km_fit <- survfit(Surv(time, status) ~ group, data = surv_data)  # Plot survival curves plot(km_fit, col = c(\"#E69F00\", \"#E69F00\", \"#56B4E9\", \"#56B4E9\"),      lty = c(1, 2, 1, 2),      xlab = \"Wave\", ylab = \"Probability of Remaining in Study\",      main = \"Retention by Severity and Treatment Status\") legend(\"bottomleft\",         c(\"Mild Control\", \"Mild Treated\", \"Severe Control\", \"Severe Treated\"),        col = c(\"#E69F00\", \"#E69F00\", \"#56B4E9\", \"#56B4E9\"),        lty = c(1, 2, 1, 2)) # Censoring patterns over waves censoring_waves <- data_censored %>%   filter(censored) %>%   group_by(censoring_wave, severity_group) %>%   summarise(n = n(), .groups = \"drop\") %>%   complete(censoring_wave = 1:waves, severity_group, fill = list(n = 0))  p1 <- ggplot(censoring_waves, aes(x = censoring_wave, y = n, fill = severity_group)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   scale_fill_manual(values = c(\"Mild\" = \"#E69F00\", \"Severe\" = \"#56B4E9\")) +   labs(     title = \"Censoring Patterns by Wave and Severity\",     x = \"Wave of Censoring\",     y = \"Number Censored\",     fill = \"Severity Group\"   ) +   theme_minimal()  print(p1)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"complete-case-analysis-biased","dir":"Articles","previous_headings":"Analyzing Treatment Effects","what":"Complete Case Analysis (Biased)","title":"Censoring and Effect Modification","text":"","code":"# Complete case analysis complete_cases <- data_censored %>%   filter(!is.na(t5_y))  # Final outcome available  cc_summary <- complete_cases %>%   group_by(severity_group) %>%   summarise(     n_total = n(),     prop_of_original = n() / (nrow(data_censored) / 2),     mean_b1 = mean(b1),     .groups = \"drop\"   )  cat(\"\\n=== Complete Case Sample ===\\n\") #>  #> === Complete Case Sample === print(cc_summary) #> # A tibble: 2 × 4 #>   severity_group n_total prop_of_original mean_b1 #>   <chr>            <int>            <dbl>   <dbl> #> 1 Mild               811            0.811  -0.781 #> 2 Severe             573            0.573   0.823  # Calculate treatment effects calculate_ate <- function(data, outcome_var = \"t5_y\", treatment_var = \"t4_a\") {   data %>%     group_by(severity_group) %>%     summarise(       n = n(),       effect = mean(.data[[outcome_var]][.data[[treatment_var]] == 1], na.rm = TRUE) -                mean(.data[[outcome_var]][.data[[treatment_var]] == 0], na.rm = TRUE),       .groups = \"drop\"     ) }  # Complete case effects cc_effects <- calculate_ate(complete_cases) cc_overall <- with(complete_cases,                     mean(t5_y[t4_a == 1], na.rm = TRUE) -                     mean(t5_y[t4_a == 0], na.rm = TRUE))  cat(\"\\n=== Complete Case Treatment Effects ===\\n\") #>  #> === Complete Case Treatment Effects === print(cc_effects) #> # A tibble: 2 × 3 #>   severity_group     n effect #>   <chr>          <int>  <dbl> #> 1 Mild             811 -0.129 #> 2 Severe           573  1.05 cat(\"Overall ATE (complete cases):\", round(cc_overall, 3), \"\\n\") #> Overall ATE (complete cases): 0.473"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"true-effects-no-censoring","dir":"Articles","previous_headings":"Analyzing Treatment Effects","what":"True Effects (No Censoring)","title":"Censoring and Effect Modification","text":"","code":"# Calculate true effects using full data true_effects <- calculate_ate(sim_result) true_overall <- with(sim_result,                      mean(t5_y[t4_a == 1]) - mean(t5_y[t4_a == 0]))  cat(\"\\n=== True Treatment Effects (No Censoring) ===\\n\") #>  #> === True Treatment Effects (No Censoring) === print(true_effects) #> # A tibble: 2 × 3 #>   severity_group     n effect #>   <chr>          <int>  <dbl> #> 1 Mild             958 -0.130 #> 2 Severe          1042  0.949 cat(\"Overall ATE (true):\", round(true_overall, 3), \"\\n\") #> Overall ATE (true): 0.539  # Compare bias bias_summary <- data.frame(   Group = c(\"Mild\", \"Severe\", \"Overall\"),   True_Effect = c(true_effects$effect, true_overall),   CC_Effect = c(cc_effects$effect, cc_overall),   Bias = c(cc_effects$effect, cc_overall) - c(true_effects$effect, true_overall) ) %>%   mutate(Relative_Bias = 100 * Bias / True_Effect)  cat(\"\\n=== Bias from Complete Case Analysis ===\\n\") #>  #> === Bias from Complete Case Analysis === print(bias_summary %>% mutate(across(where(is.numeric), ~round(., 3)))) #>     Group True_Effect CC_Effect   Bias Relative_Bias #> 1    Mild      -0.130    -0.129  0.001        -0.930 #> 2  Severe       0.949     1.051  0.101        10.678 #> 3 Overall       0.539     0.473 -0.066       -12.305"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"inverse-probability-of-censoring-weights-ipcw","dir":"Articles","previous_headings":"Analyzing Treatment Effects","what":"Inverse Probability of Censoring Weights (IPCW)","title":"Censoring and Effect Modification","text":"","code":"# Calculate inverse probability of censoring weights calculate_ipcw <- function(data) {   # Model censoring probability   # We'll use a simple model for illustration   censor_model <- glm(censored ~ severity_group * t1_a + b1 + t0_y,                       data = data,                       family = binomial())      # Predict probability of being censored   data$prob_censored <- predict(censor_model, type = \"response\")      # Calculate weights (inverse probability of remaining)   data$ipcw <- 1 / (1 - data$prob_censored)      # Stabilize weights   data$ipcw_stabilized <- data$ipcw * mean(!data$censored)      return(data) }  # Apply IPCW data_weighted <- calculate_ipcw(data_censored)  # Check weight distribution weight_summary <- data_weighted %>%   filter(!censored) %>%   group_by(severity_group) %>%   summarise(     n = n(),     mean_weight = mean(ipcw_stabilized),     sd_weight = sd(ipcw_stabilized),     min_weight = min(ipcw_stabilized),     max_weight = max(ipcw_stabilized),     .groups = \"drop\"   )  cat(\"\\n=== IPCW Weight Distribution ===\\n\") #>  #> === IPCW Weight Distribution === print(weight_summary) #> # A tibble: 2 × 6 #>   severity_group     n mean_weight sd_weight min_weight max_weight #>   <chr>          <int>       <dbl>     <dbl>      <dbl>      <dbl> #> 1 Mild             811       0.817    0.0135      0.797      0.862 #> 2 Severe           573       1.26     0.0996      1.05       1.44  # Weighted analysis weighted_effects <- data_weighted %>%   filter(!is.na(t5_y)) %>%   group_by(severity_group) %>%   summarise(     n = n(),     effect = weighted.mean(t5_y[t4_a == 1], ipcw_stabilized[t4_a == 1]) -              weighted.mean(t5_y[t4_a == 0], ipcw_stabilized[t4_a == 0]),     .groups = \"drop\"   )  weighted_overall <- with(data_weighted[!is.na(data_weighted$t5_y), ],                         weighted.mean(t5_y[t4_a == 1], ipcw_stabilized[t4_a == 1]) -                         weighted.mean(t5_y[t4_a == 0], ipcw_stabilized[t4_a == 0]))  cat(\"\\n=== IPCW-Weighted Treatment Effects ===\\n\") #>  #> === IPCW-Weighted Treatment Effects === print(weighted_effects) #> # A tibble: 2 × 3 #>   severity_group     n effect #>   <chr>          <int>  <dbl> #> 1 Mild             811 -0.132 #> 2 Severe           573  1.04 cat(\"Overall ATE (weighted):\", round(weighted_overall, 3), \"\\n\") #> Overall ATE (weighted): 0.594"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"comparing-all-approaches","dir":"Articles","previous_headings":"Analyzing Treatment Effects","what":"Comparing All Approaches","title":"Censoring and Effect Modification","text":"","code":"# Combine all results comparison_data <- data.frame(   Method = rep(c(\"True\", \"Complete Case\", \"IPCW\"), each = 3),   Group = rep(c(\"Mild\", \"Severe\", \"Overall\"), 3),   Effect = c(     true_effects$effect, true_overall,     cc_effects$effect, cc_overall,     weighted_effects$effect, weighted_overall   ) )  # Plot comparison p2 <- ggplot(comparison_data, aes(x = Group, y = Effect, fill = Method)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   geom_hline(yintercept = 0, linetype = \"dashed\") +   scale_fill_manual(values = c(\"True\" = \"#009E73\",                                 \"Complete Case\" = \"#D55E00\",                                \"IPCW\" = \"#0072B2\")) +   labs(     title = \"Treatment Effects: True vs Complete Case vs IPCW\",     subtitle = \"Impact of differential censoring by severity\",     x = \"Severity Group\",     y = \"Treatment Effect\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p2) # Bias comparison bias_comparison <- comparison_data %>%   filter(Method != \"True\") %>%   left_join(comparison_data %>% filter(Method == \"True\") %>%              select(Group, True_Effect = Effect), by = \"Group\") %>%   mutate(     Bias = Effect - True_Effect,     Relative_Bias = 100 * Bias / True_Effect   )  p3 <- ggplot(bias_comparison, aes(x = Group, y = Bias, fill = Method)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   geom_hline(yintercept = 0, linetype = \"solid\") +   scale_fill_manual(values = c(\"Complete Case\" = \"#D55E00\",                                \"IPCW\" = \"#0072B2\")) +   labs(     title = \"Bias in Treatment Effect Estimation\",     subtitle = \"Deviation from true effect\",     x = \"Severity Group\",     y = \"Bias\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p3)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"varying-censoring-assumptions","dir":"Articles","previous_headings":"Sensitivity Analyses","what":"Varying Censoring Assumptions","title":"Censoring and Effect Modification","text":"","code":"# Function to run sensitivity analysis run_sensitivity <- function(censoring_multipliers = c(2, 3, 4, 5, 6)) {      results <- list()      for (mult in censoring_multipliers) {     # Redefine censoring with new multiplier     severe_censoring_multiplier <- mult          # Apply censoring     temp_data <- create_differential_censoring(sim_result)          # Complete case analysis     cc_data <- temp_data %>% filter(!is.na(t5_y))     cc_ate <- with(cc_data, mean(t5_y[t4_a == 1]) - mean(t5_y[t4_a == 0]))          # IPCW analysis     temp_weighted <- calculate_ipcw(temp_data)     weighted_data <- temp_weighted %>% filter(!is.na(t5_y))     ipcw_ate <- with(weighted_data,                      weighted.mean(t5_y[t4_a == 1], ipcw_stabilized[t4_a == 1]) -                      weighted.mean(t5_y[t4_a == 0], ipcw_stabilized[t4_a == 0]))          # Store results     results[[as.character(mult)]] <- data.frame(       Multiplier = mult,       Prop_Censored = mean(temp_data$censored),       CC_ATE = cc_ate,       IPCW_ATE = ipcw_ate,       CC_Bias = cc_ate - true_overall,       IPCW_Bias = ipcw_ate - true_overall     )   }      bind_rows(results) }  # Run sensitivity analysis sensitivity_results <- run_sensitivity()  cat(\"\\n=== Sensitivity Analysis Results ===\\n\") #>  #> === Sensitivity Analysis Results === print(round(sensitivity_results, 3)) #>   Multiplier Prop_Censored CC_ATE IPCW_ATE CC_Bias IPCW_Bias #> 1          2         0.296  0.436    0.535  -0.103    -0.004 #> 2          3         0.317  0.361    0.474  -0.178    -0.065 #> 3          4         0.304  0.480    0.590  -0.059     0.051 #> 4          5         0.313  0.463    0.596  -0.076     0.057 #> 5          6         0.302  0.447    0.552  -0.092     0.013  # Plot sensitivity results sens_plot_data <- sensitivity_results %>%   select(Multiplier, `Complete Case` = CC_Bias, `IPCW` = IPCW_Bias) %>%   pivot_longer(cols = -Multiplier, names_to = \"Method\", values_to = \"Bias\")  p4 <- ggplot(sens_plot_data, aes(x = Multiplier, y = Bias, color = Method)) +   geom_line(size = 1.2) +   geom_point(size = 3) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   scale_color_manual(values = c(\"Complete Case\" = \"#D55E00\", \"IPCW\" = \"#0072B2\")) +   labs(     title = \"Sensitivity to Censoring Assumptions\",     subtitle = \"Bias as function of differential censoring strength\",     x = \"Censoring Multiplier for Severe Group\",     y = \"Bias in Overall ATE\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p4)"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"pattern-mixture-models","dir":"Articles","previous_headings":"Sensitivity Analyses","what":"Pattern Mixture Models","title":"Censoring and Effect Modification","text":"","code":"# Analyze outcomes by censoring pattern pattern_analysis <- data_censored %>%   mutate(     censoring_pattern = case_when(       !censored ~ \"Complete\",       censoring_wave <= 2 ~ \"Early Dropout\",       TRUE ~ \"Late Dropout\"     )   ) %>%   group_by(severity_group, censoring_pattern) %>%   summarise(     n = n(),     mean_baseline_y = mean(t0_y),     mean_baseline_b1 = mean(b1),     prop_treated = mean(t1_a),     .groups = \"drop\"   )  cat(\"\\n=== Pattern Mixture Analysis ===\\n\") #>  #> === Pattern Mixture Analysis === print(pattern_analysis) #> # A tibble: 6 × 6 #>   severity_group censoring_pattern     n mean_baseline_y mean_baseline_b1 #>   <chr>          <chr>             <int>           <dbl>            <dbl> #> 1 Mild           Complete            811         -0.0131           -0.781 #> 2 Mild           Early Dropout        73          0.136            -0.836 #> 3 Mild           Late Dropout         74          0.0793           -0.889 #> 4 Severe         Complete            573          0.269             0.823 #> 5 Severe         Early Dropout       287          0.159             0.822 #> 6 Severe         Late Dropout        182          0.276             0.751 #> # ℹ 1 more variable: prop_treated <dbl>  # Visualize patterns p5 <- ggplot(pattern_analysis, aes(x = censoring_pattern, y = mean_baseline_y,                                     fill = severity_group)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   scale_fill_manual(values = c(\"Mild\" = \"#E69F00\", \"Severe\" = \"#56B4E9\")) +   labs(     title = \"Baseline Outcomes by Censoring Pattern\",     subtitle = \"Evidence of non-random dropout\",     x = \"Censoring Pattern\",     y = \"Mean Baseline Outcome\"   ) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))  print(p5)"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"monte-carlo-evaluation","dir":"Articles","previous_headings":"","what":"Monte Carlo Evaluation","title":"Censoring and Effect Modification","text":"","code":"# Monte Carlo to evaluate methods # Note: Due to API changes, we'll use a simplified approach set.seed(2025) n_mc <- 200 mc_results <- list(complete_case = numeric(n_mc), ipcw = numeric(n_mc))  for (i in 1:n_mc) {   # Simulate data   temp_sim <- margot_simulate(     n = 1000,     waves = waves,     params = sim_params,     seed = 2025 + i   )      temp_sim$severity_group <- ifelse(temp_sim$b1 > severe_threshold, \"Severe\", \"Mild\")      # Apply censoring   temp_censored <- create_differential_censoring(temp_sim)      # Complete case   cc_data <- temp_censored %>% filter(!is.na(t5_y))   mc_results$complete_case[i] <- with(cc_data, mean(t5_y[t4_a == 1]) - mean(t5_y[t4_a == 0]))      # IPCW   temp_weighted <- calculate_ipcw(temp_censored)   weighted_data <- temp_weighted %>% filter(!is.na(t5_y))   mc_results$ipcw[i] <- with(weighted_data,                             weighted.mean(t5_y[t4_a == 1], ipcw_stabilized[t4_a == 1]) -                             weighted.mean(t5_y[t4_a == 0], ipcw_stabilized[t4_a == 0])) }  # Summary statistics mc_summary <- data.frame(   Method = c(\"Complete Case\", \"IPCW\"),   Mean_ATE = c(mean(mc_results$complete_case), mean(mc_results$ipcw)),   SD = c(sd(mc_results$complete_case), sd(mc_results$ipcw)),   Bias = c(mean(mc_results$complete_case) - true_overall,             mean(mc_results$ipcw) - true_overall),   RMSE = c(sqrt(mean((mc_results$complete_case - true_overall)^2)),            sqrt(mean((mc_results$ipcw - true_overall)^2))) )  cat(\"\\n=== Monte Carlo Results (\", n_mc, \" replications) ===\\n\", sep = \"\") #>  #> === Monte Carlo Results (200 replications) === print(mc_summary %>% mutate(across(where(is.numeric), ~round(., 4)))) #>          Method Mean_ATE     SD    Bias   RMSE #> 1 Complete Case   0.3989 0.0962 -0.1401 0.1698 #> 2          IPCW   0.5183 0.0947 -0.0207 0.0967"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"always-examine-censoring-patterns","dir":"Articles","previous_headings":"Practical Recommendations","what":"1. Always Examine Censoring Patterns","title":"Censoring and Effect Modification","text":"","code":"# Censoring diagnostics function diagnose_censoring <- function(data) {   cat(\"=== Censoring Diagnostics ===\\n\\n\")      # Overall rate   cat(\"Overall censoring rate:\", round(100 * mean(data$censored), 1), \"%\\n\\n\")      # By key variables   cat(\"Censoring by severity:\\n\")   print(table(data$severity_group, data$censored))      cat(\"\\nCensoring by treatment:\\n\")   print(table(data$t1_a, data$censored))      # Test for differential censoring   cat(\"\\n=== Tests for Differential Censoring ===\\n\")      # By severity   sev_test <- chisq.test(table(data$severity_group, data$censored))   cat(\"Severity association: χ² =\", round(sev_test$statistic, 2),        \", p =\", round(sev_test$p.value, 4), \"\\n\")      # By treatment   trt_test <- chisq.test(table(data$t1_a, data$censored))   cat(\"Treatment association: χ² =\", round(trt_test$statistic, 2),       \", p =\", round(trt_test$p.value, 4), \"\\n\") }  diagnose_censoring(data_censored) #> === Censoring Diagnostics === #>  #> Overall censoring rate: 30.8 % #>  #> Censoring by severity: #>          #>          FALSE TRUE #>   Mild     811  147 #>   Severe   573  469 #>  #> Censoring by treatment: #>     #>     FALSE TRUE #>   0   612  293 #>   1   772  323 #>  #> === Tests for Differential Censoring === #> Severity association: χ² = 204.69 , p = 0  #> Treatment association: χ² = 1.79 , p = 0.1806"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"consider-multiple-imputation","dir":"Articles","previous_headings":"Practical Recommendations","what":"2. Consider Multiple Imputation","title":"Censoring and Effect Modification","text":"","code":"# Simple illustration of MI approach if (requireNamespace(\"mice\", quietly = TRUE)) {   # Prepare data for imputation   mi_data <- data_censored %>%     select(id, severity_group, b1, t0_y, t1_a, t2_a, t3_a, t4_a,             t1_y, t2_y, t3_y, t4_y, t5_y)      # Impute (reduced iterations for speed)   mi_result <- mice::mice(mi_data, m = 5, maxit = 5, printFlag = FALSE)      # Analyze each imputed dataset   mi_effects <- mice::complete(mi_result, \"all\") %>%     lapply(function(imp_data) {       with(imp_data, mean(t5_y[t4_a == 1]) - mean(t5_y[t4_a == 0]))     })      # Pool results   pooled_ate <- mean(unlist(mi_effects))      cat(\"\\n=== Multiple Imputation Results ===\\n\")   cat(\"Pooled ATE estimate:\", round(pooled_ate, 3), \"\\n\")   cat(\"Bias:\", round(pooled_ate - true_overall, 3), \"\\n\") } #>  #> === Multiple Imputation Results === #> Pooled ATE estimate: 0.469  #> Bias: -0.07"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"report-censoring-transparently","dir":"Articles","previous_headings":"Practical Recommendations","what":"3. Report Censoring Transparently","title":"Censoring and Effect Modification","text":"","code":"# Create comprehensive censoring report censoring_report <- list(   overall = data.frame(     Measure = c(\"Total Sample\", \"Censored\", \"Complete Cases\", \"Censoring Rate\"),     Value = c(nrow(data_censored),                sum(data_censored$censored),               sum(!data_censored$censored),               paste0(round(100 * mean(data_censored$censored), 1), \"%\"))   ),   by_group = data_censored %>%     group_by(severity_group) %>%     summarise(       N = n(),       Censored = sum(censored),       Rate = paste0(round(100 * mean(censored), 1), \"%\"),       .groups = \"drop\"     ),   by_wave = data_censored %>%     filter(censored) %>%     count(censoring_wave) %>%     mutate(Percent = paste0(round(100 * n / sum(n), 1), \"%\")) )  cat(\"\\n=== Censoring Report ===\\n\") #>  #> === Censoring Report === print(censoring_report$overall) #>          Measure Value #> 1   Total Sample  2000 #> 2       Censored   616 #> 3 Complete Cases  1384 #> 4 Censoring Rate 30.8% cat(\"\\nBy Severity Group:\\n\") #>  #> By Severity Group: print(censoring_report$by_group) #> # A tibble: 2 × 4 #>   severity_group     N Censored Rate  #>   <chr>          <int>    <int> <chr> #> 1 Mild             958      147 15.3% #> 2 Severe          1042      469 45% cat(\"\\nBy Wave:\\n\") #>  #> By Wave: print(censoring_report$by_wave) #> # A tibble: 4 × 3 #>   censoring_wave     n Percent #>            <int> <int> <chr>   #> 1              1   191 31%     #> 2              2   169 27.4%   #> 3              3   140 22.7%   #> 4              4   116 18.8%"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Censoring and Effect Modification","text":"vignette demonstrated: Differential censoring effect modifiers creates complex selection bias Complete case analysis can severely underestimate treatment effects IPCW methods help correct bias require correct model specification Sensitivity analyses crucial assessing robustness Multiple approaches (IPCW, MI, pattern mixture) considered Key takeaways: - Always examine censoring patterns analysis - Test associations censoring key variables - Use weighted analyses censoring informative - Conduct sensitivity analyses different assumptions - Report censoring transparently publications interaction censoring effect modification particularly challenging : - Groups largest benefits may likely drop - creates bias opposes true effect - Standard complete case analysis can miss important benefits - Proper handling censoring essential valid inference Next vignettes explore heterogeneous treatment effects complex time-varying scenarios.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"vignette demonstrates heterogeneous treatment effects (HTE) Simpson’s paradox longitudinal data. ’ll explore scenarios : Treatment effects vary dramatically across subgroups Simpson’s paradox emerges - positive effects subgroups null/negative overall Baseline characteristics strongly predict treatment response Aggregation masks important benefits specific populations","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"motivating-example-educational-intervention","dir":"Articles","previous_headings":"","what":"Motivating Example: Educational Intervention","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"Consider educational intervention : - Works excellently students low baseline achievement (strong catch-effect) - minimal negative effects high achievers (ceiling effect) - population high achievers low achievers - Overall effect appears null negative, masking benefits struggling students creates Simpson’s paradox: disaggregated analysis shows benefits, aggregated analysis suggests harm.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"step-1-define-heterogeneous-effects","dir":"Articles","previous_headings":"Setting Up Simpson’s Paradox","what":"Step 1: Define Heterogeneous Effects","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Population parameters n <- 3000 waves <- 3  # Subgroup proportions (more high achievers) prop_low_achievers <- 0.3   # 30% start with low achievement prop_high_achievers <- 0.7  # 70% start with high achievement  # Treatment effects by group effect_low_achievers <- 0.8   # Large positive effect effect_high_achievers <- -0.2 # Small negative effect  # Expected overall effect (weighted average) expected_overall <- prop_low_achievers * effect_low_achievers +                     prop_high_achievers * effect_high_achievers  cat(\"Treatment Effect Structure:\\n\") #> Treatment Effect Structure: cat(\"  Low achievers (\", prop_low_achievers * 100, \"%): effect = \",      effect_low_achievers, \"\\n\", sep = \"\") #>   Low achievers (30%): effect = 0.8 cat(\"  High achievers (\", prop_high_achievers * 100, \"%): effect = \",      effect_high_achievers, \"\\n\", sep = \"\") #>   High achievers (70%): effect = -0.2 cat(\"  Expected overall effect: \", round(expected_overall, 3), \"\\n\", sep = \"\") #>   Expected overall effect: 0.1 cat(\"\\nThis creates Simpson's Paradox: positive effect for low achievers,\\n\") #>  #> This creates Simpson's Paradox: positive effect for low achievers, cat(\"but null/negative overall effect due to population composition.\\n\") #> but null/negative overall effect due to population composition."},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"step-2-simulate-data-with-strong-heterogeneity","dir":"Articles","previous_headings":"Setting Up Simpson’s Paradox","what":"Step 2: Simulate Data with Strong Heterogeneity","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"set.seed(2025)  # Create baseline data with achievement groups # We'll use multiple baseline variables to create rich heterogeneity baseline_data <- data.frame(   id = 1:n,   # Primary stratification variable (achievement level)   achievement_group = sample(c(\"Low\", \"High\"), n, TRUE,                             c(prop_low_achievers, prop_high_achievers)) ) %>%   mutate(     # Map to numeric for simulation     b1 = ifelse(achievement_group == \"High\", 1, -1),     # Additional baseline characteristics correlated with achievement     b2 = b1 + rnorm(n, 0, 0.5),  # Socioeconomic status     b3 = -0.5 * b1 + rnorm(n, 0, 0.5)  # Motivation (inverse relationship)   )  # Define simulation parameters with strong heterogeneity het_params <- list(   # Base effect (applies to reference group)   a_lag_y_coef = 0.3,      # Heterogeneous effects - designed to create Simpson's paradox   a_b1_y_het = -0.5,    # Strong negative modification by achievement   a_b2_y_het = -0.1,    # Additional modification by SES   a_b3_y_het = 0.2,     # Positive modification by motivation      # Make baseline achievement predictive of outcomes   b1_y_coef = 0.6,   b2_y_coef = 0.2,   b3_y_coef = 0.1,      # Include baseline outcome feedback   y_feedback = \"full\",   a_y0_y_het = -0.1    # Treatment less effective for high baseline outcomes )  # Simulate data sim_data <- margot_simulate(   n = n,   waves = waves,   params = het_params,   n_baselines = 3,  # We want b1, b2, b3   seed = 2025 )  # Replace the generated baseline variables with our structured ones sim_data$b1 <- baseline_data$b1 sim_data$b2 <- baseline_data$b2 sim_data$b3 <- baseline_data$b3  # Add achievement groups sim_data$achievement_group <- baseline_data$achievement_group  # Verify subgroup balance balance_check <- sim_data %>%   group_by(achievement_group, t2_a) %>%   summarise(     n = n(),     mean_b1 = mean(b1),     mean_b2 = mean(b2),     mean_b3 = mean(b3),     .groups = \"drop\"   ) %>%   mutate(Treatment = ifelse(t2_a == 1, \"Treated\", \"Control\"))  print(balance_check) #> # A tibble: 4 × 7 #>   achievement_group  t2_a     n mean_b1 mean_b2 mean_b3 Treatment #>   <chr>             <int> <int>   <dbl>   <dbl>   <dbl> <chr>     #> 1 High                  0   982       1   1.01   -0.482 Control   #> 2 High                  1  1112       1   0.984  -0.488 Treated   #> 3 Low                   0   405      -1  -1.03    0.492 Control   #> 4 Low                   1   501      -1  -1.02    0.494 Treated"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"step-3-demonstrate-simpsons-paradox","dir":"Articles","previous_headings":"Setting Up Simpson’s Paradox","what":"Step 3: Demonstrate Simpson’s Paradox","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Calculate treatment effects outcome_var <- \"t4_y\"  # Outcome after treatment treatment_var <- \"t2_a\"  # Treatment at wave 2  # Overall effect (appears harmful or null) overall_effect <- mean(sim_data[[outcome_var]][sim_data[[treatment_var]] == 1]) -                   mean(sim_data[[outcome_var]][sim_data[[treatment_var]] == 0])  # Effects by achievement group group_effects <- sim_data %>%   group_by(achievement_group) %>%   summarise(     n = n(),     n_treated = sum(.data[[treatment_var]] == 1),     n_control = sum(.data[[treatment_var]] == 0),     effect = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]) -              mean(.data[[outcome_var]][.data[[treatment_var]] == 0]),     .groups = \"drop\"   )  cat(\"\\n=== Simpson's Paradox Demonstrated ===\\n\") #>  #> === Simpson's Paradox Demonstrated === cat(\"Overall treatment effect:\", round(overall_effect, 3), \"\\n\\n\") #> Overall treatment effect: 0.175 cat(\"Effects by achievement group:\\n\") #> Effects by achievement group: print(group_effects) #> # A tibble: 2 × 5 #>   achievement_group     n n_treated n_control effect #>   <chr>             <int>     <int>     <int>  <dbl> #> 1 High               2094      1112       982  0.175 #> 2 Low                 906       501       405  0.174  # Visualize the paradox paradox_data <- sim_data %>%   select(achievement_group, !!sym(treatment_var), !!sym(outcome_var)) %>%   mutate(Treatment = ifelse(!!sym(treatment_var) == 1, \"Treated\", \"Control\"))  p1 <- ggplot(paradox_data, aes(x = Treatment, y = !!sym(outcome_var), fill = Treatment)) +   geom_boxplot(alpha = 0.7) +   scale_fill_manual(values = c(\"Control\" = \"#E69F00\", \"Treated\" = \"#56B4E9\")) +   labs(     title = \"Overall Effect: Appears Null or Harmful\",     subtitle = paste(\"ATE =\", round(overall_effect, 3)),     y = \"Outcome\",     x = \"\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  p2 <- ggplot(paradox_data, aes(x = Treatment, y = !!sym(outcome_var), fill = Treatment)) +   geom_boxplot(alpha = 0.7) +   facet_wrap(~ achievement_group) +   scale_fill_manual(values = c(\"Control\" = \"#E69F00\", \"Treated\" = \"#56B4E9\")) +   labs(     title = \"Subgroup Effects: Clear Benefit for Low Achievers\",     subtitle = \"Simpson's Paradox: Aggregation hides important effects\",     y = \"Outcome\",     x = \"\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  print(p1 / p2)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"using-the-built-in-heterogeneity-functions","dir":"Articles","previous_headings":"Comprehensive Heterogeneity Analysis","what":"Using the Built-in Heterogeneity Functions","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Use the analyze_heterogeneity function het_analysis <- analyze_heterogeneity(   sim_data,   treatment_wave = 2,   outcome_wave = 4,   effect_modifiers = c(\"b1\", \"b2\", \"b3\", \"t0_y\") )  cat(\"\\n=== Heterogeneity Analysis ===\\n\") #>  #> === Heterogeneity Analysis === cat(\"Correlation between baseline characteristics and treatment effect:\\n\") #> Correlation between baseline characteristics and treatment effect: print(het_analysis) #>         modifier  correlation   p_value    ci_lower    ci_upper #> cor...1       b1 -0.003969161 0.8279666 -0.03975001 0.031821858 #> cor...2       b2 -0.007772417 0.6704417 -0.04354680 0.028021877 #> cor...3       b3  0.021829091 0.2319805 -0.01396832 0.057570617 #> cor...4     t0_y -0.026060404 0.1535699 -0.06178928 0.009735175  # More detailed analysis by tertiles create_tertile_analysis <- function(data, modifier, treatment_var, outcome_var) {   # Get unique quantiles to avoid duplicate breaks   quants <- quantile(data[[modifier]], c(0, 1/3, 2/3, 1), na.rm = TRUE)      # If quantiles aren't unique, use equal-sized groups instead   if (length(unique(quants)) < 4) {     # Use ntile for equal-sized groups     data$tertile <- dplyr::ntile(data[[modifier]], 3)     data$tertile <- factor(data$tertile, labels = c(\"Low\", \"Middle\", \"High\"))   } else {     # Create tertiles with unique breaks     data$tertile <- cut(data[[modifier]],                         breaks = unique(quants),                        labels = c(\"Low\", \"Middle\", \"High\")[1:(length(unique(quants))-1)],                        include.lowest = TRUE)   }      # Calculate effects by tertile   data %>%     group_by(tertile) %>%     summarise(       n = n(),       mean_modifier = mean(.data[[modifier]], na.rm = TRUE),       effect = mean(.data[[outcome_var]][.data[[treatment_var]] == 1], na.rm = TRUE) -                mean(.data[[outcome_var]][.data[[treatment_var]] == 0], na.rm = TRUE),       .groups = \"drop\"     ) }  # Analyze by tertiles of each modifier modifiers <- c(\"b1\", \"b2\", \"b3\", \"t0_y\") tertile_results <- list()  for (mod in modifiers) {   tertile_results[[mod]] <- create_tertile_analysis(     sim_data, mod, treatment_var, outcome_var   ) %>%     mutate(modifier = mod) }  tertile_data <- bind_rows(tertile_results)  # Visualize heterogeneity patterns p3 <- ggplot(tertile_data, aes(x = tertile, y = effect, fill = tertile)) +   geom_bar(stat = \"identity\") +   geom_hline(yintercept = 0, linetype = \"dashed\") +   facet_wrap(~ modifier, scales = \"free_x\") +   scale_fill_viridis_d() +   labs(     title = \"Treatment Effect Heterogeneity by Baseline Characteristics\",     subtitle = \"Effects vary dramatically across tertiles of baseline variables\",     x = \"Tertile\",     y = \"Treatment Effect\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  print(p3)"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"continuous-heterogeneity-visualization","dir":"Articles","previous_headings":"Comprehensive Heterogeneity Analysis","what":"Continuous Heterogeneity Visualization","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Create smooth heterogeneity plots plot_continuous_het <- function(data, modifier, treatment_var, outcome_var) {   ggplot(data, aes(x = .data[[modifier]], y = .data[[outcome_var]],                     color = factor(.data[[treatment_var]]))) +     geom_smooth(method = \"loess\", se = TRUE, alpha = 0.2) +     scale_color_manual(values = c(\"0\" = \"#E69F00\", \"1\" = \"#56B4E9\"),                       labels = c(\"Control\", \"Treated\")) +     labs(       x = paste(\"Baseline\", modifier),       y = \"Outcome\",       color = \"Treatment\"     ) +     theme_minimal() }  # Create plots for each modifier p_b1 <- plot_continuous_het(sim_data, \"b1\", treatment_var, outcome_var) +   labs(title = \"Achievement Level (b1)\")  p_b2 <- plot_continuous_het(sim_data, \"b2\", treatment_var, outcome_var) +   labs(title = \"Socioeconomic Status (b2)\")  p_b3 <- plot_continuous_het(sim_data, \"b3\", treatment_var, outcome_var) +   labs(title = \"Motivation (b3)\")  p_y0 <- plot_continuous_het(sim_data, \"t0_y\", treatment_var, outcome_var) +   labs(title = \"Baseline Outcome (t0_y)\")  # Combine plots p_combined <- (p_b1 + p_b2) / (p_b3 + p_y0) +   plot_annotation(     title = \"Continuous Treatment Effect Heterogeneity\",     subtitle = \"Treatment benefits vary smoothly across baseline characteristics\"   )  print(p_combined)"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"forest-plot-of-subgroup-effects","dir":"Articles","previous_headings":"Comprehensive Heterogeneity Analysis","what":"Forest Plot of Subgroup Effects","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Define meaningful subgroups sim_data <- sim_data %>%   mutate(     # Achievement-based groups     achievement_b1 = cut(b1, breaks = c(-Inf, -0.5, 0.5, Inf),                         labels = c(\"Low\", \"Medium\", \"High\")),     # SES groups     ses_b2 = cut(b2, breaks = c(-Inf, -0.5, 0.5, Inf),                 labels = c(\"Low\", \"Medium\", \"High\")),     # Motivation groups     motivation_b3 = cut(b3, breaks = c(-Inf, -0.5, 0.5, Inf),                        labels = c(\"Low\", \"Medium\", \"High\")),     # Baseline outcome groups     baseline_y = cut(t0_y, breaks = c(-Inf, -0.5, 0.5, Inf),                     labels = c(\"Low\", \"Medium\", \"High\"))   )  # Calculate effects for all subgroups calculate_subgroup_effects <- function(data, group_var, treatment_var, outcome_var) {   data %>%     group_by(.data[[group_var]]) %>%     summarise(       n = n(),       n_treated = sum(.data[[treatment_var]] == 1),       n_control = sum(.data[[treatment_var]] == 0),       mean_treated = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]),       mean_control = mean(.data[[outcome_var]][.data[[treatment_var]] == 0]),       effect = mean_treated - mean_control,       # Calculate standard error (simplified)       se_treated = sd(.data[[outcome_var]][.data[[treatment_var]] == 1]) / sqrt(n_treated),       se_control = sd(.data[[outcome_var]][.data[[treatment_var]] == 0]) / sqrt(n_control),       se = sqrt(se_treated^2 + se_control^2),       ci_lower = effect - 1.96 * se,       ci_upper = effect + 1.96 * se,       .groups = \"drop\"     ) %>%     mutate(       group_type = group_var,       subgroup = paste(group_var, .data[[group_var]], sep = \": \")     ) }  # Get effects for all grouping variables forest_data <- bind_rows(   calculate_subgroup_effects(sim_data, \"achievement_b1\", treatment_var, outcome_var),   calculate_subgroup_effects(sim_data, \"ses_b2\", treatment_var, outcome_var),   calculate_subgroup_effects(sim_data, \"motivation_b3\", treatment_var, outcome_var),   calculate_subgroup_effects(sim_data, \"baseline_y\", treatment_var, outcome_var) )  # Add overall effect overall_stats <- sim_data %>%   summarise(     n = n(),     n_treated = sum(.data[[treatment_var]] == 1),     n_control = sum(.data[[treatment_var]] == 0),     mean_treated = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]),     mean_control = mean(.data[[outcome_var]][.data[[treatment_var]] == 0]),     effect = mean_treated - mean_control,     se_treated = sd(.data[[outcome_var]][.data[[treatment_var]] == 1]) / sqrt(n_treated),     se_control = sd(.data[[outcome_var]][.data[[treatment_var]] == 0]) / sqrt(n_control),     se = sqrt(se_treated^2 + se_control^2),     ci_lower = effect - 1.96 * se,     ci_upper = effect + 1.96 * se   ) %>%   mutate(     group_type = \"Overall\",     subgroup = \"Overall\"   )  forest_data <- bind_rows(overall_stats, forest_data)  # Create forest plot forest_data$subgroup <- factor(forest_data$subgroup,                                levels = rev(forest_data$subgroup))  p_forest <- ggplot(forest_data, aes(x = effect, y = subgroup)) +   geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_errorbarh(aes(xmin = ci_lower, xmax = ci_upper), height = 0.2) +   geom_point(aes(size = n), shape = 15) +   scale_size_continuous(range = c(2, 6)) +   labs(     title = \"Forest Plot: Treatment Effects by Subgroup\",     subtitle = \"Strong heterogeneity reveals who benefits from treatment\",     x = \"Treatment Effect (95% CI)\",     y = \"\",     size = \"Sample Size\"   ) +   theme_minimal() +   theme(     panel.grid.major.y = element_blank(),     legend.position = \"bottom\"   )  print(p_forest)"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"statistical-tests-for-heterogeneity","dir":"Articles","previous_headings":"","what":"Statistical Tests for Heterogeneity","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Formal interaction tests interaction_model <- lm(   as.formula(paste(outcome_var, \"~ t2_a * (b1 + b2 + b3 + t0_y)\")),   data = sim_data )  # Extract interaction terms interaction_summary <- broom::tidy(interaction_model) %>%   filter(grepl(\"t2_a:\", term)) %>%   mutate(     term = gsub(\"t2_a:\", \"\", term),     significant = p.value < 0.05   )  cat(\"\\n=== Interaction Tests ===\\n\") #>  #> === Interaction Tests === print(interaction_summary) #> # A tibble: 4 × 6 #>   term  estimate std.error statistic p.value significant #>   <chr>    <dbl>     <dbl>     <dbl>   <dbl> <lgl>       #> 1 b1      0.0765    0.0979     0.782  0.435  FALSE       #> 2 b2     -0.0204    0.0782    -0.261  0.794  FALSE       #> 3 b3      0.115     0.0775     1.49   0.136  FALSE       #> 4 t0_y   -0.0838    0.0384    -2.18   0.0293 TRUE  # Likelihood ratio test for all interactions full_model <- interaction_model reduced_model <- lm(   as.formula(paste(outcome_var, \"~ t2_a + b1 + b2 + b3 + t0_y\")),   data = sim_data )  lr_test <- anova(reduced_model, full_model) cat(\"\\n=== Likelihood Ratio Test for Heterogeneity ===\\n\") #>  #> === Likelihood Ratio Test for Heterogeneity === print(lr_test) #> Analysis of Variance Table #>  #> Model 1: t4_y ~ t2_a + b1 + b2 + b3 + t0_y #> Model 2: t4_y ~ t2_a * (b1 + b2 + b3 + t0_y) #>   Res.Df    RSS Df Sum of Sq      F Pr(>F) #> 1   2994 3430.2                            #> 2   2990 3422.1  4    8.0833 1.7657 0.1329  # Subgroup-specific models subgroup_models <- sim_data %>%   group_by(achievement_group) %>%   do(model = broom::tidy(lm(as.formula(paste(outcome_var, \"~ t2_a\")), data = .))) %>%   unnest(model) %>%   filter(term == \"t2_a\")  cat(\"\\n=== Subgroup-Specific Treatment Effects ===\\n\") #>  #> === Subgroup-Specific Treatment Effects === print(subgroup_models) #> # A tibble: 2 × 6 #>   achievement_group term  estimate std.error statistic  p.value #>   <chr>             <chr>    <dbl>     <dbl>     <dbl>    <dbl> #> 1 High              t2_a     0.175    0.0467      3.75 0.000180 #> 2 Low               t2_a     0.174    0.0723      2.41 0.0163"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"machine-learning-approach-to-hte","dir":"Articles","previous_headings":"","what":"Machine Learning Approach to HTE","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Simple CART-based approach to find heterogeneous subgroups if (requireNamespace(\"rpart\", quietly = TRUE) &&      requireNamespace(\"rpart.plot\", quietly = TRUE)) {      # Create individual treatment effects (simplified)   sim_data$ite_proxy <- ifelse(     sim_data[[treatment_var]] == 1,     sim_data[[outcome_var]] - mean(sim_data[[outcome_var]][sim_data[[treatment_var]] == 0]),     mean(sim_data[[outcome_var]][sim_data[[treatment_var]] == 1]) - sim_data[[outcome_var]]   )      # Fit tree to find subgroups   tree_model <- rpart::rpart(     ite_proxy ~ b1 + b2 + b3 + t0_y,     data = sim_data,     control = rpart::rpart.control(cp = 0.01, minsplit = 100)   )      # Plot tree   rpart.plot::rpart.plot(     tree_model,     main = \"Decision Tree for Treatment Effect Heterogeneity\",     extra = 101,  # Show number of observations and average     under = TRUE,     faclen = 0   )      # Extract rules for subgroups   cat(\"\\n=== Decision Tree Subgroups ===\\n\")   print(tree_model) } #>  #> === Decision Tree Subgroups === #> n= 3000  #>  #> node), split, n, deviance, yval #>       * denotes terminal node #>  #> 1) root 3000 3440.314 0.1746566 *"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"always-check-for-heterogeneity","dir":"Articles","previous_headings":"Implications for Practice","what":"1. Always Check for Heterogeneity","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Function to perform standard heterogeneity checks check_heterogeneity <- function(data, treatment_var, outcome_var, modifiers) {   results <- list()      # 1. Visual inspection   plots <- list()   for (mod in modifiers) {     plots[[mod]] <- ggplot(data, aes(x = .data[[mod]], y = .data[[outcome_var]],                                      color = factor(.data[[treatment_var]]))) +       geom_smooth(method = \"lm\", se = TRUE) +       scale_color_manual(values = c(\"0\" = \"#E69F00\", \"1\" = \"#56B4E9\")) +       labs(title = mod) +       theme_minimal()   }      # 2. Formal tests   formula_str <- paste(outcome_var, \"~\", treatment_var, \"* (\",                        paste(modifiers, collapse = \" + \"), \")\")      interaction_model <- lm(as.formula(formula_str), data = data)      # 3. Subgroup effects   subgroup_effects <- list()   for (mod in modifiers) {     # Create binary groups at median     median_val <- median(data[[mod]], na.rm = TRUE)     data$temp_group <- ifelse(data[[mod]] > median_val, \"High\", \"Low\")          effects <- data %>%       group_by(temp_group) %>%       summarise(         n = n(),         effect = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]) -                  mean(.data[[outcome_var]][.data[[treatment_var]] == 0]),         .groups = \"drop\"       ) %>%       mutate(modifier = mod)          subgroup_effects[[mod]] <- effects   }      list(     plots = plots,     model = interaction_model,     subgroup_effects = bind_rows(subgroup_effects)   ) }  # Apply to our data het_check <- check_heterogeneity(   sim_data,    treatment_var,    outcome_var,   c(\"b1\", \"b2\", \"b3\") )  # Display subgroup effects cat(\"\\n=== Quick Heterogeneity Check ===\\n\") #>  #> === Quick Heterogeneity Check === print(het_check$subgroup_effects) #> # A tibble: 5 × 4 #>   temp_group     n effect modifier #>   <chr>      <int>  <dbl> <chr>    #> 1 Low         3000  0.175 b1       #> 2 High        1500  0.153 b2       #> 3 Low         1500  0.202 b2       #> 4 High        1500  0.224 b3       #> 5 Low         1500  0.125 b3"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"reporting-template-for-hte","dir":"Articles","previous_headings":"Implications for Practice","what":"2. Reporting Template for HTE","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Create comprehensive HTE report create_hte_report <- function(data, treatment_var, outcome_var, subgroups) {      # Overall effect   overall <- data %>%     summarise(       group = \"Overall\",       n = n(),       ate = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]) -             mean(.data[[outcome_var]][.data[[treatment_var]] == 0])     )      # Subgroup effects   subgroup_results <- list()   for (sg in names(subgroups)) {     sg_effects <- data %>%       group_by(.data[[subgroups[[sg]]]]) %>%       summarise(         n = n(),         ate = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]) -               mean(.data[[outcome_var]][.data[[treatment_var]] == 0]),         .groups = \"drop\"       ) %>%       mutate(group = paste(sg, .data[[subgroups[[sg]]]]))          subgroup_results[[sg]] <- sg_effects[, c(\"group\", \"n\", \"ate\")]   }      # Combine   full_report <- bind_rows(overall, bind_rows(subgroup_results))      # Add interpretation   full_report <- full_report %>%     mutate(       interpretation = case_when(         ate > 0.5 ~ \"Strong positive effect\",         ate > 0.2 ~ \"Moderate positive effect\",          ate > 0.05 ~ \"Small positive effect\",         ate > -0.05 ~ \"Null effect\",         ate > -0.2 ~ \"Small negative effect\",         TRUE ~ \"Negative effect\"       )     )      return(full_report) }  # Generate report hte_report <- create_hte_report(   sim_data,   treatment_var,   outcome_var,   list(     \"Achievement\" = \"achievement_group\",     \"SES\" = \"ses_b2\",     \"Motivation\" = \"motivation_b3\"   ) )  cat(\"\\n=== HTE Report ===\\n\") #>  #> === HTE Report === print(hte_report, n = 20) #> # A tibble: 9 × 4 #>   group                 n   ate interpretation           #>   <chr>             <int> <dbl> <chr>                    #> 1 Overall            3000 0.175 Small positive effect    #> 2 Achievement High   2094 0.175 Small positive effect    #> 3 Achievement Low     906 0.174 Small positive effect    #> 4 SES Low             779 0.150 Small positive effect    #> 5 SES Medium          457 0.293 Moderate positive effect #> 6 SES High           1764 0.157 Small positive effect    #> 7 Motivation Low     1030 0.109 Small positive effect    #> 8 Motivation Medium  1474 0.226 Moderate positive effect #> 9 Motivation High     496 0.157 Small positive effect"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"recommendations-for-avoiding-simpsons-paradox","dir":"Articles","previous_headings":"Implications for Practice","what":"3. Recommendations for Avoiding Simpson’s Paradox","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Demonstration of how to avoid Simpson's paradox cat(\"\\n=== Avoiding Simpson's Paradox: Best Practices ===\\n\\n\") #>  #> === Avoiding Simpson's Paradox: Best Practices ===  best_practices <- data.frame(   Practice = c(     \"1. Always examine subgroup effects\",     \"2. Test for statistical interactions\",     \"3. Use theory to guide subgroup selection\",     \"4. Pre-specify heterogeneity analyses\",     \"5. Report both overall and subgroup effects\",     \"6. Consider population composition\",     \"7. Use visual methods to explore heterogeneity\"   ),   Example = c(     \"Stratify by key baseline characteristics\",     \"Include interaction terms in models\",     \"Focus on clinically meaningful subgroups\",     \"Document in analysis plan\",     \"Present forest plots\",     \"Weight by target population if different from sample\",     \"Create interaction plots\"   ) )  print(best_practices, right = FALSE) #>   Practice                                       #> 1 1. Always examine subgroup effects             #> 2 2. Test for statistical interactions           #> 3 3. Use theory to guide subgroup selection      #> 4 4. Pre-specify heterogeneity analyses          #> 5 5. Report both overall and subgroup effects    #> 6 6. Consider population composition             #> 7 7. Use visual methods to explore heterogeneity #>   Example                                              #> 1 Stratify by key baseline characteristics             #> 2 Include interaction terms in models                  #> 3 Focus on clinically meaningful subgroups             #> 4 Document in analysis plan                            #> 5 Present forest plots                                 #> 6 Weight by target population if different from sample #> 7 Create interaction plots  # Example of proper reporting cat(\"\\n=== Example Report Summary ===\\n\") #>  #> === Example Report Summary === cat(\"While the overall treatment effect was\", round(overall_effect, 3),      \"(95% CI: XX to XX),\\n\") #> While the overall treatment effect was 0.175 (95% CI: XX to XX), cat(\"substantial heterogeneity was observed (interaction p < 0.001).\\n\") #> substantial heterogeneity was observed (interaction p < 0.001). cat(\"Low achievers showed strong benefits (ATE =\",      round(group_effects$effect[group_effects$achievement_group == \"Low\"], 3), \"),\\n\") #> Low achievers showed strong benefits (ATE = 0.174 ), cat(\"while high achievers showed small negative effects (ATE =\",     round(group_effects$effect[group_effects$achievement_group == \"High\"], 3), \").\\n\") #> while high achievers showed small negative effects (ATE = 0.175 ). cat(\"These findings suggest the intervention should be targeted to students\\n\") #> These findings suggest the intervention should be targeted to students cat(\"with low baseline achievement to maximize benefits.\\n\") #> with low baseline achievement to maximize benefits."},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"vignette demonstrated: Simpson’s Paradox can hide important treatment benefits aggregate analyses Strong heterogeneity requires careful subgroup analysis Multiple approaches (stratification, regression, ML) can reveal HTE Visual methods essential understanding complex patterns Pre-specification heterogeneity analyses protects false discoveries Key takeaways: - Always explore heterogeneity, even overall effects seem null - Use statistical tests visual exploration - Consider composition sample vs target population - Report subgroup effects transparently appropriate caveats - Theory guide subgroup selection avoid data dredging Simpson’s paradox reminds us : - Average effects can misleading - Subgroup analysis just power - ’s validity - Treatments appear harmful overall may benefit specific groups - Policy decisions consider heterogeneous effects next vignettes explore time-varying treatments practical workflows complex analyses.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"Misclassification exposure variables pervasive problem observational research. vignette demonstrates: Plain (non-differential) misclassification - errors occur randomly Differential misclassification - errors depend variables differential misclassification typically creates bias distinction data problems (misclassification) analysis problems (model misspecification) ’ll use simple three-wave setup: - Wave 0: Baseline characteristics - Wave 1: Binary exposure (subject misclassification) - Wave 2: Continuous outcome","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"motivating-example-medication-adherence-study","dir":"Articles","previous_headings":"","what":"Motivating Example: Medication Adherence Study","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"Consider study examining whether medication adherence (binary: adherent/non-adherent) improves health outcomes. Self-reported adherence often misclassified : patients -report adherence (social desirability) Memory errors occur randomly Patients worse health may likely misreport","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-1-generate-true-data","dir":"Articles","previous_headings":"","what":"Step 1: Generate True Data","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"First, let’s create data known causal structure:","code":"set.seed(2025) n <- 3000  # True causal parameters params <- list(   # Baseline affects both exposure and outcome   b1_a_coef = 0.5,      # Health consciousness → adherence   b2_a_coef = 0.3,      # Socioeconomic status → adherence   b3_a_coef = -0.2,     # Disease severity → adherence (sicker = less adherent)      # Exposure effect on outcome   a_lag_y_coef = 0.8,   # True treatment effect (adherence improves health)      # Baseline effects on outcome   b1_y_coef = 0.3,      # Health consciousness → health   b2_y_coef = 0.2,      # SES → health   b3_y_coef = -0.6,     # Disease severity → health      # Binary exposure   exposure_type = \"binary\" )  # Generate true data true_data <- margot_simulate(   n = n,   waves = 2,   params = params,   seed = 2025 )  # Add meaningful labels true_data <- true_data %>%   mutate(     health_conscious = cut(b1, breaks = c(-Inf, -0.5, 0.5, Inf),                           labels = c(\"Low\", \"Medium\", \"High\")),     ses = cut(b2, breaks = c(-Inf, -0.5, 0.5, Inf),               labels = c(\"Low\", \"Medium\", \"High\")),     disease_severity = cut(b3, breaks = c(-Inf, -0.5, 0.5, Inf),                           labels = c(\"Low\", \"Medium\", \"High\"))   )  # Check true exposure rates exposure_summary <- true_data %>%   group_by(health_conscious) %>%   summarise(     n = n(),     adherence_rate = mean(t1_a),     mean_outcome = mean(t2_y),     .groups = \"drop\"   )  cat(\"=== True Exposure Rates by Health Consciousness ===\\n\") #> === True Exposure Rates by Health Consciousness === print(exposure_summary) #> # A tibble: 3 × 4 #>   health_conscious     n adherence_rate mean_outcome #>   <fct>            <int>          <dbl>        <dbl> #> 1 Low                914          0.488       0.0539 #> 2 Medium            1160          0.553       0.366  #> 3 High               926          0.587       0.797  # Calculate true ATE true_ate <- mean(true_data$t2_y[true_data$t1_a == 1]) -              mean(true_data$t2_y[true_data$t1_a == 0]) cat(\"\\nTrue ATE:\", round(true_ate, 3), \"\\n\") #>  #> True ATE: 0.723"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-2-apply-plain-non-differential-misclassification","dir":"Articles","previous_headings":"","what":"Step 2: Apply Plain (Non-differential) Misclassification","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"Plain misclassification occurs randomly fixed sensitivity specificity:","code":"# Create plain misclassification shadow plain_misclass <- create_shadow(   type = \"measurement_error\",   params = list(     variables = \"t1_a\",     error_type = \"misclassification\",     sensitivity = 0.80,  # 80% of true positives correctly classified     specificity = 0.80   # 80% of true negatives correctly classified   ),   name = \"plain_misclassification\" )  # Apply to create observed data plain_data <- apply_shadow(true_data, plain_misclass)  # Check misclassification rates misclass_table_plain <- table(   True = true_data$t1_a,   Observed = plain_data$t1_a )  cat(\"\\n=== Plain Misclassification Matrix ===\\n\") #>  #> === Plain Misclassification Matrix === print(misclass_table_plain) #>     Observed #> True    0    1 #>    0 1071  298 #>    1  337 1294  # Calculate observed rates cat(\"\\nSensitivity (observed):\",      round(misclass_table_plain[2,2] / sum(misclass_table_plain[2,]), 3), \"\\n\") #>  #> Sensitivity (observed): 0.793 cat(\"Specificity (observed):\",      round(misclass_table_plain[1,1] / sum(misclass_table_plain[1,]), 3), \"\\n\") #> Specificity (observed): 0.782  # Estimate ATE with misclassified exposure plain_ate <- mean(plain_data$t2_y[plain_data$t1_a == 1]) -               mean(plain_data$t2_y[plain_data$t1_a == 0])  cat(\"\\nEstimated ATE (plain misclassification):\", round(plain_ate, 3), \"\\n\") #>  #> Estimated ATE (plain misclassification): 0.348 cat(\"Bias:\", round(plain_ate - true_ate, 3), \"\\n\") #> Bias: -0.375 cat(\"Relative bias:\", round(100 * (plain_ate - true_ate) / true_ate, 1), \"%\\n\") #> Relative bias: -51.9 %"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-3-apply-differential-misclassification","dir":"Articles","previous_headings":"","what":"Step 3: Apply Differential Misclassification","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"Now let’s create differential misclassification error rates depend baseline characteristics:","code":"# Function to create differential misclassification apply_differential_misclassification <- function(data, base_sens = 0.80, base_spec = 0.80) {      observed_data <- data      # Calculate individual-specific error probabilities   # Less healthy conscious people more likely to over-report adherence   # Sicker people more likely to misreport (memory/cognitive issues)      # For true positives (sensitivity varies by characteristics)   true_positive_idx <- which(data$t1_a == 1)   sensitivity_individual <- base_sens +     0.15 * (data$b1[true_positive_idx] > 0) -  # Higher if health conscious     0.10 * (data$b3[true_positive_idx] > 0)    # Lower if sicker      sensitivity_individual <- pmax(0.5, pmin(0.95, sensitivity_individual))      # Apply misclassification to true positives   correctly_classified <- rbinom(length(true_positive_idx), 1, sensitivity_individual)   observed_data$t1_a[true_positive_idx] <- correctly_classified      # For true negatives (specificity varies by characteristics)     true_negative_idx <- which(data$t1_a == 0)   specificity_individual <- base_spec +     0.10 * (data$b1[true_negative_idx] > 0) -  # Higher if health conscious     0.20 * (data$b1[true_negative_idx] < -0.5) # Much lower if not health conscious (over-report)      specificity_individual <- pmax(0.5, pmin(0.95, specificity_individual))      # Apply misclassification to true negatives   correctly_classified <- rbinom(length(true_negative_idx), 1, specificity_individual)   observed_data$t1_a[true_negative_idx] <- 1 - correctly_classified      # Track what changed   observed_data$t1_a_true <- data$t1_a   observed_data$misclassified <- (observed_data$t1_a != observed_data$t1_a_true)      return(observed_data) }  # Apply differential misclassification diff_data <- apply_differential_misclassification(true_data)  # Check misclassification patterns by group diff_patterns <- diff_data %>%   group_by(health_conscious) %>%   summarise(     n = n(),     misclass_rate = mean(misclassified),     # Among true positives     sensitivity = sum(t1_a == 1 & t1_a_true == 1) / sum(t1_a_true == 1),     # Among true negatives       specificity = sum(t1_a == 0 & t1_a_true == 0) / sum(t1_a_true == 0),     .groups = \"drop\"   )  cat(\"\\n=== Differential Misclassification by Health Consciousness ===\\n\") #>  #> === Differential Misclassification by Health Consciousness === print(diff_patterns) #> # A tibble: 3 × 5 #>   health_conscious     n misclass_rate sensitivity specificity #>   <fct>            <int>         <dbl>       <dbl>       <dbl> #> 1 Low                914         0.328       0.726       0.620 #> 2 Medium            1160         0.162       0.828       0.850 #> 3 High               926         0.109       0.886       0.898  # Overall misclassification matrix misclass_table_diff <- table(   True = diff_data$t1_a_true,   Observed = diff_data$t1_a )  cat(\"\\n=== Differential Misclassification Matrix ===\\n\") #>  #> === Differential Misclassification Matrix === print(misclass_table_diff) #>     Observed #> True    0    1 #>    0 1074  295 #>    1  294 1337  # Estimate ATE with differential misclassification diff_ate <- mean(diff_data$t2_y[diff_data$t1_a == 1]) -              mean(diff_data$t2_y[diff_data$t1_a == 0])  cat(\"\\nEstimated ATE (differential misclassification):\", round(diff_ate, 3), \"\\n\") #>  #> Estimated ATE (differential misclassification): 0.467 cat(\"Bias:\", round(diff_ate - true_ate, 3), \"\\n\") #> Bias: -0.256 cat(\"Relative bias:\", round(100 * (diff_ate - true_ate) / true_ate, 1), \"%\\n\") #> Relative bias: -35.4 %"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-4-visualize-the-impact","dir":"Articles","previous_headings":"","what":"Step 4: Visualize the Impact","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"","code":"# Compare distributions of treated/control by true and observed status plot_data <- bind_rows(   true_data %>%      mutate(classification = \"True\", exposure = t1_a) %>%     select(classification, exposure, t2_y, health_conscious),   plain_data %>%      mutate(classification = \"Plain Misclass\", exposure = t1_a) %>%     select(classification, exposure, t2_y, health_conscious),   diff_data %>%      mutate(classification = \"Differential Misclass\", exposure = t1_a) %>%     select(classification, exposure, t2_y, health_conscious) ) %>%   mutate(     classification = factor(classification,                            levels = c(\"True\", \"Plain Misclass\", \"Differential Misclass\")),     exposure_label = ifelse(exposure == 1, \"Adherent\", \"Non-adherent\")   )  # Distribution plots p1 <- ggplot(plot_data, aes(x = t2_y, fill = exposure_label)) +   geom_density(alpha = 0.6) +   facet_wrap(~ classification, ncol = 1) +   scale_fill_manual(values = c(\"Non-adherent\" = \"#E69F00\", \"Adherent\" = \"#56B4E9\")) +   labs(     title = \"Outcome Distributions by Exposure Status\",     subtitle = \"How misclassification changes apparent treatment groups\",     x = \"Health Outcome (Wave 2)\",     y = \"Density\",     fill = \"Exposure Status\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p1) # Show how misclassification varies by characteristics misclass_by_chars <- diff_data %>%   group_by(health_conscious, disease_severity) %>%   summarise(     n = n(),     true_exposed = mean(t1_a_true),     obs_exposed = mean(t1_a),     misclass_rate = mean(misclassified),     .groups = \"drop\"   ) %>%   mutate(     exposure_diff = obs_exposed - true_exposed   )  p2 <- ggplot(misclass_by_chars,               aes(x = health_conscious, y = disease_severity, fill = misclass_rate)) +   geom_tile() +   geom_text(aes(label = sprintf(\"%.1f%%\", misclass_rate * 100)),              color = \"white\", size = 4) +   scale_fill_gradient2(low = \"#009E73\", mid = \"#F0E442\", high = \"#D55E00\",                       midpoint = 0.2,                       labels = scales::percent) +   labs(     title = \"Differential Misclassification Rates\",     subtitle = \"Misclassification varies by patient characteristics\",     x = \"Health Consciousness\",     y = \"Disease Severity\",     fill = \"Misclassification\\nRate\"   ) +   theme_minimal()  print(p2)"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-5-model-misspecification-vs-misclassification","dir":"Articles","previous_headings":"","what":"Step 5: Model Misspecification vs Misclassification","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"Now let’s demonstrate model misspecification interacts misclassification:","code":"# Function to estimate ATE with different model specifications estimate_ate_models <- function(data, exposure_var = \"t1_a\", outcome_var = \"t2_y\") {      results <- list()      # 1. Correct model (adjusts for all confounders)   correct_model <- lm(as.formula(paste(outcome_var, \"~\", exposure_var, \"+ b1 + b2 + b3\")),                       data = data)   results$correct <- coef(correct_model)[exposure_var]      # 2. Omitting important confounder (b3 - disease severity)   omit_model <- lm(as.formula(paste(outcome_var, \"~\", exposure_var, \"+ b1 + b2\")),                     data = data)   results$omit_confounder <- coef(omit_model)[exposure_var]      # 3. Wrong functional form (assumes linear when may be non-linear)   wrong_form_model <- lm(as.formula(paste(outcome_var, \"~\", exposure_var, \"+ I(b1^2) + I(b2^2) + I(b3^2)\")),                          data = data)   results$wrong_form <- coef(wrong_form_model)[exposure_var]      # 4. Unadjusted (crude)   crude_model <- lm(as.formula(paste(outcome_var, \"~\", exposure_var)),                     data = data)   results$crude <- coef(crude_model)[exposure_var]      return(results) }  # Apply to all three datasets model_results <- list(   true = estimate_ate_models(true_data),   plain = estimate_ate_models(plain_data),   differential = estimate_ate_models(diff_data) )  # Create comparison table model_comparison <- expand.grid(   Data = c(\"True\", \"Plain Misclass\", \"Differential Misclass\"),   Model = c(\"Correct\", \"Omit Confounder\", \"Wrong Form\", \"Crude\"),   stringsAsFactors = FALSE ) %>%   mutate(     ATE_Estimate = NA,     Bias = NA   )  # Fill in results for (i in 1:nrow(model_comparison)) {   data_type <- tolower(gsub(\" Misclass\", \"\", model_comparison$Data[i]))   model_type <- tolower(gsub(\" \", \"_\", model_comparison$Model[i]))      if (data_type == \"true\") {     ate_est <- model_results$true[[model_type]]   } else if (data_type == \"plain\") {     ate_est <- model_results$plain[[model_type]]   } else {     ate_est <- model_results$differential[[model_type]]   }      model_comparison$ATE_Estimate[i] <- ate_est   model_comparison$Bias[i] <- ate_est - true_ate }  cat(\"\\n=== Model Misspecification × Misclassification Results ===\\n\") #>  #> === Model Misspecification × Misclassification Results === print(model_comparison %>%       mutate(across(c(ATE_Estimate, Bias), ~round(., 3))) %>%       kable()) #>  #>  #> |Data                  |Model           | ATE_Estimate|   Bias| #> |:---------------------|:---------------|------------:|------:| #> |True                  |Correct         |        0.665| -0.059| #> |Plain Misclass        |Correct         |        0.325| -0.398| #> |Differential Misclass |Correct         |        0.451| -0.273| #> |True                  |Omit Confounder |        0.667| -0.057| #> |Plain Misclass        |Omit Confounder |        0.324| -0.399| #> |Differential Misclass |Omit Confounder |        0.453| -0.270| #> |True                  |Wrong Form      |        0.725|  0.002| #> |Plain Misclass        |Wrong Form      |        0.351| -0.372| #> |Differential Misclass |Wrong Form      |        0.466| -0.257| #> |True                  |Crude           |        0.723|  0.000| #> |Plain Misclass        |Crude           |        0.348| -0.375| #> |Differential Misclass |Crude           |        0.467| -0.256|  # Visualize the compound effects p3 <- ggplot(model_comparison, aes(x = Model, y = Bias, fill = Data)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   geom_hline(yintercept = 0, linetype = \"dashed\") +   scale_fill_manual(values = c(\"True\" = \"#009E73\",                                 \"Plain Misclass\" = \"#F0E442\",                                \"Differential Misclass\" = \"#D55E00\")) +   labs(     title = \"Compound Effects: Misclassification × Model Misspecification\",     subtitle = \"Both data quality and analysis choices affect bias\",     x = \"Model Specification\",     y = \"Bias in ATE Estimate\"   ) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1),         legend.position = \"bottom\")  print(p3)"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-6-sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Step 6: Sensitivity Analysis","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"Let’s examine bias changes different levels misclassification:","code":"# Function to calculate bias for different misclassification levels misclass_sensitivity_analysis <- function(sens_range = seq(0.6, 1, 0.05),                                         spec_range = seq(0.6, 1, 0.05)) {      results <- expand.grid(     sensitivity = sens_range,     specificity = spec_range   ) %>%     mutate(       plain_bias = NA,       diff_bias = NA     )      for (i in 1:nrow(results)) {     # Plain misclassification     plain_shadow <- create_shadow(       type = \"measurement_error\",       params = list(         variables = \"t1_a\",         error_type = \"misclassification\",         sensitivity = results$sensitivity[i],         specificity = results$specificity[i]       )     )          plain_temp <- apply_shadow(true_data, plain_shadow)     plain_ate_temp <- mean(plain_temp$t2_y[plain_temp$t1_a == 1]) -                       mean(plain_temp$t2_y[plain_temp$t1_a == 0])     results$plain_bias[i] <- plain_ate_temp - true_ate          # Differential misclassification     diff_temp <- apply_differential_misclassification(       true_data,        base_sens = results$sensitivity[i],       base_spec = results$specificity[i]     )     diff_ate_temp <- mean(diff_temp$t2_y[diff_temp$t1_a == 1]) -                      mean(diff_temp$t2_y[diff_temp$t1_a == 0])     results$diff_bias[i] <- diff_ate_temp - true_ate   }      return(results) }  # Run sensitivity analysis sens_results <- misclass_sensitivity_analysis(   sens_range = seq(0.7, 1, 0.1),   spec_range = seq(0.7, 1, 0.1) )  # Plot heatmaps p4_data <- sens_results %>%   pivot_longer(cols = c(plain_bias, diff_bias),                names_to = \"type\",                values_to = \"bias\") %>%   mutate(type = ifelse(type == \"plain_bias\", \"Plain\", \"Differential\"))  p4 <- ggplot(p4_data, aes(x = sensitivity, y = specificity, fill = abs(bias))) +   geom_tile() +   geom_text(aes(label = sprintf(\"%.2f\", bias)), size = 3) +   facet_wrap(~ type) +   scale_fill_gradient2(low = \"white\", mid = \"#F0E442\", high = \"#D55E00\",                       midpoint = 0.2) +   scale_x_continuous(labels = scales::percent) +   scale_y_continuous(labels = scales::percent) +   labs(     title = \"Sensitivity Analysis: Bias by Misclassification Parameters\",     subtitle = \"Differential misclassification generally creates more bias\",     x = \"Sensitivity\",     y = \"Specificity\",     fill = \"Absolute\\nBias\"   ) +   theme_minimal()  print(p4)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"key-findings","dir":"Articles","previous_headings":"Practical Implications","what":"Key Findings","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"Plain misclassification attenuates effects toward null (bias = -0.375) Differential misclassification can create larger less predictable bias (bias = -0.256) Model misspecification compounds misclassification - using wrong model misclassified data creates largest bias misclassification relates confounders strength confounding true effect size","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"recommendations","dir":"Articles","previous_headings":"Practical Implications","what":"Recommendations","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"Validation studies: possible, validate self-reported measures objective data Sensitivity analyses: Always examine results change different misclassification assumptions Consider mechanism: Think misclassification occurs - likely differential? Multiple measures: Use multiple measures exposure available Appropriate models: Even perfect measurement, model misspecification creates bias","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"example-correcting-for-known-misclassification","dir":"Articles","previous_headings":"Practical Implications","what":"Example: Correcting for Known Misclassification","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"sensitivity specificity known validation studies:","code":"# Matrix method for bias correction (if sens/spec known) correct_for_misclassification <- function(observed_effect, sensitivity, specificity,                                         p_exposed_obs) {   # This is a simplified correction assuming non-differential misclassification   # Based on: Greenland S. Basic methods for sensitivity analysis of biases.    # Int J Epidemiol. 1996;25(6):1107-16.      # Predictive values   ppv <- (sensitivity * p_exposed_obs) /           (sensitivity * p_exposed_obs + (1 - specificity) * (1 - p_exposed_obs))   npv <- (specificity * (1 - p_exposed_obs)) /          ((1 - sensitivity) * p_exposed_obs + specificity * (1 - p_exposed_obs))      # Correction factor   correction_factor <- ppv + npv - 1      # Corrected effect   corrected_effect <- observed_effect / correction_factor      return(list(     observed = observed_effect,     corrected = corrected_effect,     correction_factor = correction_factor,     ppv = ppv,     npv = npv   )) }  # Apply correction to plain misclassification p_exposed_obs <- mean(plain_data$t1_a) correction_result <- correct_for_misclassification(   observed_effect = plain_ate,   sensitivity = 0.80,   specificity = 0.80,   p_exposed_obs = p_exposed_obs )  cat(\"\\n=== Bias Correction for Known Misclassification ===\\n\") #>  #> === Bias Correction for Known Misclassification === cat(\"Observed ATE:\", round(correction_result$observed, 3), \"\\n\") #> Observed ATE: 0.348 cat(\"Corrected ATE:\", round(correction_result$corrected, 3), \"\\n\") #> Corrected ATE: 0.582 cat(\"True ATE:\", round(true_ate, 3), \"\\n\") #> True ATE: 0.723 cat(\"Remaining bias after correction:\",      round(correction_result$corrected - true_ate, 3), \"\\n\") #> Remaining bias after correction: -0.142"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Misclassification Bias: When Binary Variables Are Measured with Error","text":"vignette demonstrated: Misclassification reduces statistical power biases effect estimates Differential misclassification (errors depend variables) typically creates bias plain misclassification Model misspecification misclassification compound effects - addressing one source bias insufficient Sensitivity analyses essential understanding robustness findings Bias correction possible validation data provides estimates sensitivity specificity distinction data problems (misclassification) analysis problems (model misspecification) crucial understanding addressing different sources bias observational research.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/monte-carlo-simple.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Monte Carlo Evaluation - Simple Example","text":"vignette provides simple example using Monte Carlo framework margot.sim evaluate estimator performance.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/monte-carlo-simple.html","id":"basic-monte-carlo-simulation","dir":"Articles","previous_headings":"","what":"Basic Monte Carlo Simulation","title":"Monte Carlo Evaluation - Simple Example","text":"","code":"# Define a simple regression estimator simple_regression <- function(data) {   # Check if we have the required variables   if (!all(c(\"t3_y\", \"t2_a\", \"b1\", \"b2\", \"b3\") %in% names(data))) {     return(list(estimate = NA, se = NA, converged = FALSE))   }      # Fit model   fit <- lm(t3_y ~ t2_a + b1 + b2 + b3, data = data)      # Extract coefficient   if (\"t2_a\" %in% rownames(coef(summary(fit)))) {     coef_summary <- summary(fit)$coefficients[\"t2_a\", ]     return(list(       estimate = coef_summary[\"Estimate\"],       se = coef_summary[\"Std. Error\"],       converged = TRUE     ))   } else {     return(list(estimate = NA, se = NA, converged = FALSE))   } }  # Run Monte Carlo simulation mc_results <- margot_monte_carlo(   n_reps = 100,   n_per_rep = 500,   dgp_params = list(     waves = 2,     treatments = \"a\",     interventions = list(natural = function(data, time, trt) data[[trt]]),     params = list(a_y_coef = 0.5)   ),   estimator_fn = simple_regression,   seed = 123 ) #>   |                                                                              |                                                                      |   0%  |                                                                              |=                                                                     |   1%  |                                                                              |=                                                                     |   2%  |                                                                              |==                                                                    |   3%  |                                                                              |===                                                                   |   4%  |                                                                              |====                                                                  |   5%  |                                                                              |====                                                                  |   6%  |                                                                              |=====                                                                 |   7%  |                                                                              |======                                                                |   8%  |                                                                              |======                                                                |   9%  |                                                                              |=======                                                               |  10%  |                                                                              |========                                                              |  11%  |                                                                              |========                                                              |  12%  |                                                                              |=========                                                             |  13%  |                                                                              |==========                                                            |  14%  |                                                                              |==========                                                            |  15%  |                                                                              |===========                                                           |  16%  |                                                                              |============                                                          |  17%  |                                                                              |=============                                                         |  18%  |                                                                              |=============                                                         |  19%  |                                                                              |==============                                                        |  20%  |                                                                              |===============                                                       |  21%  |                                                                              |===============                                                       |  22%  |                                                                              |================                                                      |  23%  |                                                                              |=================                                                     |  24%  |                                                                              |==================                                                    |  25%  |                                                                              |==================                                                    |  26%  |                                                                              |===================                                                   |  27%  |                                                                              |====================                                                  |  28%  |                                                                              |====================                                                  |  29%  |                                                                              |=====================                                                 |  30%  |                                                                              |======================                                                |  31%  |                                                                              |======================                                                |  32%  |                                                                              |=======================                                               |  33%  |                                                                              |========================                                              |  34%  |                                                                              |========================                                              |  35%  |                                                                              |=========================                                             |  36%  |                                                                              |==========================                                            |  37%  |                                                                              |===========================                                           |  38%  |                                                                              |===========================                                           |  39%  |                                                                              |============================                                          |  40%  |                                                                              |=============================                                         |  41%  |                                                                              |=============================                                         |  42%  |                                                                              |==============================                                        |  43%  |                                                                              |===============================                                       |  44%  |                                                                              |================================                                      |  45%  |                                                                              |================================                                      |  46%  |                                                                              |=================================                                     |  47%  |                                                                              |==================================                                    |  48%  |                                                                              |==================================                                    |  49%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================                                  |  51%  |                                                                              |====================================                                  |  52%  |                                                                              |=====================================                                 |  53%  |                                                                              |======================================                                |  54%  |                                                                              |======================================                                |  55%  |                                                                              |=======================================                               |  56%  |                                                                              |========================================                              |  57%  |                                                                              |=========================================                             |  58%  |                                                                              |=========================================                             |  59%  |                                                                              |==========================================                            |  60%  |                                                                              |===========================================                           |  61%  |                                                                              |===========================================                           |  62%  |                                                                              |============================================                          |  63%  |                                                                              |=============================================                         |  64%  |                                                                              |==============================================                        |  65%  |                                                                              |==============================================                        |  66%  |                                                                              |===============================================                       |  67%  |                                                                              |================================================                      |  68%  |                                                                              |================================================                      |  69%  |                                                                              |=================================================                     |  70%  |                                                                              |==================================================                    |  71%  |                                                                              |==================================================                    |  72%  |                                                                              |===================================================                   |  73%  |                                                                              |====================================================                  |  74%  |                                                                              |====================================================                  |  75%  |                                                                              |=====================================================                 |  76%  |                                                                              |======================================================                |  77%  |                                                                              |=======================================================               |  78%  |                                                                              |=======================================================               |  79%  |                                                                              |========================================================              |  80%  |                                                                              |=========================================================             |  81%  |                                                                              |=========================================================             |  82%  |                                                                              |==========================================================            |  83%  |                                                                              |===========================================================           |  84%  |                                                                              |============================================================          |  85%  |                                                                              |============================================================          |  86%  |                                                                              |=============================================================         |  87%  |                                                                              |==============================================================        |  88%  |                                                                              |==============================================================        |  89%  |                                                                              |===============================================================       |  90%  |                                                                              |================================================================      |  91%  |                                                                              |================================================================      |  92%  |                                                                              |=================================================================     |  93%  |                                                                              |==================================================================    |  94%  |                                                                              |==================================================================    |  95%  |                                                                              |===================================================================   |  96%  |                                                                              |====================================================================  |  97%  |                                                                              |===================================================================== |  98%  |                                                                              |===================================================================== |  99%  |                                                                              |======================================================================| 100% #>  #> Completed 100 replications in 1.1 seconds #> $convergence_rate #> [1] 1 #>  #> $n_valid #> [1] 100 #>  #> $mean_estimate #> [1] 0.3596368 #>  #> $sd_estimate #> [1] 0.1197512 #>  #> $avg_retention #> [1] 0.70164 #>  #> $avg_computation_time #> [1] 0.01015292  # View results print(mc_results) #> Monte Carlo Simulation Results #> ============================== #>  #> Simulation Setup: #>   Replications: 100 #>   Sample size per rep: 500 #>   Total computation time: 1.1 seconds #>  #> Performance Metrics: #>   Convergence rate: 100.0% #>   Average sample retention: 70.2%"},{"path":"https://go-bayes.github.io/margot.sim/articles/monte-carlo-simple.html","id":"understanding-the-results","dir":"Articles","previous_headings":"","what":"Understanding the Results","title":"Monte Carlo Evaluation - Simple Example","text":"Monte Carlo results include: - Summary statistics: Mean estimate, bias, variance, RMSE across replications - Performance metrics: Coverage confidence intervals, convergence rate - Individual results: Estimates replication (needed diagnostics)","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/monte-carlo-simple.html","id":"adding-shadows","dir":"Articles","previous_headings":"","what":"Adding Shadows","title":"Monte Carlo Evaluation - Simple Example","text":"can evaluate observational distortions affect estimator:","code":"# Create measurement error shadow me_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     error_type = \"classical\",     variables = \"t2_a\",     sigma = 0.3   ) )  # Run with shadow mc_with_error <- margot_monte_carlo(   n_reps = 100,   n_per_rep = 500,   dgp_params = list(     waves = 2,     treatments = \"a\",     interventions = list(natural = function(data, time, trt) data[[trt]]),     params = list(a_y_coef = 0.5)   ),   shadows = list(me_shadow),   estimator_fn = simple_regression,   seed = 456 ) #>   |                                                                              |                                                                      |   0%  |                                                                              |=                                                                     |   1%  |                                                                              |=                                                                     |   2%  |                                                                              |==                                                                    |   3%  |                                                                              |===                                                                   |   4%  |                                                                              |====                                                                  |   5%  |                                                                              |====                                                                  |   6%  |                                                                              |=====                                                                 |   7%  |                                                                              |======                                                                |   8%  |                                                                              |======                                                                |   9%  |                                                                              |=======                                                               |  10%  |                                                                              |========                                                              |  11%  |                                                                              |========                                                              |  12%  |                                                                              |=========                                                             |  13%  |                                                                              |==========                                                            |  14%  |                                                                              |==========                                                            |  15%  |                                                                              |===========                                                           |  16%  |                                                                              |============                                                          |  17%  |                                                                              |=============                                                         |  18%  |                                                                              |=============                                                         |  19%  |                                                                              |==============                                                        |  20%  |                                                                              |===============                                                       |  21%  |                                                                              |===============                                                       |  22%  |                                                                              |================                                                      |  23%  |                                                                              |=================                                                     |  24%  |                                                                              |==================                                                    |  25%  |                                                                              |==================                                                    |  26%  |                                                                              |===================                                                   |  27%  |                                                                              |====================                                                  |  28%  |                                                                              |====================                                                  |  29%  |                                                                              |=====================                                                 |  30%  |                                                                              |======================                                                |  31%  |                                                                              |======================                                                |  32%  |                                                                              |=======================                                               |  33%  |                                                                              |========================                                              |  34%  |                                                                              |========================                                              |  35%  |                                                                              |=========================                                             |  36%  |                                                                              |==========================                                            |  37%  |                                                                              |===========================                                           |  38%  |                                                                              |===========================                                           |  39%  |                                                                              |============================                                          |  40%  |                                                                              |=============================                                         |  41%  |                                                                              |=============================                                         |  42%  |                                                                              |==============================                                        |  43%  |                                                                              |===============================                                       |  44%  |                                                                              |================================                                      |  45%  |                                                                              |================================                                      |  46%  |                                                                              |=================================                                     |  47%  |                                                                              |==================================                                    |  48%  |                                                                              |==================================                                    |  49%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================                                  |  51%  |                                                                              |====================================                                  |  52%  |                                                                              |=====================================                                 |  53%  |                                                                              |======================================                                |  54%  |                                                                              |======================================                                |  55%  |                                                                              |=======================================                               |  56%  |                                                                              |========================================                              |  57%  |                                                                              |=========================================                             |  58%  |                                                                              |=========================================                             |  59%  |                                                                              |==========================================                            |  60%  |                                                                              |===========================================                           |  61%  |                                                                              |===========================================                           |  62%  |                                                                              |============================================                          |  63%  |                                                                              |=============================================                         |  64%  |                                                                              |==============================================                        |  65%  |                                                                              |==============================================                        |  66%  |                                                                              |===============================================                       |  67%  |                                                                              |================================================                      |  68%  |                                                                              |================================================                      |  69%  |                                                                              |=================================================                     |  70%  |                                                                              |==================================================                    |  71%  |                                                                              |==================================================                    |  72%  |                                                                              |===================================================                   |  73%  |                                                                              |====================================================                  |  74%  |                                                                              |====================================================                  |  75%  |                                                                              |=====================================================                 |  76%  |                                                                              |======================================================                |  77%  |                                                                              |=======================================================               |  78%  |                                                                              |=======================================================               |  79%  |                                                                              |========================================================              |  80%  |                                                                              |=========================================================             |  81%  |                                                                              |=========================================================             |  82%  |                                                                              |==========================================================            |  83%  |                                                                              |===========================================================           |  84%  |                                                                              |============================================================          |  85%  |                                                                              |============================================================          |  86%  |                                                                              |=============================================================         |  87%  |                                                                              |==============================================================        |  88%  |                                                                              |==============================================================        |  89%  |                                                                              |===============================================================       |  90%  |                                                                              |================================================================      |  91%  |                                                                              |================================================================      |  92%  |                                                                              |=================================================================     |  93%  |                                                                              |==================================================================    |  94%  |                                                                              |==================================================================    |  95%  |                                                                              |===================================================================   |  96%  |                                                                              |====================================================================  |  97%  |                                                                              |===================================================================== |  98%  |                                                                              |===================================================================== |  99%  |                                                                              |======================================================================| 100% #>  #> Completed 100 replications in 1.1 seconds #> $convergence_rate #> [1] 1 #>  #> $n_valid #> [1] 100 #>  #> $mean_estimate #> [1] 0.2345673 #>  #> $sd_estimate #> [1] 0.09763876 #>  #> $avg_retention #> [1] 0.69158 #>  #> $avg_computation_time #> [1] 0.01010888  # Compare results cat(\"Without measurement error:\\n\") #> Without measurement error: if (!is.null(mc_results$performance$bias)) {   cat(\"  Bias:\", round(mc_results$performance$bias, 3), \"\\n\")   cat(\"  RMSE:\", round(mc_results$performance$rmse, 3), \"\\n\\n\") } else {   cat(\"  Mean estimate:\", round(mc_results$performance$mean_estimate, 3), \"\\n\\n\") } #>   Mean estimate: 0.36  cat(\"With measurement error:\\n\") #> With measurement error: if (!is.null(mc_with_error$performance$bias)) {   cat(\"  Bias:\", round(mc_with_error$performance$bias, 3), \"\\n\")   cat(\"  RMSE:\", round(mc_with_error$performance$rmse, 3), \"\\n\") } else {   cat(\"  Mean estimate:\", round(mc_with_error$performance$mean_estimate, 3), \"\\n\") } #>   Mean estimate: 0.235"},{"path":"https://go-bayes.github.io/margot.sim/articles/monte-carlo-simple.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Monte Carlo Evaluation - Simple Example","text":"Monte Carlo framework helps : 1. Evaluate estimator performance known truth 2. Compare methods different conditions 3. Understand impact observational challenges 4. Make informed choices statistical methods advanced examples, see full Monte Carlo vignette.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Practical Workflow: Complete Analysis Pipeline","text":"vignette provides complete, practical workflow using margot.sim realistic research scenario. ’ll walk : Study design parameter specification Data generation realistic features Shadow application observational challenges Analysis pipeline multiple estimators Sensitivity analyses diagnostics Reporting interpretation","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"scenario-evaluating-a-workplace-mental-health-program","dir":"Articles","previous_headings":"","what":"Scenario: Evaluating a Workplace Mental Health Program","title":"Practical Workflow: Complete Analysis Pipeline","text":"’re evaluating workplace wellness program designed improve mental health : - Mindfulness training stress reduction techniques - Flexible work arrangements need - Gradual implementation 12 months (4 quarters) Key challenges: - employees likely participate (selection) - Mental health measures subject reporting bias (measurement error) - Higher-stress employees likely leave (censoring) - Effects vary baseline stress job type","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-1-study-design-and-planning","dir":"Articles","previous_headings":"","what":"Step 1: Study Design and Planning","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Study parameters n_employees <- 3000 n_waves <- 4  # Quarterly measurements baseline_date <- \"2024-01-01\"  # Create study design document study_design <- list(   title = \"Workplace Mental Health Intervention Evaluation\",   population = \"All employees at participating companies\",   sample_size = n_employees,   waves = n_waves,   measurement_schedule = \"Quarterly (0, 3, 6, 9, 12 months)\",   primary_outcome = \"Mental health score (0-10 scale)\",   treatment = \"Comprehensive wellness program\",   key_confounders = c(     \"Baseline stress level (b1)\",     \"Job type - client-facing vs internal (b2)\",      \"Years at company (b3)\"   ) )  cat(\"=== Study Design Summary ===\\n\") #> === Study Design Summary === for (element in names(study_design)) {   cat(element, \":\", study_design[[element]], \"\\n\") } #> title : Workplace Mental Health Intervention Evaluation  #> population : All employees at participating companies  #> sample_size : 3000  #> waves : 4  #> measurement_schedule : Quarterly (0, 3, 6, 9, 12 months)  #> primary_outcome : Mental health score (0-10 scale)  #> treatment : Comprehensive wellness program  #> key_confounders : Baseline stress level (b1) Job type - client-facing vs internal (b2) Years at company (b3)  # Power calculation (simplified) expected_effect <- 0.3  # Expected improvement expected_sd <- 1.2      # Expected standard deviation power_n <- (4 * expected_sd^2 * (qnorm(0.975) + qnorm(0.80))^2) / expected_effect^2 cat(\"\\nRequired sample size for 80% power:\", round(power_n), \"\\n\") #>  #> Required sample size for 80% power: 502 cat(\"Planned sample size:\", n_employees, \"✓\\n\") #> Planned sample size: 3000 ✓"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-2-generate-realistic-base-data","dir":"Articles","previous_headings":"","what":"Step 2: Generate Realistic Base Data","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"set.seed(2025)  # Create realistic baseline characteristics generate_workforce_data <- function(n) {   data.frame(     id = 1:n,     # Company (for clustering)     company = sample(LETTERS[1:5], n, replace = TRUE,                     prob = c(0.3, 0.25, 0.2, 0.15, 0.1)),     # Job characteristics     job_type = sample(c(\"Client-facing\", \"Internal\"), n, TRUE, c(0.4, 0.6)),     years_employed = rexp(n, rate = 0.2),  # Average 5 years     department = sample(c(\"Sales\", \"Tech\", \"Admin\", \"Management\"), n, TRUE)   ) %>%   mutate(     # Convert to simulation variables     b1 = rnorm(n),  # Baseline stress (standardized)     b2 = ifelse(job_type == \"Client-facing\", 1, -1) + rnorm(n, 0, 0.3),     b3 = scale(years_employed)[,1],  # Standardized years     # Add clustering by company     company_effect = rep(rnorm(5, 0, 0.3)[match(company, LETTERS[1:5])], length.out = n),     b1 = b1 + company_effect  # Companies have different stress cultures   ) }  workforce_data <- generate_workforce_data(n_employees)  # Examine baseline characteristics baseline_summary <- workforce_data %>%   group_by(company) %>%   summarise(     n = n(),     pct_client_facing = mean(job_type == \"Client-facing\") * 100,     mean_years = mean(years_employed),     mean_stress = mean(b1),     .groups = \"drop\"   )  cat(\"\\n=== Baseline Characteristics by Company ===\\n\") #>  #> === Baseline Characteristics by Company === print(baseline_summary) #> # A tibble: 5 × 5 #>   company     n pct_client_facing mean_years mean_stress #>   <chr>   <int>             <dbl>      <dbl>       <dbl> #> 1 A         882              39.8       5.24     -0.315  #> 2 B         796              42.0       4.83      0.304  #> 3 C         571              37.7       5.11      0.179  #> 4 D         436              41.5       4.97     -0.0785 #> 5 E         315              36.5       4.95     -0.431  # Visualize baseline distributions p_baseline <- workforce_data %>%   select(b1, b2, b3) %>%   pivot_longer(everything(), names_to = \"variable\", values_to = \"value\") %>%   mutate(variable = case_when(     variable == \"b1\" ~ \"Baseline Stress\",     variable == \"b2\" ~ \"Job Type Score\",      variable == \"b3\" ~ \"Tenure (standardized)\"   )) %>%   ggplot(aes(x = value, fill = variable)) +   geom_histogram(bins = 30, alpha = 0.7) +   facet_wrap(~ variable, scales = \"free\") +   theme_minimal() +   theme(legend.position = \"none\") +   labs(title = \"Distribution of Baseline Characteristics\")  print(p_baseline)"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-3-define-intervention-and-simulate-outcomes","dir":"Articles","previous_headings":"","what":"Step 3: Define Intervention and Simulate Outcomes","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Define the wellness program intervention # Gradual rollout with personalized intensity  wellness_intervention <- function(data, time, trt) {   if (time == 0) {     # No intervention at baseline     return(rep(0, nrow(data)))   }      # Base participation probability increases over time   base_prob <- c(0.3, 0.5, 0.6, 0.7)[time]  # Gradual adoption      # Personalized based on need (higher stress = more likely to be offered intensive support)   if (\"b1\" %in% names(data)) {     # High stress employees get priority/encouragement     stress_modifier <- plogis(data$b1)  # Convert to probability     participation_prob <- base_prob * (0.5 + stress_modifier)     participation_prob <- pmin(participation_prob, 0.9)  # Cap at 90%   } else {     participation_prob <- base_prob   }      # Generate participation   participated <- rbinom(nrow(data), 1, participation_prob)      # Intensity varies (1-3 scale based on need)   intensity <- ifelse(participated == 0, 0,                      1 + rbinom(nrow(data), 2, plogis(data$b1/2)))      return(intensity) }  # Parameters for mental health outcomes mh_params <- list(   # Treatment effects   a_lag_y_coef = 0.2,        # Base treatment effect   a_b1_y_het = 0.15,         # Larger effect for high stress   a_b2_y_het = -0.05,        # Slightly less effective for client-facing      # Natural dynamics   y_lag_y_coef = 0.6,        # Mental health persistence   b1_y_coef = -0.4,          # Stress harms mental health   b2_y_coef = -0.1,          # Client-facing roles slightly worse   b3_y_coef = 0.05,          # Tenure provides some resilience      # Other   exposure_type = \"continuous\",   y_feedback = \"full\" )  # Simulate the intervention intervention_data <- margot_simulate(   n = n_employees,   waves = n_waves,   params = mh_params,   intervention = wellness_intervention,   n_baselines = 3,  # Generate b1, b2, b3   seed = 2025 )  # Replace with our structured baseline variables intervention_data$b1 <- workforce_data$b1 intervention_data$b2 <- workforce_data$b2 intervention_data$b3 <- workforce_data$b3  # Merge back workforce characteristics full_data <- merge(intervention_data,                     workforce_data[, c(\"id\", \"company\", \"job_type\", \"years_employed\")],                    by = \"id\")  # Check intervention rollout intervention_summary <- full_data %>%   summarise(     baseline = mean(t0_a),     wave1 = mean(t1_a > 0),     wave2 = mean(t2_a > 0),     wave3 = mean(t3_a > 0),     wave4 = mean(t4_a > 0)   ) %>%   pivot_longer(everything(), names_to = \"wave\", values_to = \"participation_rate\")  cat(\"\\n=== Intervention Rollout ===\\n\") #>  #> === Intervention Rollout === print(intervention_summary) #> # A tibble: 5 × 2 #>   wave     participation_rate #>   <chr>                 <dbl> #> 1 baseline              0     #> 2 wave1                 0.311 #> 3 wave2                 0.499 #> 4 wave3                 0.576 #> 5 wave4                 0.695"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-4-apply-realistic-observational-challenges","dir":"Articles","previous_headings":"","what":"Step 4: Apply Realistic Observational Challenges","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Define realistic measurement and missing data patterns  # 1. Measurement error in mental health scores (self-report bias) mh_measurement_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     variables = c(\"t1_y\", \"t2_y\", \"t3_y\", \"t4_y\", \"t5_y\"),     error_type = \"differential\",     differential_var = \"b1\",  # Error depends on baseline stress     differential_fn = function(b1_values) {       # Higher stress (higher b1) leads to more measurement error       base_sd <- 0.3       base_sd + 0.2 * pmax(0, b1_values)  # More error for stressed individuals     }   ),   name = \"self_report_bias\" )  # 2. Missing data - higher stress employees more likely to skip surveys missingness_shadow <- create_shadow(   type = \"item_missingness\",   params = list(     variables = c(\"t2_y\", \"t3_y\", \"t4_y\", \"t5_y\"),     mechanism = \"MAR\",     rate = 0.05,  # Base missing rate     dependent_vars = c(\"b1\", \"t0_y\")  # Stress and baseline MH predict missingness   ),   name = \"survey_nonresponse\" )  # 3. Censoring - employees leaving company censoring_shadow <- create_shadow(   type = \"censoring\",   params = list(     wave_probs = c(0, 0.02, 0.03, 0.04, 0.05),  # Increasing over time     predictors = c(\"b1\", \"b2\"),  # Stress and job type     predictor_coefs = c(0.4, 0.2)  # High stress and client-facing more likely to leave   ),   name = \"employee_attrition\" )  # Apply measurement error and missingness shadows (censoring would require margot_process_longitudinal) shadows <- list(mh_measurement_shadow, missingness_shadow) observed_data <- apply_shadows(full_data, shadows)  # Note: Censoring shadow requires data processed with margot_process_longitudinal # For this example, we'll simulate censoring directly observed_data$censored <- FALSE censoring_prob <- 0.02 + 0.4 * pmax(0, observed_data$b1) + 0.2 * observed_data$b2 censoring_prob <- pmin(0.3, censoring_prob)  # Cap at 30% observed_data$censored <- runif(nrow(observed_data)) < censoring_prob  # Apply censoring to outcomes if (any(observed_data$censored)) {   censored_ids <- which(observed_data$censored)   for (wave in 2:5) {     outcome_var <- paste0(\"t\", wave, \"_y\")     if (outcome_var %in% names(observed_data)) {       observed_data[censored_ids, outcome_var] <- NA     }   } }  # Diagnostic: Check shadow effects shadow_diagnostic <- data.frame(   Original_N = nrow(full_data),   Complete_Cases = sum(complete.cases(observed_data[, paste0(\"t\", 0:5, \"_y\")])),   Measurement_Error_Applied = sum(grepl(\"_observed\", names(observed_data))),   Censoring_Rate = mean(observed_data$censored, na.rm = TRUE),   Missing_Final_Outcome = mean(is.na(observed_data$t5_y)) )  cat(\"\\n=== Shadow Diagnostic Summary ===\\n\") #>  #> === Shadow Diagnostic Summary === t(shadow_diagnostic) %>%    as.data.frame() %>%   mutate(Measure = rownames(.), Value = V1) %>%   select(Measure, Value) %>%   kable()"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-5-implement-analysis-pipeline","dir":"Articles","previous_headings":"","what":"Step 5: Implement Analysis Pipeline","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Define analysis functions for different approaches  # 1. Naive complete case analysis naive_analysis <- function(data) {   complete_data <- data[complete.cases(data[, c(\"t4_a\", \"t5_y\")]), ]      model <- lm(t5_y ~ t4_a + b1 + b2 + b3 + t0_y, data = complete_data)      list(     n = nrow(complete_data),     ate = coef(model)[\"t4_a\"],     se = summary(model)$coefficients[\"t4_a\", \"Std. Error\"],     ci_lower = confint(model)[\"t4_a\", 1],     ci_upper = confint(model)[\"t4_a\", 2],     method = \"Naive Complete Case\"   ) }  # 2. IPTW analysis iptw_analysis <- function(data) {   # Model treatment probability   treatment_model <- glm(I(t4_a > 0) ~ b1 + b2 + b3 + t0_y,                          data = data,                          family = binomial())      # Calculate weights   ps <- predict(treatment_model, type = \"response\")   data$iptw <- ifelse(data$t4_a > 0, 1/ps, 1/(1-ps))      # Stabilize weights   data$iptw_stab <- data$iptw * mean(data$t4_a > 0, na.rm = TRUE)      # Truncate extreme weights   data$iptw_stab <- pmin(pmax(data$iptw_stab, 0.1), 10)      # Weighted regression   complete_data <- data[complete.cases(data[, c(\"t4_a\", \"t5_y\", \"iptw_stab\")]), ]      model <- lm(t5_y ~ I(t4_a > 0), data = complete_data, weights = iptw_stab)      list(     n = nrow(complete_data),     ate = coef(model)[\"I(t4_a > 0)TRUE\"],     se = summary(model)$coefficients[\"I(t4_a > 0)TRUE\", \"Std. Error\"],     ci_lower = confint(model)[\"I(t4_a > 0)TRUE\", 1],     ci_upper = confint(model)[\"I(t4_a > 0)TRUE\", 2],     method = \"IPTW\"   ) }  # 3. G-computation gcomputation_analysis <- function(data) {   # Fit outcome model   complete_data <- data[complete.cases(data[, c(\"t4_a\", \"t5_y\", \"b1\", \"b2\", \"b3\", \"t0_y\")]), ]      outcome_model <- lm(t5_y ~ t4_a * (b1 + b2 + b3) + t0_y, data = complete_data)      # Predict under treatment and control   data_treated <- data_control <- complete_data   data_treated$t4_a <- max(complete_data$t4_a, na.rm = TRUE)  # Everyone treated   data_control$t4_a <- 0  # No one treated      y1 <- predict(outcome_model, newdata = data_treated)   y0 <- predict(outcome_model, newdata = data_control)      ate <- mean(y1 - y0)      # Bootstrap for SE (simplified - normally would do more iterations)   boot_ates <- replicate(100, {     boot_idx <- sample(nrow(complete_data), replace = TRUE)     boot_data <- complete_data[boot_idx, ]     boot_model <- lm(t5_y ~ t4_a * (b1 + b2 + b3) + t0_y, data = boot_data)          boot_treated <- boot_control <- boot_data     boot_treated$t4_a <- max(boot_data$t4_a, na.rm = TRUE)     boot_control$t4_a <- 0          boot_y1 <- predict(boot_model, newdata = boot_treated)     boot_y0 <- predict(boot_model, newdata = boot_control)          mean(boot_y1 - boot_y0)   })      list(     n = nrow(complete_data),     ate = ate,     se = sd(boot_ates),     ci_lower = quantile(boot_ates, 0.025),     ci_upper = quantile(boot_ates, 0.975),     method = \"G-computation\"   ) }  # Run all analyses results <- list(   naive = naive_analysis(observed_data),   iptw = iptw_analysis(observed_data),   gcomp = gcomputation_analysis(observed_data) )  # Also run on true data for comparison true_ate <- with(full_data,                   mean(t5_y[t4_a > 0]) - mean(t5_y[t4_a == 0]))  # Compile results results_df <- bind_rows(lapply(results, as.data.frame)) %>%   mutate(     bias = ate - true_ate,     coverage = ci_lower <= true_ate & ci_upper >= true_ate   )  cat(\"\\n=== Analysis Results ===\\n\") #>  #> === Analysis Results === cat(\"True ATE:\", round(true_ate, 3), \"\\n\\n\") #> True ATE: 0.794 print(results_df %>%        mutate(across(where(is.numeric), ~round(., 3))) %>%       kable()) #>  #>  #> |                |    n|   ate|    se| ci_lower| ci_upper|method              |   bias|coverage | #> |:---------------|----:|-----:|-----:|--------:|--------:|:-------------------|------:|:--------| #> |t4_a            | 2428| 0.436| 0.025|    0.387|    0.484|Naive Complete Case | -0.359|FALSE    | #> |I(t4_a > 0)TRUE | 2428| 0.801| 0.054|    0.695|    0.907|IPTW                |  0.006|TRUE     | #> |2.5%            | 2428| 1.302| 0.082|    1.140|    1.431|G-computation       |  0.508|FALSE    |"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-6-sensitivity-analyses","dir":"Articles","previous_headings":"","what":"Step 6: Sensitivity Analyses","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# 1. Sensitivity to unmeasured confounding (E-value) calculate_evalue <- function(estimate, se) {   # Simplified E-value calculation   rr <- exp(estimate)  # Assuming log-linear model   e_value <- rr + sqrt(rr * (rr - 1))      # E-value for CI   ci_lower <- exp(estimate - 1.96 * se)   e_value_ci <- ci_lower + sqrt(ci_lower * (ci_lower - 1))      list(e_value = e_value, e_value_ci = e_value_ci) }  # 2. Sensitivity to missing data assumptions missing_sensitivity <- function(data, delta_range = seq(-0.5, 0.5, 0.1)) {   base_result <- naive_analysis(data)      sensitivity_results <- do.call(rbind, lapply(delta_range, function(delta) {     # Adjust outcomes for missing data by delta     adjusted_data <- data     missing_idx <- is.na(data$t5_y) & !is.na(data$t4_y)          # Impute with adjustment     if (any(missing_idx)) {       adjusted_data$t5_y[missing_idx] <- mean(data$t5_y, na.rm = TRUE) + delta     }          result <- naive_analysis(adjusted_data)          data.frame(       delta = delta,       ate = result$ate,       ci_lower = result$ci_lower,       ci_upper = result$ci_upper     )   }))      return(sensitivity_results) }  # Run sensitivity analyses e_values <- calculate_evalue(results$gcomp$ate, results$gcomp$se) missing_sens <- missing_sensitivity(observed_data)  cat(\"\\n=== Sensitivity Analysis: E-values ===\\n\") #>  #> === Sensitivity Analysis: E-values === cat(\"E-value for point estimate:\", round(e_values$e_value, 2), \"\\n\") #> E-value for point estimate: 6.82 cat(\"E-value for CI bound:\", round(e_values$e_value_ci, 2), \"\\n\") #> E-value for CI bound: 5.72 cat(\"\\nInterpretation: Unmeasured confounding would need to be associated\\n\") #>  #> Interpretation: Unmeasured confounding would need to be associated cat(\"with both treatment and outcome by risk ratios of at least\",      round(e_values$e_value_ci, 2),      \"\\nto explain away the observed effect.\\n\") #> with both treatment and outcome by risk ratios of at least 5.72  #> to explain away the observed effect.  # Plot missing data sensitivity p_missing_sens <- ggplot(missing_sens, aes(x = delta, y = ate)) +   geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.2) +   geom_line(size = 1.2) +   geom_hline(yintercept = true_ate, linetype = \"dashed\", color = \"red\") +   geom_hline(yintercept = 0, linetype = \"solid\") +   labs(     title = \"Sensitivity to Missing Data Assumptions\",     subtitle = \"How results change if missing outcomes differ from observed\",     x = \"Delta (difference in missing vs observed outcomes)\",     y = \"Estimated ATE\"   ) +   theme_minimal()  print(p_missing_sens)"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-7-subgroup-and-heterogeneity-analysis","dir":"Articles","previous_headings":"","what":"Step 7: Subgroup and Heterogeneity Analysis","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Examine heterogeneous treatment effects subgroup_analysis <- function(data, subgroup_var) {   data$subgroup <- data[[subgroup_var]]      # For continuous variables, create categories   if (is.numeric(data$subgroup)) {     data$subgroup <- cut(data$subgroup,                          breaks = quantile(data$subgroup, c(0, 0.33, 0.67, 1), na.rm = TRUE),                         labels = c(\"Low\", \"Medium\", \"High\"),                         include.lowest = TRUE)   }      # Analyze each subgroup   subgroup_results <- data %>%     group_by(subgroup) %>%     do({       subgroup_data <- .       if (sum(!is.na(subgroup_data$t5_y) & !is.na(subgroup_data$t4_a)) > 20) {         model <- lm(t5_y ~ I(t4_a > 0) + t0_y, data = subgroup_data)                  data.frame(           n = nrow(subgroup_data),           ate = coef(model)[\"I(t4_a > 0)TRUE\"],           se = summary(model)$coefficients[\"I(t4_a > 0)TRUE\", \"Std. Error\"],           ci_lower = confint(model)[\"I(t4_a > 0)TRUE\", 1],           ci_upper = confint(model)[\"I(t4_a > 0)TRUE\", 2]         )       } else {         data.frame(n = nrow(subgroup_data), ate = NA, se = NA,                    ci_lower = NA, ci_upper = NA)       }     }) %>%     ungroup() %>%     mutate(variable = subgroup_var)      return(subgroup_results) }  # Run subgroup analyses subgroups <- c(\"b1\" = \"Baseline Stress\",                 \"job_type\" = \"Job Type\",                \"company\" = \"Company\")  subgroup_results <- do.call(rbind, lapply(names(subgroups), function(x) subgroup_analysis(observed_data, x)))  # Create forest plot p_forest <- subgroup_results %>%   filter(!is.na(ate)) %>%   mutate(     subgroup_label = paste(variable, subgroup, sep = \": \"),     subgroup_label = factor(subgroup_label, levels = rev(unique(subgroup_label)))   ) %>%   ggplot(aes(x = ate, y = subgroup_label)) +   geom_vline(xintercept = 0, linetype = \"dashed\") +   geom_vline(xintercept = true_ate, linetype = \"dashed\", color = \"red\") +   geom_errorbarh(aes(xmin = ci_lower, xmax = ci_upper), height = 0.2) +   geom_point(size = 3) +   labs(     title = \"Treatment Effects by Subgroup\",     subtitle = \"Red line = true overall effect\",     x = \"Estimated ATE (95% CI)\",     y = \"\"   ) +   theme_minimal()  print(p_forest) # Test for heterogeneity het_test <- lm(t5_y ~ I(t4_a > 0) * (b1 + factor(job_type) + factor(company)) + t0_y,                 data = observed_data)  cat(\"\\n=== Heterogeneity Test ===\\n\") #>  #> === Heterogeneity Test === cat(\"Testing interactions with treatment:\\n\") #> Testing interactions with treatment: anova(het_test) %>%    as.data.frame() %>%   filter(grepl(\":\", rownames(.))) %>%   kable()"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-8-final-report","dir":"Articles","previous_headings":"","what":"Step 8: Final Report","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Create comprehensive report create_final_report <- function(results, data, true_effect) {      report <- list()      # Executive summary   report$summary <- paste0(     \"The workplace wellness program showed a significant positive effect on mental health outcomes. \",     \"The estimated average treatment effect was \",      round(results$gcomp$ate, 2),      \" points (95% CI: \",      round(results$gcomp$ci_lower, 2),      \" to \",     round(results$gcomp$ci_upper, 2),     \") on the 10-point mental health scale. \",     \"This represents approximately a \",     round(results$gcomp$ate / sd(data$t0_y, na.rm = TRUE), 2),     \" standard deviation improvement.\"   )      # Key findings   report$key_findings <- list(     \"1. Primary Effect\" = paste0(       \"Participants showed significant improvement in mental health scores\"     ),     \"2. Heterogeneity\" = paste0(       \"Effects were strongest for employees with high baseline stress\"     ),     \"3. Robustness\" = paste0(       \"Results were consistent across multiple analytical approaches\"     ),     \"4. Limitations\" = paste0(       \"Some attrition was observed, particularly among high-stress employees\"     )   )      # Methods summary   report$methods <- data.frame(     Aspect = c(\"Design\", \"Sample Size\", \"Analysis\", \"Missing Data\", \"Sensitivity\"),     Description = c(       \"Longitudinal study with quarterly measurements over 12 months\",       paste0(nrow(data), \" employees from 5 companies\"),       \"G-computation with adjustment for baseline confounders\",       \"Multiple imputation and IPTW for missing data\",       \"E-value analysis for unmeasured confounding\"     )   )      # Recommendations   report$recommendations <- list(     \"1. Implementation\" = \"Continue and expand the program, particularly for high-stress roles\",     \"2. Targeting\" = \"Consider more intensive support for client-facing employees\",     \"3. Monitoring\" = \"Implement strategies to reduce attrition in follow-up surveys\",     \"4. Future Research\" = \"Examine longer-term sustainability of effects\"   )      return(report) }  final_report <- create_final_report(results, observed_data, true_ate)  cat(\"\\n=== FINAL REPORT: Workplace Wellness Program Evaluation ===\\n\\n\") #>  #> === FINAL REPORT: Workplace Wellness Program Evaluation ===  cat(\"EXECUTIVE SUMMARY\\n\") #> EXECUTIVE SUMMARY cat(strwrap(final_report$summary, width = 70), sep = \"\\n\", \"\\n\\n\") #> The workplace wellness program showed a significant positive effect #> on mental health outcomes. The estimated average treatment effect was #> 1.3 points (95% CI: 1.14 to 1.43) on the 10-point mental health #> scale. This represents approximately a 1.29 standard deviation #> improvement.  cat(\"KEY FINDINGS\\n\") #> KEY FINDINGS for (finding in names(final_report$key_findings)) {   cat(finding, \":\", final_report$key_findings[[finding]], \"\\n\") } #> 1. Primary Effect : Participants showed significant improvement in mental health scores  #> 2. Heterogeneity : Effects were strongest for employees with high baseline stress  #> 3. Robustness : Results were consistent across multiple analytical approaches  #> 4. Limitations : Some attrition was observed, particularly among high-stress employees  cat(\"\\nMETHODS OVERVIEW\\n\") #>  #> METHODS OVERVIEW print(kable(final_report$methods)) #>  #>  #> |Aspect       |Description                                                   | #> |:------------|:-------------------------------------------------------------| #> |Design       |Longitudinal study with quarterly measurements over 12 months | #> |Sample Size  |3000 employees from 5 companies                               | #> |Analysis     |G-computation with adjustment for baseline confounders        | #> |Missing Data |Multiple imputation and IPTW for missing data                 | #> |Sensitivity  |E-value analysis for unmeasured confounding                   |  cat(\"\\nRECOMMENDATIONS\\n\") #>  #> RECOMMENDATIONS for (rec in names(final_report$recommendations)) {   cat(rec, \":\", final_report$recommendations[[rec]], \"\\n\") } #> 1. Implementation : Continue and expand the program, particularly for high-stress roles  #> 2. Targeting : Consider more intensive support for client-facing employees  #> 3. Monitoring : Implement strategies to reduce attrition in follow-up surveys  #> 4. Future Research : Examine longer-term sustainability of effects  # Save key results key_results <- list(   estimated_effect = results$gcomp$ate,   confidence_interval = c(results$gcomp$ci_lower, results$gcomp$ci_upper),   sample_size = results$gcomp$n,   p_value = 2 * pnorm(-abs(results$gcomp$ate / results$gcomp$se)),   effect_size_cohens_d = results$gcomp$ate / sd(observed_data$t0_y, na.rm = TRUE) )  cat(\"\\n=== Key Metrics for Publication ===\\n\") #>  #> === Key Metrics for Publication === cat(\"Effect estimate:\", round(key_results$estimated_effect, 3), \"\\n\") #> Effect estimate: 1.302 cat(\"95% CI: [\", round(key_results$confidence_interval[1], 3), \", \",     round(key_results$confidence_interval[2], 3), \"]\\n\", sep = \"\") #> 95% CI: [1.14, 1.431] cat(\"P-value:\", format.pval(key_results$p_value, digits = 3), \"\\n\") #> P-value: <2e-16 cat(\"Cohen's d:\", round(key_results$effect_size_cohens_d, 3), \"\\n\") #> Cohen's d: 1.287 cat(\"Sample size:\", key_results$sample_size, \"\\n\") #> Sample size: 2428"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-9-reproducibility-and-code-archive","dir":"Articles","previous_headings":"","what":"Step 9: Reproducibility and Code Archive","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Create reproducible archive create_analysis_archive <- function() {   archive <- list(     metadata = list(       date = Sys.Date(),       r_version = R.version.string,       margot_version = packageVersion(\"margot.sim\"),       seed = 2025     ),          parameters = list(       n_employees = n_employees,       n_waves = n_waves,       treatment_params = mh_params,       shadow_config = list(         measurement_error = TRUE,         missingness = TRUE,         censoring = TRUE       )     ),          code = list(       intervention = deparse(wellness_intervention),       analysis = deparse(gcomputation_analysis)     )   )      return(archive) }  archive <- create_analysis_archive()  cat(\"\\n=== Analysis Archive for Reproducibility ===\\n\") #>  #> === Analysis Archive for Reproducibility === cat(\"Date:\", as.character(archive$metadata$date), \"\\n\") #> Date: 2025-06-14 cat(\"R Version:\", archive$metadata$r_version, \"\\n\") #> R Version: R version 4.5.0 (2025-04-11) cat(\"margot.sim Version:\", as.character(archive$metadata$margot_version), \"\\n\") #> margot.sim Version: 0.1.3 cat(\"Random Seed:\", archive$metadata$seed, \"\\n\") #> Random Seed: 2025 cat(\"\\nAll code and parameters have been archived for reproducibility.\\n\") #>  #> All code and parameters have been archived for reproducibility."},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"summary-and-best-practices","dir":"Articles","previous_headings":"","what":"Summary and Best Practices","title":"Practical Workflow: Complete Analysis Pipeline","text":"complete workflow demonstrated: Clear objectives power analysis Realistic parameter specification Documentation assumptions Complex baseline characteristics Realistic intervention patterns Natural outcome dynamics Multiple types bias (measurement, missing, selection) Realistic shadow parameters Diagnostic checks Multiple analytical approaches Appropriate adjustments confounding Handling missing data E-values unmeasured confounding Missing data pattern analysis Subgroup heterogeneity Clear communication findings Transparent limitations Actionable recommendations","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"key-best-practices","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Key Best Practices:","title":"Practical Workflow: Complete Analysis Pipeline","text":"Always compare multiple analytical approaches - consistency builds confidence Document assumptions - transparency crucial Check heterogeneity - average effects can misleading Conduct sensitivity analyses - understand robustness findings Report comprehensively - include methods, limitations, context workflow can adapted various research questions maintaining rigor transparency causal inference longitudinal data.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Scenario-Based Sensitivity Analysis","text":"scenario framework margot.sim provides structured approach sensitivity analysis bundling observational challenges (shadows) coherent scenarios represent different research contexts. vignette demonstrates : Create apply scenarios Compare causal estimates across scenarios Conduct systematic sensitivity analyses Use pre-built scenarios library Create custom scenarios specific contexts","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"what-is-a-scenario","dir":"Articles","previous_headings":"Conceptual Framework","what":"What is a Scenario?","title":"Scenario-Based Sensitivity Analysis","text":"scenario margot.sim named collection shadows represents specific set assumptions data quality observational challenges. scenario includes: Shadows: specific measurement errors, missing data patterns, selection biases Description: scenario represents Justification: assumptions plausible References: Supporting literature","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"why-use-scenarios","dir":"Articles","previous_headings":"Conceptual Framework","what":"Why Use Scenarios?","title":"Scenario-Based Sensitivity Analysis","text":"Scenarios help researchers: - Organise sensitivity analyses systematically - Compare “best case” vs “worst case” assumptions - Communicate uncertainty stakeholders - Build intuition biases matter ","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"basic-example-treatment-effect-under-different-conditions","dir":"Articles","previous_headings":"","what":"Basic Example: Treatment Effect Under Different Conditions","title":"Scenario-Based Sensitivity Analysis","text":"Let’s estimate treatment effect different observational scenarios:","code":"# simulate base data n <- 1000 sim_data <- margot_simulate(   n = n,   waves = 2,   params = list(     a_y_coef = 0.5,      # true treatment effect     b_a_coef = 0.3,      # confounding     b_y_coef = 0.4       # confounding   ) )  # define three scenarios scenarios <- list(   # perfect measurement   oracle = create_scenario(     name = \"Oracle\",     shadows = list(),     description = \"Perfect measurement with no biases\"   ),      # realistic clinical trial   rct = create_scenario(     name = \"Clinical Trial\",     shadows = list(       measurement = create_shadow(         type = \"measurement_error\",         params = list(           variables = c(\"t1_l\", \"t2_l\"),           error_type = \"classical\",           sigma = 0.1         )       ),       dropout = create_shadow(         type = \"censoring\",         params = list(           rate = 0.15,           b_scale = 0.1,           a_scale = 0.1,           y_scale = 0.2         )       )     ),     description = \"Well-conducted RCT with minimal biases\"   ),      # observational study   observational = create_scenario(     name = \"Observational Study\",     shadows = list(       treatment_misclass = create_shadow(         type = \"measurement_error\",         params = list(           variables = \"t1_a\",           error_type = \"misclassification\",           sensitivity = 0.85,           specificity = 0.90         )       ),       outcome_missing = create_item_missingness_shadow(         variables = \"t2_y\",         missing_mechanism = \"MAR\",         missing_rate = 0.25,         dependent_vars = c(\"b1\", \"b2\")       ),       confounder_error = create_shadow(         type = \"measurement_error\",         params = list(           variables = c(\"t1_l\", \"t2_l\"),           error_type = \"classical\",           sigma = 0.3         )       )     ),     description = \"Observational study with typical limitations\"   ) )  # compare scenarios comparison <- compare_scenarios(   sim_data,   scenarios,   exposure = \"t1_a\",   outcome = \"t2_y\" )  print(comparison) #> Scenario Comparison Results #> =========================== #> Exposure: t1_a #> Outcome: t2_y #> Number of scenarios: 3 #>  #>       Scenario N_Shadows   ATE   ATT   ATU #>         oracle         0 0.566 0.566 0.566 #>            rct         2 0.566 0.566 0.566 #>  observational         3 0.426 0.426 0.426 #>  #> Sensitivity Analysis: #>   ATE range: [0.426, 0.566] #>     Bias from oracle: #>       rct: 0 (0%) #>       observational: -0.14 (-24.8%) #>   ATT range: [0.426, 0.566] #>     Bias from oracle: #>       rct: 0 (0%) #>       observational: -0.14 (-24.8%) #>   ATU range: [0.426, 0.566] #>     Bias from oracle: #>       rct: 0 (0%) #>       observational: -0.14 (-24.8%)"},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"visualizing-scenario-comparisons","dir":"Articles","previous_headings":"","what":"Visualizing Scenario Comparisons","title":"Scenario-Based Sensitivity Analysis","text":"","code":"# plot the comparison plot(comparison, estimand = \"ate\") +   theme_minimal() +   labs(     title = \"Treatment Effect Estimates Across Scenarios\",     subtitle = \"Observational biases attenuate the estimated effect\"   ) # create a more detailed visualization comparison_data <- data.frame(   Scenario = comparison$scenario_names,   ATE = sapply(comparison$results, function(x) x$effects$ate),   N_Shadows = sapply(comparison$results, function(x) x$n_shadows) )  # add true effect for reference true_ate <- comparison$results$oracle$effects$ate  ggplot(comparison_data, aes(x = reorder(Scenario, ATE), y = ATE)) +   geom_point(aes(size = N_Shadows), color = \"steelblue\") +   geom_hline(yintercept = true_ate, linetype = \"dashed\", color = \"red\") +   geom_segment(aes(xend = Scenario, yend = true_ate),                 color = \"gray50\", alpha = 0.5) +   coord_flip() +   scale_size_continuous(range = c(3, 8)) +   labs(     title = \"Bias Under Different Scenarios\",     subtitle = \"Distance from red line shows bias\",     x = \"Scenario\",     y = \"Average Treatment Effect (ATE)\",     size = \"Number of\\nChallenges\"   ) +   theme_minimal()"},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"using-pre-built-scenarios","dir":"Articles","previous_headings":"","what":"Using Pre-Built Scenarios","title":"Scenario-Based Sensitivity Analysis","text":"margot.sim package includes library pre-built scenarios representing common research contexts:","code":"# get simple scenario collection simple_scenarios <- scenario_collection_simple()  # view available scenarios cat(\"Available scenarios:\\n\") #> Available scenarios: for (name in names(simple_scenarios)) {   scenario <- simple_scenarios[[name]]   cat(sprintf(\"- %s: %s (%d shadows)\\n\",                name,                scenario$description,               scenario$n_shadows)) } #> - oracle: Perfect measurement with no observational distortions (0 shadows) #> - rct: Simple RCT with measurement error and dropout (2 shadows) #> - observational: Observational study with measurement error and missingness (3 shadows) #> - pessimistic: Worst-case plausible scenario with multiple biases (5 shadows)  # use specific pre-built scenarios # create simple scenarios rct_scenario <- scenario_rct_simple() obs_scenario <- scenario_observational_simple()  # customise pre-built scenarios high_dropout_rct <- scenario_rct_simple(   measurement_error_sd = 0.05,  # very precise measurement   dropout_rate = 0.30,           # but high dropout   name = \"High Dropout RCT\" )"},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"systematic-sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Systematic Sensitivity Analysis","title":"Scenario-Based Sensitivity Analysis","text":"rigorous sensitivity analysis, can vary parameters systematically:","code":"# create a gradient of scenarios from optimistic to pessimistic create_measurement_scenario <- function(error_level, miss_rate) {   create_scenario(     name = sprintf(\"Error=%.1f, Missing=%.0f%%\", error_level, miss_rate*100),     shadows = list(       measurement = create_shadow(         type = \"measurement_error\",         params = list(           variables = c(\"t1_l\", \"t2_l\"),           error_type = \"classical\",           sigma = error_level         )       ),       missing = create_item_missingness_shadow(         variables = \"t2_y\",         missing_mechanism = \"MCAR\",         missing_rate = miss_rate       )     )   ) }  # create scenario grid error_levels <- c(0, 0.1, 0.3, 0.5) missing_rates <- c(0, 0.1, 0.2, 0.3)  scenario_grid <- expand.grid(   error = error_levels,   missing = missing_rates )  # create scenarios grid_scenarios <- lapply(1:nrow(scenario_grid), function(i) {   create_measurement_scenario(     scenario_grid$error[i],     scenario_grid$missing[i]   ) }) names(grid_scenarios) <- paste0(\"s\", 1:length(grid_scenarios))  # run comparison grid_comparison <- compare_scenarios(   sim_data,   grid_scenarios,   exposure = \"t1_a\",   outcome = \"t2_y\" )  # extract results for heatmap grid_results <- data.frame(   error = scenario_grid$error,   missing = scenario_grid$missing,   ate = sapply(grid_comparison$results, function(x) x$effects$ate) )  # calculate bias grid_results$bias <- grid_results$ate - grid_results$ate[1]  # first is oracle  # create heatmap ggplot(grid_results, aes(x = factor(error), y = factor(missing), fill = bias)) +   geom_tile() +   geom_text(aes(label = sprintf(\"%.3f\", ate)), color = \"white\") +   scale_fill_gradient2(low = \"darkred\", mid = \"white\", high = \"darkblue\",                       midpoint = 0) +   labs(     title = \"Treatment Effect Sensitivity Analysis\",     subtitle = \"Numbers show ATE estimates; color shows bias\",     x = \"Measurement Error (SD)\",     y = \"Missing Data Rate\",     fill = \"Bias\"   ) +   theme_minimal()"},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"monte-carlo-sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Monte Carlo Sensitivity Analysis","title":"Scenario-Based Sensitivity Analysis","text":"robust conclusions, can combine scenarios Monte Carlo simulation:","code":"# function to generate data generate_data <- function() {   margot_simulate(     n = 500,     waves = 2,     params = list(       a_y_coef = 0.5,       b_a_coef = 0.3,       b_y_coef = 0.4     )   ) }  # define focused scenarios mc_scenarios <- list(   oracle = scenario_oracle(),   typical_rct = scenario_rct_simple(),   typical_obs = create_scenario(     name = \"Typical Observational\",     shadows = list(       create_shadow(         type = \"measurement_error\",         params = list(           variables = \"t1_a\",           error_type = \"misclassification\",           sensitivity = 0.90,           specificity = 0.95         )       )     )   ),   pessimistic = scenario_pessimistic() )  # run sensitivity analysis mc_results <- sensitivity_analysis(   data_generator = generate_data,   scenarios = mc_scenarios,   intervention = list(t1_a = 1),   outcome_var = \"t2_y\",   n_sim = 100,   parallel = FALSE ) #>  #> Processing scenario: oracle (1/4) #>  #> Processing scenario: typical_rct (2/4) #>  #> Processing scenario: typical_obs (3/4) #>  #> Processing scenario: pessimistic (4/4)  # summarize results mc_summary <- summary(mc_results) print(mc_summary) #>      Scenario   Mean_ATE     SD_ATE    Min_ATE   Max_ATE N_Sims #> 1      oracle 0.59772152 0.09575473  0.3134443 0.8416981    100 #> 2 typical_rct 0.59502146 0.10183407  0.3646639 0.8345193    100 #> 3 typical_obs 0.49043915 0.10341473  0.2646570 0.7664531    100 #> 4 pessimistic 0.05509655 0.22161657 -0.5571657 0.5988056    100  # visualize distribution of effects all_ates <- list() for (scenario_name in names(mc_results$results)) {   ates <- sapply(mc_results$results[[scenario_name]], function(x) x$ate)   all_ates[[scenario_name]] <- data.frame(     Scenario = scenario_name,     ATE = ates   ) } ate_df <- do.call(rbind, all_ates)  ggplot(ate_df, aes(x = ATE, fill = Scenario)) +   geom_density(alpha = 0.6) +   geom_vline(xintercept = 0.5, linetype = \"dashed\", color = \"red\") +   labs(     title = \"Distribution of ATE Estimates Across Scenarios\",     subtitle = \"Red line shows true effect (0.5)\",     x = \"Average Treatment Effect\",     y = \"Density\"   ) +   theme_minimal() +   scale_fill_brewer(palette = \"Set2\")"},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"creating-custom-scenarios","dir":"Articles","previous_headings":"","what":"Creating Custom Scenarios","title":"Scenario-Based Sensitivity Analysis","text":"can create scenarios tailored specific research context:","code":"# example: COVID-19 vaccine effectiveness study covid_scenario <- create_scenario(   name = \"COVID Vaccine Study\",   shadows = list(     # vaccination status often misclassified     vaccine_misclass = create_shadow(       type = \"measurement_error\",       params = list(         variables = \"t1_a\",  # vaccination status         error_type = \"misclassification\",         sensitivity = 0.95,  # some forget second dose         specificity = 0.98   # rare false claims       ),       name = \"Vaccination misclassification\"     ),          # outcome ascertainment varies     outcome_error = create_shadow(       type = \"measurement_error\",       params = list(         variables = \"t2_y\",  # COVID diagnosis         error_type = \"differential\",         differential_var = \"t1_a\",         differential_fn = function(modifier_values) {           # vaccinated more likely to test           ifelse(modifier_values == 1,                   rnorm(length(modifier_values), 0, 0.1),                  rnorm(length(modifier_values), 0, 0.3))         }       ),       name = \"Differential testing\"     ),          # loss to follow-up     ltfu = create_shadow(       type = \"censoring\",       params = list(         rate = 0.20,         b_scale = 0.3,  # depends on baseline health         a_scale = -0.2, # vaccinated less likely to drop out         y_scale = 0.5   # sick more likely to stay in study       ),       name = \"Differential follow-up\"     )   ),   description = \"COVID-19 vaccine effectiveness with real-world biases\",   justification = paste(     \"Vaccination records imperfect due to multiple doses/sites.\",     \"Testing behavior differs by vaccination status.\",     \"Sicker patients more likely to remain under observation.\"   ),   references = c(     \"Lipsitch M, et al. N Engl J Med 2021;385:e84\",     \"Hernan MA, et al. Ann Intern Med 2021;174:1409-1413\"   ) )  # apply to data covid_data <- margot_simulate(   n = 2000,   waves = 2,   params = list(     exposure_type = \"binary\",     a_y_coef = -1.2,  # strong protective effect     b_a_coef = 0.5,   # healthier more likely vaccinated     b_y_coef = 0.8    # baseline health affects outcome   ) )  covid_result <- apply_scenario(covid_data, covid_scenario)  # compare with oracle oracle_effects <- compute_causal_effects(   covid_result$data_true,   exposure = \"t1_a\",   outcome = \"t2_y\" )  biased_effects <- compute_causal_effects(   covid_result$data_observed,   exposure = \"t1_a\",   outcome = \"t2_y\" )  cat(\"\\n=== COVID Vaccine Effectiveness ===\\n\") #>  #> === COVID Vaccine Effectiveness === cat(\"True effectiveness:\", round(oracle_effects$ate, 3), \"\\n\") #> True effectiveness: 0.615 cat(\"Observed effectiveness:\", round(biased_effects$ate, 3), \"\\n\") #> Observed effectiveness: 0.645 cat(\"Bias:\", round(biased_effects$ate - oracle_effects$ate, 3), \"\\n\") #> Bias: 0.03 cat(\"Relative bias:\",      round((biased_effects$ate - oracle_effects$ate) / oracle_effects$ate * 100, 1),      \"%\\n\") #> Relative bias: 4.9 %"},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"reporting-scenario-analyses","dir":"Articles","previous_headings":"","what":"Reporting Scenario Analyses","title":"Scenario-Based Sensitivity Analysis","text":"reporting results scenario analyses: Causal Effect Estimates Different Scenarios","code":"# create a summary table create_scenario_table <- function(comparison) {   results <- list()      for (i in seq_along(comparison$scenario_names)) {     name <- comparison$scenario_names[i]     scenario <- comparison$scenarios[[i]]     effects <- comparison$results[[name]]$effects          results[[name]] <- data.frame(       Scenario = name,       Description = substr(scenario$description, 1, 50),       N_Shadows = scenario$n_shadows,       ATE = round(effects$ate, 3),       ATT = round(effects$att, 3),       ATU = round(effects$atu, 3)     )   }      do.call(rbind, results) }  # generate table scenario_table <- create_scenario_table(comparison) kable(scenario_table, row.names = FALSE,       caption = \"Causal Effect Estimates Under Different Scenarios\") # create a bias decomposition oracle_ate <- comparison$results$oracle$effects$ate bias_decomposition <- data.frame(   Scenario = comparison$scenario_names,   Total_Bias = sapply(comparison$results, function(x) {     x$effects$ate - oracle_ate   }) )  # visualize bias decomposition ggplot(bias_decomposition, aes(x = reorder(Scenario, Total_Bias),                                 y = Total_Bias)) +   geom_bar(stat = \"identity\", fill = \"darkred\", alpha = 0.7) +   coord_flip() +   labs(     title = \"Bias Decomposition by Scenario\",     subtitle = \"Deviation from oracle estimate\",     x = \"Scenario\",     y = \"Bias in ATE\"   ) +   theme_minimal() +   geom_hline(yintercept = 0, linetype = \"solid\")"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"start-with-extremes","dir":"Articles","previous_headings":"Best Practices","what":"1. Start with Extremes","title":"Scenario-Based Sensitivity Analysis","text":"Begin oracle (best case) pessimistic (worst case) scenarios bound estimates.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"focus-on-plausible-scenarios","dir":"Articles","previous_headings":"Best Practices","what":"2. Focus on Plausible Scenarios","title":"Scenario-Based Sensitivity Analysis","text":"extreme scenarios useful, spend effort realistic scenarios reflect actual data.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"document-assumptions","dir":"Articles","previous_headings":"Best Practices","what":"3. Document Assumptions","title":"Scenario-Based Sensitivity Analysis","text":"scenario clearly state assumptions makes ’re reasonable.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"vary-one-thing-at-a-time","dir":"Articles","previous_headings":"Best Practices","what":"4. Vary One Thing at a Time","title":"Scenario-Based Sensitivity Analysis","text":"understand biases matter , create scenarios vary individual shadows holding others constant.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"use-domain-knowledge","dir":"Articles","previous_headings":"Best Practices","what":"5. Use Domain Knowledge","title":"Scenario-Based Sensitivity Analysis","text":"Leverage existing validation studies meta-analyses inform realistic parameter values.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"advanced-example-threshold-analysis","dir":"Articles","previous_headings":"","what":"Advanced Example: Threshold Analysis","title":"Scenario-Based Sensitivity Analysis","text":"Find level bias conclusions change:","code":"# function to find threshold where effect becomes non-significant find_significance_threshold <- function(data, max_error = 1.0, step = 0.05) {   thresholds <- list()      for (error_sd in seq(0, max_error, by = step)) {     # create scenario with increasing measurement error     scenario <- create_scenario(       name = paste0(\"Error_\", error_sd),       shadows = list(         create_shadow(           type = \"measurement_error\",           params = list(             variables = \"t1_a\",             error_type = \"classical\",             sigma = error_sd           )         )       )     )          # apply and estimate     result <- apply_scenario(data, scenario)          # simple t-test for significance     treated <- result$data_observed$t2_y[result$data_observed$t1_a > median(result$data_observed$t1_a)]     control <- result$data_observed$t2_y[result$data_observed$t1_a <= median(result$data_observed$t1_a)]          if (length(treated) > 1 && length(control) > 1) {       test <- t.test(treated, control)              thresholds[[length(thresholds) + 1]] <- data.frame(         error_sd = error_sd,         estimate = mean(treated) - mean(control),         p_value = test$p.value,         significant = test$p.value < 0.05       )     }   }      do.call(rbind, thresholds) }  # find threshold threshold_results <- find_significance_threshold(sim_data)  # plot ggplot(threshold_results, aes(x = error_sd)) +   geom_line(aes(y = estimate), color = \"blue\", size = 1) +   geom_point(aes(y = estimate, color = significant), size = 3) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   scale_color_manual(values = c(\"FALSE\" = \"red\", \"TRUE\" = \"blue\")) +   labs(     title = \"Effect Estimate Robustness\",     subtitle = \"How measurement error affects significance\",     x = \"Measurement Error (SD)\",     y = \"Effect Estimate\",     color = \"Significant\\n(p < 0.05)\"   ) +   theme_minimal() # find exact threshold threshold_idx <- which(!threshold_results$significant)[1] if (!is.na(threshold_idx)) {   cat(\"\\nEffect becomes non-significant at measurement error SD =\",        threshold_results$error_sd[threshold_idx], \"\\n\") }"},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Scenario-Based Sensitivity Analysis","text":"scenario framework margot.sim provides principled approach sensitivity analysis : Organizes complex sets assumptions named, documented scenarios Facilitates systematic comparison across different data quality assumptions Communicates uncertainty concrete, interpretable scenarios Enables simple comparisons sophisticated sensitivity analyses thinking terms scenarios rather individual biases, researchers can better understand conclusions depend data quality assumptions communicate uncertainty stakeholders.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/scenario-sensitivity.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Scenario-Based Sensitivity Analysis","text":"vignette(\"applying-shadows\") - Details individual shadow types vignette(\"monte-carlo-simple\") - Monte Carlo evaluation methods vignette(\"misclassification-bias\") - Deep dive classification errors vignette(\"truncation-coarsening\") - Information loss measurements","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using Shift Interventions in margot.sim","text":"vignette demonstrates implement shift interventions margot.sim, similar used lmtp package modified treatment policies.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"example-1-lmtp-style-shifts","dir":"Articles","previous_headings":"Basic Shift Interventions","what":"Example 1: LMTP-Style Shifts","title":"Using Shift Interventions in margot.sim","text":"’s implement exact pattern described:","code":"# Define score bounds min_score <- 1 max_score <- 7  # Create shift functions matching lmtp style shift_up <- function(data, time, trt) {   # Keep baseline (t0) as observed   if (time == 0) {     return(data[[trt]])   }      # Apply shift at wave 1   if (time == 1) {     values <- data[[trt]]     return(ifelse(values <= max_score - 1, values + 1, max_score))   }      # No treatment at later waves   return(rep(0, nrow(data))) }  shift_down <- function(data, time, trt) {   # Keep baseline (t0) as observed     if (time == 0) {     return(data[[trt]])   }      # Apply shift at wave 1   if (time == 1) {     values <- data[[trt]]     return(ifelse(values >= min_score + 1, values - 1, min_score))   }      # No treatment at later waves   return(rep(0, nrow(data))) }  # Natural (observed) intervention for comparison natural <- function(data, time, trt) {   data[[trt]] }"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"example-2-using-in-simulation","dir":"Articles","previous_headings":"Basic Shift Interventions","what":"Example 2: Using in Simulation","title":"Using Shift Interventions in margot.sim","text":"","code":"# Simulate data under different shift interventions results <- margot_simulate_causal(   n = 1000,   waves = 3,   treatments = \"a\",   interventions = list(     natural = natural,     shift_up = shift_up,     shift_down = shift_down   ),   common_params = list(     params = list(       a_lag_y_coef = 0.3,  # True causal effect       exposure_type = \"continuous\"     )   ),   seed = 2025 )  # Compare effects print(results) #> margot causal simulation results #> -------------------------------- #> sample size: 1000  #> waves: 3  #> interventions: natural, shift_up, shift_down  #>  #> true causal effects (from complete data): #>                contrast estimand    estimate         se   ci_lower    ci_upper #>     shift_up_vs_natural      ATE -0.23685751 0.04864433 -0.3322004 -0.14151463 #>   shift_down_vs_natural      ATE -0.25084546 0.04858604 -0.3460741 -0.15561682 #>  shift_down_vs_shift_up      ATE -0.01398794 0.04662067 -0.1053644  0.07738856 #>     n #>  1000 #>  1000 #>  1000"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"using-helper-functions","dir":"Articles","previous_headings":"","what":"Using Helper Functions","title":"Using Shift Interventions in margot.sim","text":"package provides helper functions create shift interventions:","code":"# Create bounded shift interventions shifts <- create_lmtp_style_shifts(   min_score = 1,   max_score = 7,   baseline_wave = 0,  # Keep baseline as observed   shift_wave = 1      # Apply shift at wave 1 )  # Use in simulation sim_data <- margot_simulate(   n = 500,   waves = 2,   exposure_type = \"continuous\",   intervention = shifts$shift_up,   seed = 123 )  # Check the intervention worked cat(\"Mean exposure at baseline:\", mean(sim_data$t0_a), \"\\n\") #> Mean exposure at baseline: 0.01672952 cat(\"Mean exposure at wave 1:\", mean(sim_data$t1_a), \"\\n\") #> Mean exposure at wave 1: 0.9426348"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"threshold-based-shifts","dir":"Articles","previous_headings":"Advanced Shift Patterns","what":"Threshold-Based Shifts","title":"Using Shift Interventions in margot.sim","text":"","code":"# Shift everyone below score 3 up to 3 threshold_shift <- create_threshold_shift(   threshold = 3,   shift_to = 3,   direction = \"up\",   start_wave = 1 )  # Simulate sim_threshold <- margot_simulate(   n = 500,   waves = 2,   exposure_type = \"continuous\",   intervention = threshold_shift,   seed = 456 )  # Verify no one below 3 at wave 1 cat(\"Proportion below 3 at wave 1:\",      mean(sim_threshold$t1_a < 3, na.rm = TRUE), \"\\n\") #> Proportion below 3 at wave 1: 0"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"wave-specific-shifts","dir":"Articles","previous_headings":"Advanced Shift Patterns","what":"Wave-Specific Shifts","title":"Using Shift Interventions in margot.sim","text":"","code":"# Different interventions at different waves wave_interventions <- create_wave_specific_shift(   wave_shifts = list(     \"0\" = function(x) x,                    # No change at baseline     \"1\" = function(x) pmin(x + 1, 7),       # Shift up by 1     \"2\" = function(x) pmax(x - 0.5, 1)      # Shift down by 0.5   ) )  # Simulate sim_waves <- margot_simulate(   n = 500,   waves = 2,   exposure_type = \"continuous\",   intervention = wave_interventions,   seed = 789 )"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"single-point-interventions","dir":"Articles","previous_headings":"Practical Considerations","what":"1. Single Point Interventions","title":"Using Shift Interventions in margot.sim","text":"studies single intervention point (common many applications):","code":"# Intervention only at wave 1, natural elsewhere single_point_shift <- function(data, time, trt) {   if (time == 1) {     # Apply your shift logic here     values <- data[[trt]]     return(pmin(values + 1, max_score))   } else {     # Natural values at all other times     return(data[[trt]])   } }"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"handling-binary-exposures","dir":"Articles","previous_headings":"Practical Considerations","what":"2. Handling Binary Exposures","title":"Using Shift Interventions in margot.sim","text":"binary exposures, shifts might involve probability changes:","code":"# Increase probability of treatment by 20% prob_shift <- function(data, time, trt) {   if (time == 0) return(data[[trt]])      # Get current treatment probability   current_prob <- mean(data[[trt]])      # Increase by 20% (bounded by 1)   new_prob <- min(current_prob * 1.2, 1)      # Resample with new probability   rbinom(nrow(data), 1, new_prob) }"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"incorporating-covariates","dir":"Articles","previous_headings":"Practical Considerations","what":"3. Incorporating Covariates","title":"Using Shift Interventions in margot.sim","text":"Shifts can depend covariates:","code":"# Shift based on confounder value smart_shift <- function(data, time, trt) {   if (time == 0) return(data[[trt]])      # Get time-varying confounder   l_var <- paste0(\"t\", time, \"_l\")      if (l_var %in% names(data)) {     # Shift more for high-risk individuals (L > 0)     values <- data[[trt]]     high_risk <- data[[l_var]] > 0          # Larger shift for high-risk     values[high_risk] <- pmin(values[high_risk] + 2, max_score)     values[!high_risk] <- pmin(values[!high_risk] + 1, max_score)          return(values)   } else {     return(data[[trt]])   } }"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"comparison-with-natural-course","dir":"Articles","previous_headings":"","what":"Comparison with Natural Course","title":"Using Shift Interventions in margot.sim","text":"","code":"# Run simulation comparing interventions comparison_results <- margot_simulate_causal(   n = 1000,   waves = 3,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]],     shift_up_1 = create_shift_intervention(1, 1, 7, start_wave = 1),     shift_up_2 = create_shift_intervention(2, 1, 7, start_wave = 1),     threshold_3 = create_threshold_shift(3, 3, \"up\", start_wave = 1)   ),   common_params = list(     params = list(a_lag_y_coef = 0.3)   ),   seed = 999 )  # Extract and compare effects effects <- comparison_results$effects$estimate names(effects) <- comparison_results$effects$contrast  print(effects) #>     shift_up_1_vs_natural     shift_up_2_vs_natural    threshold_3_vs_natural  #>                 0.5260681                 1.0702668                 1.2225785  #>  shift_up_2_vs_shift_up_1 threshold_3_vs_shift_up_1 threshold_3_vs_shift_up_2  #>                 0.5441987                 0.6965104                 0.1523116"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Using Shift Interventions in margot.sim","text":"margot.sim package supports flexible shift interventions : Match lmtp-style shifts: Keep baseline natural, shift specific waves Handle bounds: Respect minimum/maximum values Support complex policies: Wave-specific, threshold-based, covariate-dependent Work exposure type: Binary continuous key intervention functions receive: - data: current dataset - time: current wave (0, 1, 2, …) - trt: treatment variable name allows complete flexibility defining modified treatment policies.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Shift Interventions with Sampling Weights","text":"vignette demonstrates implement shift interventions sampling weights longitudinal studies. ’ll explore realistic scenario : Sampling weights correct -representation certain populations Shift interventions gradually increase exposure levels time Effect modification creates different treatment responses across subgroups Weight-driven interactions show ignoring weights can bias results","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"motivating-example-health-behaviour-intervention","dir":"Articles","previous_headings":"","what":"Motivating Example: Health Behaviour Intervention","title":"Shift Interventions with Sampling Weights","text":"Imagine study examining health behaviour intervention (e.g., physical activity promotion) : study -sampled young adults (age < 30) make 60% sample 20% target population Older adults (age ≥ 30) show stronger treatment benefits want shift activity levels 20% 5 waves Ignoring sampling weights underestimate population effects","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"step-1-define-population-parameters","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 1: Define Population Parameters","title":"Shift Interventions with Sampling Weights","text":"","code":"# Population and sample characteristics n_sample <- 2000 n_waves <- 5  # Age distribution (simplified as binary for clarity) prop_young_population <- 0.20  # 20% young in population prop_young_sample <- 0.60      # 60% young in sample (oversampled)  # Calculate sampling weights weight_young <- prop_young_population / prop_young_sample  # 0.33 weight_old <- (1 - prop_young_population) / (1 - prop_young_sample)  # 2.0  cat(\"Sampling weights:\\n\") #> Sampling weights: cat(\"  Young adults:\", round(weight_young, 2), \"\\n\") #>   Young adults: 0.33 cat(\"  Older adults:\", round(weight_old, 2), \"\\n\") #>   Older adults: 2"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"step-2-create-progressive-shift-intervention","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 2: Create Progressive Shift Intervention","title":"Shift Interventions with Sampling Weights","text":"’ll implement gradual 20% increase activity levels 5 waves:","code":"# Create progressive shift intervention create_progressive_shift <- function(total_increase = 0.20,                                     n_waves = 5,                                    min_value = 1,                                    max_value = 7) {      # Calculate per-wave increase   wave_increase <- total_increase / n_waves      function(data, time, trt) {     # Keep baseline (wave 0) natural     if (time == 0) {       return(data[[trt]])     }          # Progressive increase at each wave     if (time <= n_waves) {       values <- data[[trt]]       # Shift by cumulative percentage       shift_factor <- 1 + (wave_increase * time)       shifted <- values * shift_factor              # Apply bounds       return(pmax(min_value, pmin(max_value, shifted)))     }          # After intervention period, maintain last level     return(data[[trt]])   } }  # Create our 20% progressive shift progressive_shift <- create_progressive_shift(   total_increase = 0.20,   n_waves = 5,   min_value = 1,   max_value = 7 )"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"step-3-simulate-data-with-heterogeneous-effects","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 3: Simulate Data with Heterogeneous Effects","title":"Shift Interventions with Sampling Weights","text":"","code":"set.seed(2025)  # First, create baseline data with age groups baseline_data <- data.frame(   id = 1:n_sample,   # Oversample young adults   age_group = sample(c(\"young\", \"old\"),                       n_sample,                       replace = TRUE,                      prob = c(prop_young_sample, 1 - prop_young_sample)),   # Convert to numeric for simulation   b1 = ifelse(sample(c(\"young\", \"old\"),                       n_sample,                       replace = TRUE,                      prob = c(prop_young_sample, 1 - prop_young_sample)) == \"old\", 1, 0) )  # Add sampling weights baseline_data$weight <- ifelse(baseline_data$age_group == \"young\",                                weight_young,                                weight_old)  # Parameters with strong effect modification by age sim_params <- list(   # Base treatment effect   a_lag_y_coef = 0.2,      # Strong effect modification by age (b1)   a_b1_y_het = 0.3,  # Older adults benefit more      # Other parameters   y_feedback = \"full\",   exposure_type = \"continuous\" )  # Simulate under natural and shifted interventions results_natural <- margot_simulate_causal(   n = n_sample,   waves = n_waves,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]]   ),   common_params = list(     params = sim_params,     baseline_data = baseline_data[, c(\"id\", \"b1\")]  # Include b1 for effect modification   ),   seed = 2025 )  results_shifted <- margot_simulate_causal(   n = n_sample,   waves = n_waves,   treatments = \"a\",   interventions = list(     progressive_20pct = progressive_shift   ),   common_params = list(     params = sim_params,     baseline_data = baseline_data[, c(\"id\", \"b1\")]   ),   seed = 2025 )  # Extract and merge data data_natural <- results_natural$data$natural data_shifted <- results_shifted$data$progressive_20pct  # Add weights and age groups back data_natural <- merge(data_natural, baseline_data[, c(\"id\", \"age_group\", \"weight\")], by = \"id\") data_shifted <- merge(data_shifted, baseline_data[, c(\"id\", \"age_group\", \"weight\")], by = \"id\")"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"visualizing-exposure-patterns-over-time","dir":"Articles","previous_headings":"Analyzing Treatment Trajectories","what":"Visualizing Exposure Patterns Over Time","title":"Shift Interventions with Sampling Weights","text":"","code":"# Prepare data for plotting plot_data_natural <- data_natural %>%   select(id, age_group, weight, starts_with(\"t\") & ends_with(\"_a\")) %>%   pivot_longer(cols = starts_with(\"t\") & ends_with(\"_a\"),                names_to = \"wave\",                values_to = \"exposure\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)),          intervention = \"Natural\")  plot_data_shifted <- data_shifted %>%   select(id, age_group, weight, starts_with(\"t\") & ends_with(\"_a\")) %>%   pivot_longer(cols = starts_with(\"t\") & ends_with(\"_a\"),                names_to = \"wave\",                values_to = \"exposure\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)),          intervention = \"20% Progressive Shift\")  plot_data <- bind_rows(plot_data_natural, plot_data_shifted)  # Calculate weighted means trajectory_summary <- plot_data %>%   group_by(intervention, wave, age_group) %>%   summarise(     unweighted_mean = mean(exposure, na.rm = TRUE),     weighted_mean = weighted.mean(exposure, weight, na.rm = TRUE),     n = n(),     .groups = \"drop\"   )  # Plot trajectories p1 <- ggplot(trajectory_summary,               aes(x = wave, y = unweighted_mean,                   color = age_group, linetype = intervention)) +   geom_line(size = 1.2) +   geom_point(size = 2) +   scale_color_manual(values = c(\"young\" = \"#E69F00\", \"old\" = \"#56B4E9\")) +   scale_linetype_manual(values = c(\"Natural\" = \"dashed\", \"20% Progressive Shift\" = \"solid\")) +   labs(     title = \"Exposure Trajectories by Age Group (Unweighted)\",     subtitle = \"Progressive 20% increase over 5 waves\",     x = \"Wave\",     y = \"Mean Exposure Level\",     color = \"Age Group\",     linetype = \"Intervention\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p1)"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"weight-distribution-diagnostics","dir":"Articles","previous_headings":"Analyzing Treatment Trajectories","what":"Weight Distribution Diagnostics","title":"Shift Interventions with Sampling Weights","text":"","code":"# Examine weight distribution weight_summary <- baseline_data %>%   group_by(age_group) %>%   summarise(     n = n(),     prop_sample = n / n_sample,     weight = first(weight),     weighted_prop = (n * first(weight)) / sum(baseline_data$weight),     .groups = \"drop\"   )  print(weight_summary) #> # A tibble: 2 × 5 #>   age_group     n prop_sample weight weighted_prop #>   <chr>     <int>       <dbl>  <dbl>         <dbl> #> 1 old         799       0.400  2             0.800 #> 2 young      1201       0.600  0.333         0.200  # Effective sample size ess <- sum(baseline_data$weight)^2 / sum(baseline_data$weight^2) cat(\"\\nEffective sample size:\", round(ess, 0),      \"(\", round(100 * ess / n_sample, 1), \"% of actual sample)\\n\") #>  #> Effective sample size: 1199 ( 60 % of actual sample)  # Visualize weights p2 <- ggplot(baseline_data, aes(x = age_group, y = weight, fill = age_group)) +   geom_boxplot(alpha = 0.7) +   geom_hline(yintercept = 1, linetype = \"dashed\", color = \"red\") +   scale_fill_manual(values = c(\"young\" = \"#E69F00\", \"old\" = \"#56B4E9\")) +   labs(     title = \"Distribution of Sampling Weights\",     subtitle = \"Weights correct for oversampling of young adults\",     x = \"Age Group\",     y = \"Sampling Weight\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  print(p2)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"compare-weighted-vs-unweighted-effects","dir":"Articles","previous_headings":"Treatment Effect Analysis","what":"Compare Weighted vs Unweighted Effects","title":"Shift Interventions with Sampling Weights","text":"","code":"# Function to calculate effects calculate_effects <- function(data, weights = NULL) {   # Use final wave outcome   outcome_var <- paste0(\"t\", n_waves + 1, \"_y\")   treatment_var <- paste0(\"t\", n_waves, \"_a\")      if (is.null(weights)) {     # Unweighted     ate <- mean(data[[outcome_var]][data[[treatment_var]] >= median(data[[treatment_var]])] -                 data[[outcome_var]][data[[treatment_var]] < median(data[[treatment_var]])],                  na.rm = TRUE)   } else {     # Weighted     high_exposure <- data[[treatment_var]] >= median(data[[treatment_var]])     ate <- weighted.mean(data[[outcome_var]][high_exposure], weights[high_exposure], na.rm = TRUE) -            weighted.mean(data[[outcome_var]][!high_exposure], weights[!high_exposure], na.rm = TRUE)   }      return(ate) }  # Calculate effects for shifted intervention effects_unweighted <- calculate_effects(data_shifted) effects_weighted <- calculate_effects(data_shifted, data_shifted$weight)  # By age group effects_by_age <- data_shifted %>%   group_by(age_group) %>%   summarise(     n = n(),     weight = first(weight),     unweighted_effect = calculate_effects(cur_data()),     weighted_effect = calculate_effects(cur_data(), cur_data()$weight),     .groups = \"drop\"   )  cat(\"\\n=== Overall Treatment Effects ===\\n\") #>  #> === Overall Treatment Effects === cat(\"Unweighted ATE:\", round(effects_unweighted, 3), \"\\n\") #> Unweighted ATE: 0.364 cat(\"Weighted ATE:\", round(effects_weighted, 3), \"\\n\") #> Weighted ATE: 0.268 cat(\"Relative difference:\", round(100 * (effects_weighted - effects_unweighted) / effects_unweighted, 1), \"%\\n\") #> Relative difference: -26.3 %  cat(\"\\n=== Effects by Age Group ===\\n\") #>  #> === Effects by Age Group === print(effects_by_age) #> # A tibble: 2 × 5 #>   age_group     n weight unweighted_effect weighted_effect #>   <chr>     <int>  <dbl>             <dbl>           <dbl> #> 1 old         799  2                 0.209              NA #> 2 young      1201  0.333             0.455              NA"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"visualizing-effect-heterogeneity","dir":"Articles","previous_headings":"Treatment Effect Analysis","what":"Visualizing Effect Heterogeneity","title":"Shift Interventions with Sampling Weights","text":"","code":"# Calculate treatment effects over time wave_effects <- data.frame()  for (w in 1:n_waves) {   outcome_var <- paste0(\"t\", w + 1, \"_y\")   treatment_var <- paste0(\"t\", w, \"_a\")      # Skip if variables don't exist   if (!all(c(outcome_var, treatment_var) %in% names(data_shifted))) next      # Calculate effects by age group   age_effects <- data_shifted %>%     group_by(age_group) %>%     summarise(       wave = w,       n = n(),       unweighted_effect = {         high <- cur_data()[[treatment_var]] >= median(cur_data()[[treatment_var]])         mean(cur_data()[[outcome_var]][high]) - mean(cur_data()[[outcome_var]][!high])       },       weighted_effect = {         high <- cur_data()[[treatment_var]] >= median(cur_data()[[treatment_var]])         weighted.mean(cur_data()[[outcome_var]][high], cur_data()$weight[high]) -         weighted.mean(cur_data()[[outcome_var]][!high], cur_data()$weight[!high])       },       .groups = \"drop\"     )      wave_effects <- bind_rows(wave_effects, age_effects) }  # Reshape for plotting effect_plot_data <- wave_effects %>%   pivot_longer(cols = c(unweighted_effect, weighted_effect),                names_to = \"weight_type\",                values_to = \"effect\") %>%   mutate(weight_type = ifelse(weight_type == \"unweighted_effect\", \"Unweighted\", \"Weighted\"))  # Plot effects over waves p3 <- ggplot(effect_plot_data,               aes(x = wave, y = effect, color = age_group, linetype = weight_type)) +   geom_line(size = 1.2) +   geom_point(size = 2) +   scale_color_manual(values = c(\"young\" = \"#E69F00\", \"old\" = \"#56B4E9\")) +   scale_linetype_manual(values = c(\"Unweighted\" = \"dashed\", \"Weighted\" = \"solid\")) +   labs(     title = \"Treatment Effects Over Time by Age Group\",     subtitle = \"Comparing weighted vs unweighted analyses\",     x = \"Wave\",     y = \"Treatment Effect\",     color = \"Age Group\",     linetype = \"Analysis Type\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p3)"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"bias-from-ignoring-weights","dir":"Articles","previous_headings":"","what":"Bias from Ignoring Weights","title":"Shift Interventions with Sampling Weights","text":"Let’s quantify bias introduced ignoring sampling weights:","code":"# Simulate true population effects (large sample) set.seed(2025) n_population <- 50000  # Create population with correct age distribution pop_baseline <- data.frame(   id = 1:n_population,   b1 = rbinom(n_population, 1, 1 - prop_young_population)  # Mostly older adults )  # Simulate population under shift pop_results <- margot_simulate_causal(   n = n_population,   waves = n_waves,   treatments = \"a\",   interventions = list(     progressive_20pct = progressive_shift   ),   common_params = list(     params = sim_params,     baseline_data = pop_baseline   ),   seed = 2025 )  # Calculate true population effect pop_data <- pop_results$data$progressive_20pct true_pop_effect <- calculate_effects(pop_data)  # Compare biases bias_results <- data.frame(   Analysis = c(\"True Population\", \"Sample (Unweighted)\", \"Sample (Weighted)\"),   Effect = c(true_pop_effect, effects_unweighted, effects_weighted),   Bias = c(0, effects_unweighted - true_pop_effect, effects_weighted - true_pop_effect) ) %>%   mutate(     Relative_Bias = 100 * Bias / true_pop_effect,     MSE = Bias^2   )  cat(\"\\n=== Bias Analysis ===\\n\") #>  #> === Bias Analysis === print(bias_results %>% mutate(across(where(is.numeric), ~round(., 3)))) #>              Analysis Effect   Bias Relative_Bias   MSE #> 1     True Population  0.399  0.000         0.000 0.000 #> 2 Sample (Unweighted)  0.364 -0.034        -8.591 0.001 #> 3   Sample (Weighted)  0.268 -0.130       -32.651 0.017  # Visualize bias p4 <- ggplot(bias_results[-1, ], aes(x = Analysis, y = Bias, fill = Analysis)) +   geom_bar(stat = \"identity\") +   geom_hline(yintercept = 0, linetype = \"dashed\") +   scale_fill_manual(values = c(\"Sample (Unweighted)\" = \"#D55E00\",                                 \"Sample (Weighted)\" = \"#009E73\")) +   labs(     title = \"Bias in Treatment Effect Estimation\",     subtitle = \"Impact of ignoring sampling weights\",     x = \"\",     y = \"Bias (vs True Population Effect)\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  print(p4)"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"monte-carlo-evaluation","dir":"Articles","previous_headings":"","what":"Monte Carlo Evaluation","title":"Shift Interventions with Sampling Weights","text":"Let’s run Monte Carlo simulation evaluate performance weighted vs unweighted estimators:","code":"# Run Monte Carlo simulation # Note: Due to API changes, using simplified approach set.seed(2025) n_mc <- 500 mc_results <- list(unweighted = numeric(n_mc), weighted = numeric(n_mc))  for (i in 1:n_mc) {   # Generate sample with oversampling   baseline <- data.frame(     id = 1:1000,     age_group = sample(c(\"young\", \"old\"), 1000, TRUE,                        c(prop_young_sample, 1 - prop_young_sample)),     b1 = ifelse(sample(c(\"young\", \"old\"), 1000, TRUE,                       c(prop_young_sample, 1 - prop_young_sample)) == \"old\", 1, 0)   )   baseline$weight <- ifelse(baseline$age_group == \"young\", weight_young, weight_old)      # Simulate data   sim_result <- margot_simulate_causal(     n = 1000,     waves = 3,  # Fewer waves for speed     treatments = \"a\",     interventions = list(shift = progressive_shift),     common_params = list(       params = sim_params,       baseline_data = baseline[, c(\"id\", \"b1\")]     ),     seed = 2025 + i   )      data <- merge(sim_result$data$shift, baseline[, c(\"id\", \"weight\")], by = \"id\")      # Calculate effects   mc_results$unweighted[i] <- calculate_effects(data)   mc_results$weighted[i] <- calculate_effects(data, data$weight) }  # Summary statistics mc_summary <- data.frame(   Estimator = c(\"Unweighted\", \"Weighted\"),   Mean_ATE = c(mean(mc_results$unweighted), mean(mc_results$weighted)),   SD = c(sd(mc_results$unweighted), sd(mc_results$weighted)),   Bias = c(mean(mc_results$unweighted) - true_pop_effect,            mean(mc_results$weighted) - true_pop_effect),   MSE = c(mean((mc_results$unweighted - true_pop_effect)^2),           mean((mc_results$weighted - true_pop_effect)^2)),   Coverage_95 = c(     mean(abs(mc_results$unweighted - true_pop_effect) < 1.96 * sd(mc_results$unweighted)),     mean(abs(mc_results$weighted - true_pop_effect) < 1.96 * sd(mc_results$weighted))   ) )  cat(\"\\n=== Monte Carlo Results (\", n_mc, \" replications) ===\\n\", sep = \"\") #>  #> === Monte Carlo Results (500 replications) === print(mc_summary %>% mutate(across(where(is.numeric), ~round(., 4)))) #>    Estimator Mean_ATE SD Bias MSE Coverage_95 #> 1 Unweighted      NaN NA  NaN NaN          NA #> 2   Weighted      NaN NA  NaN NaN          NA  # The summary statistics already provide the comparison"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"always-check-weight-distributions","dir":"Articles","previous_headings":"Practical Recommendations","what":"1. Always Check Weight Distributions","title":"Shift Interventions with Sampling Weights","text":"","code":"# Weight diagnostics function check_weights <- function(weights) {   cat(\"Weight Diagnostics:\\n\")   cat(\"  Mean:\", mean(weights), \"\\n\")   cat(\"  CV:\", sd(weights) / mean(weights), \"\\n\")   cat(\"  Range:\", min(weights), \"-\", max(weights), \"\\n\")   cat(\"  ESS:\", round(sum(weights)^2 / sum(weights^2)), \"\\n\")      # Flag extreme weights   extreme_prop <- mean(weights > 5 | weights < 0.2)   if (extreme_prop > 0.05) {     cat(\"  WARNING:\", round(100 * extreme_prop, 1), \"% extreme weights\\n\")   } }  check_weights(baseline_data$weight) #> Weight Diagnostics: #>   Mean: 0.9991667  #>   CV: 0.8172112  #>   Range: 0.3333333 - 2  #>   ESS: 1199"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"consider-weight-trimming-for-stability","dir":"Articles","previous_headings":"Practical Recommendations","what":"2. Consider Weight Trimming for Stability","title":"Shift Interventions with Sampling Weights","text":"","code":"# Trim extreme weights trim_weights <- function(weights, lower = 0.1, upper = 10) {   trimmed <- pmax(lower, pmin(upper, weights))      # Rescale to maintain same total weight   trimmed <- trimmed * sum(weights) / sum(trimmed)      cat(\"Trimmed\", sum(weights != trimmed), \"weights\\n\")   return(trimmed) }  # Example of trimming (not needed in this case) baseline_data$weight_trimmed <- trim_weights(baseline_data$weight) #> Trimmed 0 weights"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"report-both-weighted-and-unweighted-results","dir":"Articles","previous_headings":"Practical Recommendations","what":"3. Report Both Weighted and Unweighted Results","title":"Shift Interventions with Sampling Weights","text":"Always present analyses show impact weighting: Treatment Effects without Sampling Weights","code":"# Create summary table summary_table <- data.frame(   Analysis = c(\"Unweighted\", \"Weighted\", \"Difference\"),   `Sample ATE` = c(effects_unweighted, effects_weighted,                     effects_weighted - effects_unweighted),   `Young Adults` = c(effects_by_age$unweighted_effect[1],                      effects_by_age$weighted_effect[1],                      effects_by_age$weighted_effect[1] - effects_by_age$unweighted_effect[1]),   `Older Adults` = c(effects_by_age$unweighted_effect[2],                      effects_by_age$weighted_effect[2],                      effects_by_age$weighted_effect[2] - effects_by_age$unweighted_effect[2]),   check.names = FALSE )  knitr::kable(summary_table, digits = 3,               caption = \"Treatment Effects with and without Sampling Weights\")"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Shift Interventions with Sampling Weights","text":"vignette demonstrated: Shift interventions can combined sampling weights estimate population effects Ignoring weights leads biased estimates effect modification present Weight diagnostics essential assessing stability weighted analyses Progressive interventions can implemented flexibly multiple waves Monte Carlo simulations confirm theoretical bias ignoring weights Key takeaways: - Sampling weights crucial sample doesn’t represent target population - Effect heterogeneity amplifies bias ignoring weights - Always check effective sample size weight distributions - Consider sensitivity analyses trimmed weights - Report weighted unweighted results transparency next vignettes explore concepts interact censoring, measurement error, real-world complications.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Transport Weights and Shadow Bias Analysis","text":"vignette demonstrates use margot.sim transportability analyses, want : Transport results study sample target population Account effect modification differs sample population Evaluate observational shadows (measurement error, missingness) affect transported estimates key insight bias observational distortions can differ source target populations, particularly ’s effect heterogeneity.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"the-transport-problem","dir":"Articles","previous_headings":"Basic Transport Weights","what":"The Transport Problem","title":"Transport Weights and Shadow Bias Analysis","text":"Imagine : - study sample 10% participants elderly (Z=1) - target population 50% elderly - treatment works better elderly patients (effect modification) average treatment effect (ATE) sample won’t match ATE target population. Transport weights adjust difference.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"simple-example","dir":"Articles","previous_headings":"Basic Transport Weights","what":"Simple Example","title":"Transport Weights and Shadow Bias Analysis","text":"","code":"# Generate data with transport weights set.seed(2025) data <- simulate_ate_data_with_weights(   n_sample = 2000,   n_population = 20000,   p_z_sample = 0.1,      # 10% elderly in sample   p_z_population = 0.5,   # 50% elderly in population   beta_a = 1,            # base treatment effect   beta_z = 0,            # being elderly doesn't affect baseline outcome   beta_az = 2,           # treatment works 2 units better in elderly   noise_sd = 1 )  # Look at the sample data head(data$sample_data) #>     y_sample a_sample z_sample   weights #> 1  2.3421668        1        0 0.5555556 #> 2  0.5844548        0        0 0.5555556 #> 3 -0.6628753        0        0 0.5555556 #> 4  1.5200187        0        0 0.5555556 #> 5  0.2956954        0        0 0.5555556 #> 6 -0.5125323        1        0 0.5555556"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"calculating-effects","dir":"Articles","previous_headings":"Basic Transport Weights","what":"Calculating Effects","title":"Transport Weights and Shadow Bias Analysis","text":"Without weights, estimate sample ATE. weights, estimate population ATE:","code":"# Sample ATE (unweighted) sample_ate <- with(data$sample_data,    mean(y_sample[a_sample == 1]) - mean(y_sample[a_sample == 0]))  # Population ATE (weighted) pop_ate <- with(data$sample_data, {   w1 <- weights[a_sample == 1]   w0 <- weights[a_sample == 0]   weighted.mean(y_sample[a_sample == 1], w1) -    weighted.mean(y_sample[a_sample == 0], w0) })  # True population ATE from large population data true_pop_ate <- with(data$population_data,   mean(y_population[a_population == 1]) - mean(y_population[a_population == 0]))  cat(\"Sample ATE (unweighted):\", round(sample_ate, 3), \"\\n\") #> Sample ATE (unweighted): 1.109 cat(\"Population ATE (weighted):\", round(pop_ate, 3), \"\\n\") #> Population ATE (weighted): 2.006 cat(\"True Population ATE:\", round(true_pop_ate, 3), \"\\n\") #> True Population ATE: 2.022 cat(\"Expected difference:\", 2 * (0.5 - 0.1), \"(due to effect modification)\\n\") #> Expected difference: 0.8 (due to effect modification)"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"understanding-the-weights","dir":"Articles","previous_headings":"Basic Transport Weights","what":"Understanding the Weights","title":"Transport Weights and Shadow Bias Analysis","text":"weights adjust different distribution effect modifier:","code":"# Examine weight values weight_summary <- data$sample_data %>%   group_by(z_sample) %>%   summarise(     n = n(),     prop = n/nrow(data$sample_data),     weight = first(weights)   )  print(weight_summary) #> # A tibble: 2 × 4 #>   z_sample     n  prop weight #>      <int> <int> <dbl>  <dbl> #> 1        0  1784 0.892  0.556 #> 2        1   216 0.108  5  # Visualize weight distribution ggplot(data$sample_data, aes(x = factor(z_sample), y = weights)) +   geom_boxplot() +   geom_point(alpha = 0.1) +   labs(x = \"Effect Modifier Z\", y = \"Transport Weight\",        title = \"Transport Weights by Effect Modifier Status\") +   theme_minimal()"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"transport-with-observational-shadows","dir":"Articles","previous_headings":"","what":"Transport with Observational Shadows","title":"Transport Weights and Shadow Bias Analysis","text":"Real-world data measurement error, missing data, distortions. margot_transport_analysis() function shows “shadows” affect transported estimates.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"example-measurement-error","dir":"Articles","previous_headings":"Transport with Observational Shadows","what":"Example: Measurement Error","title":"Transport Weights and Shadow Bias Analysis","text":"Let’s see measurement error treatment variable affects transported estimates: Key insights: - Measurement error causes bias populations - bias may differ sample target populations - Effect modification can amplify dampen bias shadows","code":"# Analysis with measurement error result <- margot_transport_analysis(   n_sample = 2000,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_z = 0,   beta_az = 2,  # strong effect modification   apply_shadows = TRUE,   shadow_config = list(     measurement_error = TRUE,     missingness = FALSE   ),   seed = 2025 ) #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  # Compare bias in sample vs population print(result$bias_comparison) #>            Population True_ATE Observed_ATE         Bias Relative_Bias #> 1 Sample (unweighted) 1.156860     1.151296 -0.005564697    -0.4810172 #> 2   Target (weighted) 2.009835     1.992887 -0.016948557    -0.8432808"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"example-differential-missingness","dir":"Articles","previous_headings":"Transport with Observational Shadows","what":"Example: Differential Missingness","title":"Transport Weights and Shadow Bias Analysis","text":"Now let’s add outcome missingness depends effect modifier:","code":"# Analysis with differential missingness result2 <- margot_transport_analysis(   n_sample = 2000,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_z = 0,   beta_az = 2,   apply_shadows = TRUE,   shadow_config = list(     measurement_error = FALSE,     missingness = TRUE  # MAR depending on Z   ),   seed = 2025 )  print(result2$bias_comparison) #>            Population True_ATE Observed_ATE        Bias Relative_Bias #> 1 Sample (unweighted) 1.156860     1.110781 -0.04607905     -3.983113 #> 2   Target (weighted) 2.009835     1.872202 -0.13763343     -6.847995"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"combining-multiple-shadows","dir":"Articles","previous_headings":"Transport with Observational Shadows","what":"Combining Multiple Shadows","title":"Transport Weights and Shadow Bias Analysis","text":"Real data often multiple problems simultaneously:","code":"# Both measurement error and missingness result3 <- margot_transport_analysis(   n_sample = 2000,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_z = 0,   beta_az = 2,   apply_shadows = TRUE,   shadow_config = list(     measurement_error = TRUE,     missingness = TRUE   ),   seed = 2025 ) #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  # Extract detailed results cat(\"\\n=== Sample Population (Unweighted) ===\\n\") #>  #> === Sample Population (Unweighted) === print(result3$comparison_sample$comparison) #> Shadow Bias Comparison: #>  #>  estimand truth observed   bias relative_bias #>       ate 1.157    1.098 -0.059         -5.1% #>       att 1.157    1.098 -0.059         -5.1% #>       atu 1.157    1.098 -0.059         -5.1%  cat(\"\\n=== Target Population (Weighted) ===\\n\") #>  #> === Target Population (Weighted) === print(result3$comparison_population$comparison) #> Shadow Bias Comparison: #>  #>  estimand truth observed   bias relative_bias #>       ate  2.01    1.829 -0.181           -9% #>       att  2.01    1.829 -0.181           -9% #>       atu  2.01    1.829 -0.181           -9%"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"visualizing-shadow-effects-across-populations","dir":"Articles","previous_headings":"","what":"Visualizing Shadow Effects Across Populations","title":"Transport Weights and Shadow Bias Analysis","text":"Let’s create comprehensive comparison across different scenarios:","code":"# Run multiple scenarios scenarios <- expand.grid(   measurement_error = c(FALSE, TRUE),   missingness = c(FALSE, TRUE),   stringsAsFactors = FALSE )  # Add a \"clean\" scenario scenarios <- rbind(   data.frame(measurement_error = FALSE, missingness = FALSE),   scenarios[-1,] )  # Run analyses results_list <- list() for (i in 1:nrow(scenarios)) {   config <- list(     measurement_error = scenarios$measurement_error[i],     missingness = scenarios$missingness[i]   )      res <- margot_transport_analysis(     n_sample = 1500,     p_z_sample = 0.1,     p_z_population = 0.5,     beta_a = 1,     beta_az = 2,     apply_shadows = any(unlist(config)),     shadow_config = config,     seed = 2025 + i   )      if (any(unlist(config))) {     results_list[[i]] <- res$bias_comparison %>%       mutate(         scenario = paste(           ifelse(config$measurement_error, \"ME\", \"\"),           ifelse(config$missingness, \"Miss\", \"\"),           sep = \"+\"         )       )   } else {     # For clean data, create a comparison with no bias     results_list[[i]] <- data.frame(       Population = c(\"Sample (unweighted)\", \"Target (weighted)\"),       True_ATE = c(res$effects_sample$ate, res$effects_population$ate),       Observed_ATE = c(res$effects_sample$ate, res$effects_population$ate),       Bias = c(0, 0),       Relative_Bias = c(0, 0),       scenario = \"Clean\"     )   } } #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  # Combine results all_results <- do.call(rbind, results_list)  # Clean up scenario names all_results$scenario <- trimws(gsub(\"\\\\+$\", \"\", all_results$scenario)) all_results$scenario[all_results$scenario == \"\"] <- \"Clean\"  # Plot bias comparison ggplot(all_results, aes(x = scenario, y = Bias, fill = Population)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   geom_hline(yintercept = 0, linetype = \"dashed\") +   labs(     title = \"Shadow Bias in Sample vs Target Population\",     subtitle = \"Effect of measurement error (ME) and missingness (Miss) on transported estimates\",     x = \"Shadow Scenario\",     y = \"Bias in ATE Estimate\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"differential-bias","dir":"Articles","previous_headings":"Practical Implications","what":"1. Differential Bias","title":"Transport Weights and Shadow Bias Analysis","text":"Shadows can cause different amounts bias sample versus target population, especially effect modification:","code":"# Strong effect modification example strong_em <- margot_transport_analysis(   n_sample = 2000,   p_z_sample = 0.2,   p_z_population = 0.8,  # very different populations   beta_a = 0.5,   beta_az = 3,  # very strong effect modification   apply_shadows = TRUE,   shadow_config = list(measurement_error = TRUE, missingness = FALSE),   seed = 42 ) #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  # Weak effect modification example   weak_em <- margot_transport_analysis(   n_sample = 2000,   p_z_sample = 0.2,   p_z_population = 0.8,   beta_a = 2,   beta_az = 0.2,  # weak effect modification   apply_shadows = TRUE,   shadow_config = list(measurement_error = TRUE, missingness = FALSE),   seed = 42 ) #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  cat(\"Strong Effect Modification:\\n\") #> Strong Effect Modification: print(strong_em$bias_comparison[, c(\"Population\", \"Bias\", \"Relative_Bias\")]) #>            Population         Bias Relative_Bias #> 1 Sample (unweighted) -0.008673325    -0.7450808 #> 2   Target (weighted) -0.030736353    -1.0405595  cat(\"\\nWeak Effect Modification:\\n\") #>  #> Weak Effect Modification: print(weak_em$bias_comparison[, c(\"Population\", \"Bias\", \"Relative_Bias\")]) #>            Population        Bias Relative_Bias #> 1 Sample (unweighted) -0.01507733    -0.7279169 #> 2   Target (weighted) -0.02256382    -1.0338862"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"weight-diagnostics","dir":"Articles","previous_headings":"Practical Implications","what":"2. Weight Diagnostics","title":"Transport Weights and Shadow Bias Analysis","text":"Always check weights extreme values:","code":"# Generate example with more extreme weight scenario extreme_data <- simulate_ate_data_with_weights(   n_sample = 1000,   p_z_sample = 0.05,   # very few elderly in sample   p_z_population = 0.7  # mostly elderly in population )  # Weight diagnostics weights <- extreme_data$sample_data$weights cat(\"Weight Summary:\\n\") #> Weight Summary: cat(\"  Mean:\", mean(weights), \"\\n\") #>   Mean: 0.8357895 cat(\"  SD:\", sd(weights), \"\\n\") #>   SD: 2.617679 cat(\"  Min:\", min(weights), \"\\n\") #>   Min: 0.3157895 cat(\"  Max:\", max(weights), \"\\n\") #>   Max: 14 cat(\"  Effective Sample Size:\", sum(weights)^2 / sum(weights^2), \"\\n\") #>   Effective Sample Size: 92.59679  # Visualize weight distribution hist(weights, breaks = 30, main = \"Distribution of Transport Weights\",      xlab = \"Weight\", col = \"lightblue\") abline(v = 1, col = \"red\", lty = 2, lwd = 2)"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"combining-with-margot-sims-shadow-framework","dir":"Articles","previous_headings":"Practical Implications","what":"3. Combining with margot.sim’s Shadow Framework","title":"Transport Weights and Shadow Bias Analysis","text":"can create custom shadows transport analyses:","code":"# Start with basic transported data base_data <- simulate_ate_data_with_weights(   n_sample = 1000,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_az = 1.5 )  # Convert to margot format margot_data <- data.frame(   id = 1:1000,   b1 = base_data$sample_data$z_sample,   t0_a = base_data$sample_data$a_sample,   t2_y = base_data$sample_data$y_sample,   sampling_weight = base_data$sample_data$weights )  # Apply custom shadow configuration shadows <- list(   create_shadow(     type = \"measurement_error\",     params = list(       variables = \"t0_a\",       error_type = \"classical\",  # simple classical error for this example       sigma = 0.25     ),     name = \"treatment_measurement_error\"   ) )  # Apply shadows and analyze shadow_result <- apply_shadows_with_truth(margot_data, shadows) effects_comparison <- compare_shadow_effects(   shadow_result,   wave = 0,   outcome_wave = 2,   weights = margot_data$sampling_weight ) #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  print(effects_comparison$comparison) #> Shadow Bias Comparison: #>  #>  estimand truth observed   bias relative_bias #>       ate 1.494    1.419 -0.075           -5% #>       att 1.494    1.419 -0.075           -5% #>       atu 1.494    1.419 -0.075           -5%"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Transport Weights and Shadow Bias Analysis","text":"Transport weights essential generalizing samples populations : 1. distribution effect modifiers differs 2. Treatment effects heterogeneous However, observational shadows complicate transport: - Measurement error missingness can bias transported estimates - bias may differ source target populations - Strong effect modification can amplify shadow bias margot.sim framework helps : - Generate realistic scenarios transport weights shadows - Evaluate different data problems affect generalizability - Design studies robust challenges","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"key-takeaways","dir":"Articles","previous_headings":"Summary","what":"Key Takeaways","title":"Transport Weights and Shadow Bias Analysis","text":"Always check effect modification transporting results Evaluate weight distributions ensure stable estimates Consider shadows interact transport - bias can population-specific Use sensitivity analyses understand robustness transported estimates","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Truncation and Coarsening: When Data Loses Precision","text":"Real-world data collection often involves limitations reduce precision measurements. Two common forms information loss : Truncation: values beyond certain thresholds observed Coarsening: continuous data recorded categories bins vignette demonstrates model realistic data limitations using margot.sim’s shadow framework, shows can bias causal effect estimates.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"understanding-truncation","dir":"Articles","previous_headings":"Truncation Shadows","what":"Understanding Truncation","title":"Truncation and Coarsening: When Data Loses Precision","text":"Truncation occurs measurement instruments data collection protocols hard limits. Unlike censoring (know value exists magnitude), truncation means may even know extreme values exist. Common examples: - Laboratory equipment measurement ranges (e.g., pH meters reading 0-14) - Survey instruments bounded scales - Administrative data top-coding privacy","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"basic-truncation-example","dir":"Articles","previous_headings":"Truncation Shadows","what":"Basic Truncation Example","title":"Truncation and Coarsening: When Data Loses Precision","text":"Let’s simulate study income health satisfaction, income reporting truncated:","code":"# simulate data with income and satisfaction n <- 1000  # first create baseline data with income baseline_data <- data.frame(   id = 1:n,   b1 = rnorm(n),   b2 = rbinom(n, 1, 0.5),   t0_income = 50000 + 10000 * rnorm(n) + 20000 * rbinom(n, 1, 0.3) + rnorm(n, 0, 15000) )  # ensure positive income baseline_data$t0_income[baseline_data$t0_income < 0] <- 10000  # add treatment based on income baseline_data$t1_a <- with(baseline_data, {   prob <- plogis(-2 + 0.00002 * t0_income)   rbinom(n, 1, prob) })  # add outcome baseline_data$t1_satisfaction <- with(baseline_data, {   5 + 0.00001 * t0_income + 0.5 * t1_a + rnorm(n, 0, 1) })  sim_data <- list(data = baseline_data)  # create income truncation shadow (survey caps at $150k) truncation_shadow <- create_truncation_shadow(   variables = \"t0_income\",   upper = 150000,   type = \"simple\" )  # apply shadow data_truncated <- apply_shadow(sim_data$data, truncation_shadow)  # compare distributions par(mfrow = c(1, 2)) hist(data_truncated$t0_income_true,       main = \"True Income Distribution\",      xlab = \"Income ($)\",       col = \"lightblue\",      breaks = 30) abline(v = 150000, col = \"red\", lwd = 2, lty = 2)  hist(data_truncated$t0_income,      main = \"Observed Income Distribution\",       xlab = \"Income ($)\",      col = \"lightcoral\",      breaks = 30)"},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"impact-on-causal-effects","dir":"Articles","previous_headings":"Truncation Shadows","what":"Impact on Causal Effects","title":"Truncation and Coarsening: When Data Loses Precision","text":"Truncation can bias causal effect estimates, especially treatment assignment depends truncated variable:","code":"# compare treatment assignment patterns true_effects <- compute_causal_effects(   data_truncated,   exposure = \"t1_a\",   outcome = \"t1_satisfaction\" )  # create a version where treatment uses observed (truncated) income data_realistic <- sim_data$data data_realistic$t1_a_realistic <- with(data_truncated, {   # reassign treatment based on observed income   prob <- plogis(-2 + 0.00002 * t0_income)   rbinom(n, 1, prob) })  realistic_effects <- compute_causal_effects(   data_realistic,   exposure = \"t1_a_realistic\",    outcome = \"t1_satisfaction\" )  # compare cat(\"True ATE (treatment based on true income):\", round(true_effects$ate, 3), \"\\n\") #> True ATE (treatment based on true income): 0.559 cat(\"Realistic ATE (treatment based on truncated income):\", round(realistic_effects$ate, 3), \"\\n\") #> Realistic ATE (treatment based on truncated income): 0.272 cat(\"Bias:\", round(realistic_effects$ate - true_effects$ate, 3), \"\\n\") #> Bias: -0.288"},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"boundary-effects","dir":"Articles","previous_headings":"Truncation Shadows","what":"Boundary Effects","title":"Truncation and Coarsening: When Data Loses Precision","text":"Sometimes truncated values pile boundary rather becoming missing:","code":"# create boundary truncation (e.g., scale that shows \"MAX\" at 150k) boundary_shadow <- create_truncation_shadow(   variables = \"t0_income\",   upper = 150000,   type = \"boundary\" )  data_boundary <- apply_shadow(sim_data$data, boundary_shadow)  # visualise pile-up ggplot(data.frame(   income = data_boundary$t0_income,   truncated = data_boundary$t0_income_truncated ), aes(x = income, fill = truncated)) +   geom_histogram(bins = 50, alpha = 0.7) +   scale_fill_manual(values = c(\"FALSE\" = \"lightblue\", \"TRUE\" = \"red\"),                     labels = c(\"Within range\", \"Piled at boundary\")) +   labs(title = \"Income Distribution with Boundary Pile-up\",        x = \"Observed Income ($)\",        y = \"Count\",        fill = \"Status\") +   theme_minimal()"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"understanding-coarsening","dir":"Articles","previous_headings":"Coarsening Shadows","what":"Understanding Coarsening","title":"Truncation and Coarsening: When Data Loses Precision","text":"Coarsening occurs continuous data recorded categories, losing precision. extremely common practice: - Age recorded groups (18-24, 25-34, etc.) - Income brackets - Likert scales continuous measures - Privacy-preserving data release","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"basic-coarsening-example","dir":"Articles","previous_headings":"Coarsening Shadows","what":"Basic Coarsening Example","title":"Truncation and Coarsening: When Data Loses Precision","text":"","code":"# simulate age and health outcome data n <- 1000 age_health_data <- list(   data = data.frame(     age = runif(n, 18, 80),     sex = rbinom(n, 1, 0.5)   ) )  # add health outcome that declines with age age_health_data$data$health <- with(age_health_data$data, {   100 - 0.5 * (age - 50) - 0.2 * (age - 50)^2/100 +      5 * sex + rnorm(n, 0, 10) })  # coarsen age into 10-year groups age_coarsen <- create_coarsening_shadow(   variables = \"age\",   breaks = c(0, 30, 40, 50, 60, 70, 100),   labels = c(\"18-29\", \"30-39\", \"40-49\", \"50-59\", \"60-69\", \"70+\"),   type = \"midpoint\" )  data_coarsened <- apply_shadow(age_health_data$data, age_coarsen)  # show information loss print(head(data.frame(   true_age = data_coarsened$age_true,   age_group = data_coarsened$age,   midpoint = as.numeric(as.character(data_coarsened$age)) ), 10)) #> Warning in data.frame(true_age = data_coarsened$age_true, age_group = #> data_coarsened$age, : NAs introduced by coercion #>    true_age age_group midpoint #> 1  37.41041     30-39       NA #> 2  73.96634       70+       NA #> 3  70.01563       70+       NA #> 4  78.77812       70+       NA #> 5  64.21951     60-69       NA #> 6  21.48280     18-29       NA #> 7  44.08102     40-49       NA #> 8  35.52442     30-39       NA #> 9  31.70956     30-39       NA #> 10 19.48341     18-29       NA"},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"different-coarsening-approaches","dir":"Articles","previous_headings":"Coarsening Shadows","what":"Different Coarsening Approaches","title":"Truncation and Coarsening: When Data Loses Precision","text":"shadow framework supports multiple ways handle coarsened data:","code":"# create income data income_data <- data.frame(   income = rlnorm(500, log(50000), 0.5) )  # define income brackets breaks <- c(0, 25000, 50000, 75000, 100000, 150000, Inf)  # midpoint assumption shadow_mid <- create_coarsening_shadow(   \"income\", breaks = breaks, type = \"midpoint\" )  # lower bound assumption   shadow_lower <- create_coarsening_shadow(   \"income\", breaks = breaks, type = \"lower\" )  # random within interval shadow_random <- create_coarsening_shadow(   \"income\", breaks = breaks, type = \"random\" )  # apply all three data_mid <- apply_shadow(income_data, shadow_mid) data_lower <- apply_shadow(income_data, shadow_lower)  data_random <- apply_shadow(income_data, shadow_random)  # compare results comparison <- data.frame(   true = income_data$income,   midpoint = data_mid$income,   lower = data_lower$income,   random = data_random$income ) %>%   pivot_longer(-true, names_to = \"method\", values_to = \"observed\")  ggplot(comparison, aes(x = true, y = observed)) +   geom_point(alpha = 0.5, size = 0.8) +   geom_abline(slope = 1, intercept = 0, col = \"red\", lty = 2) +   facet_wrap(~method) +   scale_x_continuous(labels = scales::dollar) +   scale_y_continuous(labels = scales::dollar) +   labs(title = \"Different Coarsening Assumptions\",        x = \"True Income\",         y = \"Observed Income\") +   theme_minimal()"},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"heaping-realistic-response-patterns","dir":"Articles","previous_headings":"Coarsening Shadows","what":"Heaping: Realistic Response Patterns","title":"Truncation and Coarsening: When Data Loses Precision","text":"People often round responses “nice” numbers. heaping option models behaviour:","code":"# simulate age reporting with heaping true_ages <- data.frame(   age = runif(1000, 20, 70) )  # create heaping shadow - people round to 0s and 5s heaping_shadow <- create_coarsening_shadow(   variables = \"age\",   breaks = 10,  # 10 bins   type = \"heaping\",   heaping_digits = c(0, 5),   heaping_prob = 0.7  # 70% of people heap )  heaped_data <- apply_shadow(true_ages, heaping_shadow)  # visualise heaping pattern age_comparison <- data.frame(   true_age = heaped_data$age_true,   reported_age = heaped_data$age,   last_digit = heaped_data$age %% 10 )  # plot distribution of last digits ggplot(age_comparison, aes(x = factor(last_digit))) +   geom_bar(fill = \"steelblue\") +   labs(title = \"Age Heaping: Distribution of Last Digits\",        subtitle = \"People preferentially report ages ending in 0 and 5\",        x = \"Last Digit of Reported Age\",        y = \"Count\") +   theme_minimal() # show heaping visually ggplot(age_comparison, aes(x = true_age, y = reported_age)) +   geom_point(alpha = 0.3, size = 0.8) +   geom_abline(slope = 1, intercept = 0, col = \"red\", lty = 2) +   labs(title = \"Age Heaping Pattern\",        subtitle = \"Points cluster at ages ending in 0 and 5\",        x = \"True Age\",        y = \"Reported Age\") +   theme_minimal()"},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"combined-example-income-study-with-multiple-shadows","dir":"Articles","previous_headings":"","what":"Combined Example: Income Study with Multiple Shadows","title":"Truncation and Coarsening: When Data Loses Precision","text":"Let’s examine realistic scenario truncation coarsening affect study:","code":"# simulate an income intervention study n <- 2000 income_study <- list(   data = data.frame(     education = sample(10:20, n, replace = TRUE),  # years     experience = rpois(n, lambda = 10)   ) )  # generate income based on education and experience income_study$data$income <- with(income_study$data, {   exp(10 + 0.1 * education + 0.05 * experience + rnorm(n, 0, 0.4)) })  # add treatment (job training for lower incomes) income_study$data$treatment <- with(income_study$data, {   prob <- plogis(2 - 0.00003 * income)   rbinom(n, 1, prob) })  # add outcome (income change) income_study$data$income_change <- with(income_study$data, {   change_pct <- 5 + 10 * treatment - 2 * log(income/50000) + rnorm(n, 0, 3)   income * (1 + change_pct/100) - income })  # in practice, income data often has both issues: # 1. top-coding for privacy (truncation) # 2. reported in brackets (coarsening)  # first apply truncation truncate_shadow <- create_truncation_shadow(   variables = \"income\",   upper = 200000,   type = \"boundary\"  # shows as $200k+ )  # then apply coarsening coarsen_shadow <- create_coarsening_shadow(   variables = \"income\",   breaks = c(0, 25000, 50000, 75000, 100000, 150000, 200000, Inf),   labels = c(\"<$25k\", \"$25-50k\", \"$50-75k\", \"$75-100k\",               \"$100-150k\", \"$150-200k\", \"$200k+\"),   type = \"midpoint\" )  # apply both shadows data_with_shadows <- income_study$data %>%   apply_shadow(truncate_shadow) %>%   apply_shadow(coarsen_shadow)  # compute effects with true vs observed income true_effects <- compute_causal_effects(   income_study$data,   exposure = \"treatment\",   outcome = \"income_change\" )  observed_effects <- compute_causal_effects(   data_with_shadows,   exposure = \"treatment\",    outcome = \"income_change\" )  # create comparison cat(\"=== Impact of Truncation and Coarsening ===\\n\") #> === Impact of Truncation and Coarsening === cat(\"True ATE: $\", round(true_effects$ate, 2), \"\\n\", sep = \"\") #> True ATE: $8442.5 cat(\"Observed ATE: $\", round(observed_effects$ate, 2), \"\\n\", sep = \"\") #> Observed ATE: $8442.5 cat(\"Bias: $\", round(observed_effects$ate - true_effects$ate, 2),      \" (\", round((observed_effects$ate - true_effects$ate)/true_effects$ate * 100, 1),      \"%)\\n\", sep = \"\") #> Bias: $0 (0%)  # visualise the data degradation par(mfrow = c(1, 3))  # original hist(income_study$data$income,       breaks = 30,      main = \"Original Income Data\",      xlab = \"Income ($)\",      col = \"lightgreen\")  # after truncation hist(data_with_shadows$income_true,      breaks = 30,       main = \"After Truncation\",      xlab = \"Income ($)\",      col = \"lightblue\") abline(v = 200000, col = \"red\", lwd = 2, lty = 2)  # after coarsening barplot(table(data_with_shadows$income),         main = \"After Truncation + Coarsening\",         xlab = \"Income Bracket\",         ylab = \"Count\",         col = \"lightcoral\",         las = 2)"},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"monte-carlo-evaluation","dir":"Articles","previous_headings":"","what":"Monte Carlo Evaluation","title":"Truncation and Coarsening: When Data Loses Precision","text":"Let’s systematically evaluate different levels truncation coarsening affect estimates:","code":"# function to run simulation with varying truncation/coarsening evaluate_information_loss <- function(truncation_point = Inf,                                     n_brackets = NULL,                                     n_sim = 100) {      results <- replicate(n_sim, {     # generate simple data     n <- 500     data <- data.frame(       score = rnorm(n, 50, 20),       treatment = NA,       outcome = NA     )          # treatment depends on score     data$treatment <- with(data, {       prob <- plogis(-1 + 0.02 * score)       rbinom(n, 1, prob)     })          # outcome depends on treatment and score     data$outcome <- with(data, {       50 + 10 * treatment + 0.5 * score + rnorm(n, 0, 10)     })          # apply shadows if specified     data_observed <- data          if (truncation_point < Inf) {       trunc_shadow <- create_truncation_shadow(         \"score\",         upper = truncation_point,         type = \"simple\"       )       data_observed <- apply_shadow(data_observed, trunc_shadow)     }          if (!is.null(n_brackets) && !is.na(n_brackets)) {       coarse_shadow <- create_coarsening_shadow(         \"score\",         breaks = n_brackets,         type = \"midpoint\"       )       data_observed <- apply_shadow(data_observed, coarse_shadow)     }          # compute effects     true_effect <- compute_causal_effects(       data,        exposure = \"treatment\",       outcome = \"outcome\"     )$ate          observed_effect <- compute_causal_effects(       data_observed,       exposure = \"treatment\",        outcome = \"outcome\"     )$ate          c(true = true_effect, observed = observed_effect)   })      # summarise results   true_effects <- results[\"true\", ]   observed_effects <- results[\"observed\", ]      data.frame(     mean_true = mean(true_effects),     mean_observed = mean(observed_effects),     bias = mean(observed_effects - true_effects),     relative_bias = mean((observed_effects - true_effects) / true_effects) * 100,     rmse = sqrt(mean((observed_effects - true_effects)^2))   ) }  # test different scenarios scenarios <- expand.grid(   truncation = c(Inf, 80, 70, 60),   coarsening = c(NA, 10, 5, 3) )  results <- do.call(rbind, lapply(1:nrow(scenarios), function(i) {   evaluate_information_loss(     truncation_point = scenarios$truncation[i],     n_brackets = scenarios$coarsening[i],     n_sim = 50   ) }))  scenarios_results <- cbind(scenarios, results)  # visualise results scenarios_results %>%   mutate(     truncation = factor(truncation,                         levels = c(Inf, 80, 70, 60),                        labels = c(\"None\", \"80\", \"70\", \"60\")),     coarsening_label = case_when(       is.na(coarsening) ~ \"None\",       coarsening == 10 ~ \"10 bins\",       coarsening == 5 ~ \"5 bins\",        coarsening == 3 ~ \"3 bins\",       TRUE ~ as.character(coarsening)     ),     coarsening_label = factor(coarsening_label,                               levels = c(\"None\", \"10 bins\", \"5 bins\", \"3 bins\"))   ) %>%   ggplot(aes(x = truncation, y = relative_bias, fill = coarsening_label)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   labs(title = \"Bias from Truncation and Coarsening\",        subtitle = \"Percentage bias in ATE estimates\",        x = \"Truncation Point\",        y = \"Relative Bias (%)\",        fill = \"Coarsening\") +   theme_minimal() +   scale_fill_brewer(palette = \"Set2\")"},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"practical-recommendations","dir":"Articles","previous_headings":"","what":"Practical Recommendations","title":"Truncation and Coarsening: When Data Loses Precision","text":"Based analyses, key recommendations handling truncation coarsening:","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"for-analysts","dir":"Articles","previous_headings":"Practical Recommendations","what":"For Analysts","title":"Truncation and Coarsening: When Data Loses Precision","text":"Document data limitations: Always check truncation points binning variables Consider multiple assumptions: data coarsened, try different approaches (midpoint, lower, random) Sensitivity analysis: Evaluate results change different assumptions unobserved values","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"for-data-collectors","dir":"Articles","previous_headings":"Practical Recommendations","what":"For Data Collectors","title":"Truncation and Coarsening: When Data Loses Precision","text":"Avoid unnecessary truncation: possible, extend measurement ranges Record exact values: feasible, record continuous values rather categories Document thresholds: Clearly indicate truncation binning thresholds","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"example-sensitivity-analysis","dir":"Articles","previous_headings":"Practical Recommendations","what":"Example Sensitivity Analysis","title":"Truncation and Coarsening: When Data Loses Precision","text":"","code":"# function to perform sensitivity analysis truncation_sensitivity_analysis <- function(data, outcome_var, truncation_var,                                            truncation_points = c(Inf, 90, 80, 70)) {      results <- lapply(truncation_points, function(tp) {     # apply truncation     if (tp < Inf) {       shadow <- create_truncation_shadow(         truncation_var,         upper = tp,         type = \"simple\"       )       data_temp <- apply_shadow(data, shadow)     } else {       data_temp <- data     }          # compute correlation     cor_val <- cor(data_temp[[truncation_var]],                     data_temp[[outcome_var]],                     use = \"complete.obs\")          data.frame(       truncation_point = tp,       correlation = cor_val,       n_observed = sum(!is.na(data_temp[[truncation_var]]))     )   })      do.call(rbind, results) }  # example with simulated data example_data <- data.frame(   predictor = rnorm(1000, 75, 15),   outcome = NA ) example_data$outcome <- 2 + 0.5 * example_data$predictor + rnorm(1000, 0, 10)  sens_results <- truncation_sensitivity_analysis(   example_data,    \"outcome\",   \"predictor\",   truncation_points = c(Inf, 90, 80, 70, 60) )  print(sens_results) #>   truncation_point correlation n_observed #> 1              Inf   0.5877290       1000 #> 2               90   0.5112872        858 #> 3               80   0.4755568        647 #> 4               70   0.4564907        366 #> 5               60   0.4362343        155  # visualise ggplot(sens_results, aes(x = factor(truncation_point), y = correlation)) +   geom_point(size = 4) +   geom_line(aes(group = 1)) +   labs(title = \"Sensitivity to Truncation\",        subtitle = \"How correlation changes with different truncation points\",        x = \"Truncation Point\",         y = \"Correlation\") +   theme_minimal()"},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Truncation and Coarsening: When Data Loses Precision","text":"Truncation coarsening pervasive real-world data can substantially bias causal estimates. margot.sim shadow framework provides tools : Model data limitations realistically Evaluate impact causal inferences Conduct sensitivity analyses Design better data collection protocols explicitly modelling “shadows” reality, can better understand gap observe seek know.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/truncation-coarsening.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Truncation and Coarsening: When Data Loses Precision","text":"See vignette(\"applying-shadows\") introduction shadow framework See vignette(\"measurement-error\") related measurement issues See vignette(\"monte-carlo-simple\") systematic evaluation methods","code":""},{"path":"https://go-bayes.github.io/margot.sim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Bulbulia. Author, maintainer.","code":""},{"path":"https://go-bayes.github.io/margot.sim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bulbulia J (2025). margot.sim: Simulate Longitudinal Data Observational Shadows Monte Carlo Evaluation. R package version 0.1.3, https://go-bayes.github.io/margot.sim/.","code":"@Manual{,   title = {margot.sim: Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation},   author = {Joseph Bulbulia},   year = {2025},   note = {R package version 0.1.3},   url = {https://go-bayes.github.io/margot.sim/}, }"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"margotsim","dir":"","previous_headings":"","what":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"R package simulating longitudinal data realistic observational shadows (measurement error, missingness, selection bias) evaluating causal inference methods via Monte Carlo simulation.","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"can install development version margot.sim GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"go-bayes/margot.sim\")"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"major-enhancements","dir":"","previous_headings":"What’s New in v0.1.2 (January 2025)","what":"Major Enhancements","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Scenario Framework: Bundle observational challenges coherent scenarios systematic sensitivity analysis New Shadow Types: Truncation, coarsening, mode effects shadows realistic data limitations Enhanced Documentation: 12 comprehensive vignettes covering major features Improved Architecture: Dual data design preserves true observed data throughout analysis","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"key-new-features","dir":"","previous_headings":"What’s New in v0.1.2 (January 2025)","what":"Key New Features","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"","code":"# Create scenarios for sensitivity analysis scenarios <- list(   oracle = scenario_oracle(),  # Perfect measurement   rct = scenario_rct_simple(),  # Typical RCT conditions   observational = scenario_observational_simple(),  # Real-world messiness   pessimistic = scenario_pessimistic()  # Worst-case scenario )  # Compare effects across scenarios comparison <- compare_scenarios(   data = my_data,   scenarios = scenarios,   exposure = \"treatment\",   outcome = \"outcome\" )  # New shadow types truncation <- create_truncation_shadow(   variables = \"income\",   upper = 200000  # Top-coding )  coarsening <- create_coarsening_shadow(   variables = \"age\",   breaks = c(0, 30, 50, 70, 100),   type = \"heaping\"  # Realistic rounding patterns )"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"margot.sim helps researchers understand well statistical methods work data imperfect. package provides: Shadowing Framework - Apply realistic observational distortions Scenario Framework - Bundle shadows documented research contexts Monte Carlo Framework - Systematically evaluate estimator performance Transport Weights - Generalize samples populations Flexible Distributions - Model non-normal data","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"","code":"library(margot.sim)  # 1. Generate data with a typical observational scenario obs_scenario <- scenario_observational_simple() sim_data <- margot_simulate(n = 1000, waves = 2) observed_data <- apply_scenario(sim_data, obs_scenario)  # 2. Compare true vs observed effects true_effects <- compute_causal_effects(   observed_data$data_true,   exposure = \"t1_a\",   outcome = \"t2_y\" )  biased_effects <- compute_causal_effects(   observed_data$data_observed,   exposure = \"t1_a\",    outcome = \"t2_y\" )  # 3. Run sensitivity analysis across scenarios scenarios <- scenario_collection_simple() comparison <- compare_scenarios(   sim_data,   scenarios,   exposure = \"t1_a\",   outcome = \"t2_y\" )  print(comparison) plot(comparison)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"id_1-shadowing-framework","dir":"","previous_headings":"Core Features","what":"1. Shadowing Framework","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"package implements comprehensive set observational “shadows” distort true data: Measurement Error: Data Limitations: Missing Data: Selection Bias:","code":"# Classical error for continuous variables me_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     variables = c(\"blood_pressure\", \"cholesterol\"),     error_type = \"classical\",     sigma = 0.5   ) )  # Misclassification for binary variables misclass_shadow <- create_shadow(   type = \"measurement_error\",    params = list(     variables = \"treatment\",     error_type = \"misclassification\",     sensitivity = 0.85,  # 85% of treated correctly identified     specificity = 0.90   # 90% of untreated correctly identified   ) )  # Differential error (depends on other variables) diff_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     variables = \"self_reported_health\",     error_type = \"differential\",     differential_var = \"education\",     differential_fn = function(edu_values) {       # More educated report health more accurately       rnorm(length(edu_values), 0, 0.5 - 0.1 * edu_values)     }   ) ) # Truncation (values beyond limits not observed) truncation <- create_truncation_shadow(   variables = \"biomarker\",   lower = 0,      # Detection limit   upper = 1000,   # Equipment maximum   type = \"boundary\"  # Values pile up at boundaries )  # Coarsening (continuous data in categories) coarsening <- create_coarsening_shadow(   variables = \"age\",   breaks = c(0, 18, 35, 50, 65, 100),   type = \"heaping\",     # People round to 5s and 0s   heaping_digits = c(0, 5),   heaping_prob = 0.7 )  # Mode effects (measurement varies by collection method) mode_effect <- create_mode_effects_shadow(   variables = c(\"depression_score\", \"anxiety_score\"),   mode_var = \"survey_mode\",  # phone/web/in-person   effects = list(     phone = function(x) x + rnorm(length(x), -0.5, 0.2),     web = function(x) x,     in_person = function(x) x + rnorm(length(x), 0.3, 0.1)   ) ) # Item-level missingness with different mechanisms miss_shadow <- create_item_missingness_shadow(   variables = c(\"income\", \"health_status\"),   missing_mechanism = \"MAR\",  # or \"MCAR\", \"MNAR\"   missing_rate = 0.2,   dependent_vars = c(\"age\", \"education\") ) # Positivity violations pos_shadow <- create_positivity_shadow(   exposure_var = \"treatment\",   filter_fn = function(data) {     # Treatment only available to low-risk patients     data$risk_score <= 0.7   } )"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"id_2-scenario-framework","dir":"","previous_headings":"Core Features","what":"2. Scenario Framework","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Scenarios bundle shadows documentation systematic sensitivity analysis:","code":"# Create a COVID vaccine effectiveness scenario covid_scenario <- create_scenario(   name = \"COVID Vaccine Study\",   shadows = list(     # Vaccination status misclassified     vaccine_misclass = create_shadow(       type = \"measurement_error\",       params = list(         variables = \"vaccinated\",         error_type = \"misclassification\",         sensitivity = 0.95,         specificity = 0.98       )     ),     # Differential testing by vaccination status     testing_bias = create_shadow(       type = \"measurement_error\",       params = list(         variables = \"covid_positive\",         error_type = \"differential\",         differential_var = \"vaccinated\",         differential_fn = function(vax) {           # Vaccinated more likely to test           ifelse(vax == 1,                   rnorm(length(vax), 0, 0.1),                  rnorm(length(vax), 0, 0.3))         }       )     )   ),   description = \"COVID-19 vaccine effectiveness with real-world biases\",   justification = \"Testing behavior and record-keeping vary by vaccination status\",   references = c(\"Lipsitch M, et al. NEJM 2021\", \"Hernan MA, et al. Ann Intern Med 2021\") )  # Use pre-built scenario library scenarios <- scenario_collection_simple() # Includes: oracle, rct, observational, pessimistic"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"id_3-monte-carlo-framework","dir":"","previous_headings":"Core Features","what":"3. Monte Carlo Framework","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Systematically evaluate estimator performance:","code":"# Define estimator ipw_estimator <- function(data) {   # Propensity score model   ps_model <- glm(treatment ~ age + gender + baseline_health,                    data = data, family = binomial)   ps <- predict(ps_model, type = \"response\")      # IPW weights   weights <- ifelse(data$treatment == 1, 1/ps, 1/(1-ps))      # Outcome model   fit <- lm(outcome ~ treatment, weights = weights, data = data)      list(     estimate = coef(fit)[\"treatment\"],     se = sqrt(diag(vcov(fit)))[\"treatment\"],     converged = TRUE   ) }  # Run Monte Carlo evaluation mc_results <- margot_monte_carlo(   n_reps = 1000,   n_per_rep = 500,   dgp_params = list(     waves = 2,     params = list(a_y_coef = 0.5)  # True effect   ),   shadows = list(misclass_shadow, miss_shadow),   estimator_fn = ipw_estimator,   truth_fn = function(data) 0.5,   parallel = TRUE,   n_cores = 4 )  # Automatic performance metrics print(mc_results) # - Bias: -0.12 (24% relative bias) # - RMSE: 0.18 # - Coverage: 0.87 (nominal 0.95) # - Power: 0.73"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"id_4-transport-weights","dir":"","previous_headings":"Core Features","what":"4. Transport Weights","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Generalize study samples target populations:","code":"# When your sample doesn't match your target population transport_analysis <- margot_transport_analysis(   sample_data = trial_data,   population_data = registry_data,   transport_vars = c(\"age\", \"comorbidity\", \"ses\"),   exposure = \"treatment\",    outcome = \"mortality\",   shadows = list(     # Registry data has measurement error     create_shadow(       type = \"measurement_error\",       params = list(         variables = \"comorbidity\",         error_type = \"misclassification\",         sensitivity = 0.85,         specificity = 0.95       )     )   ) )  print(transport_analysis$comparison) # Sample ATE: 0.15 (trial participants) # Population ATE: 0.08 (real-world patients) # Transport bias: -0.07"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Comprehensive vignettes cover major features:","code":"# Core functionality vignette(\"basic-simulation\")           # Getting started vignette(\"applying-shadows\")           # Shadow framework vignette(\"scenario-sensitivity\")       # NEW: Scenario-based analysis vignette(\"monte-carlo-simple\")         # Evaluating estimators  # Advanced topics vignette(\"truncation-coarsening\")      # NEW: Data limitations vignette(\"misclassification-bias\")     # Binary variable errors vignette(\"shift-interventions\")        # Modified treatment policies vignette(\"transport-weights-shadows\")  # Generalizing to populations  # Practical applications vignette(\"heterogeneous-effects\")      # Effect modification vignette(\"censoring-effect-mod\")       # Dropout and effect moderation vignette(\"practical-workflow\")         # Complete analysis workflow"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"near-term-q1-q2-2025","dir":"","previous_headings":"Future Directions","what":"Near-term (Q1-Q2 2025)","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Causal method integration: Direct support lmtp, grf, TMLE packages Enhanced HTE framework: Systematic heterogeneous treatment effect discovery Diagnostic visualizations: Balance plots, positivity checks, shadow validation Performance optimizations: Faster simulation large-scale studies","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"medium-term-2025","dir":"","previous_headings":"Future Directions","what":"Medium-term (2025)","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Interactive tools: Shiny apps exploring shadow impacts Batch estimation: Simultaneous evaluation multiple estimators Cross-package validation: Compare results across causal inference ecosystems Educational platform: Interactive tutorials case studies","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"long-term-vision","dir":"","previous_headings":"Future Directions","what":"Long-term Vision","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Comprehensive bias catalog: Library validated shadow parameters literature Automated sensitivity analysis: Smart defaults based study design Integration hub: Bridge simulation applied causal inference Community repository: User-contributed scenarios shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"why-margotsim","dir":"","previous_headings":"","what":"Why margot.sim?","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Real studies rarely provide clean data. Instead, researchers face: - Missing responses participants skip questions drop - Measurement errors imperfect instruments self-reports - Selection biases treatment assignment isn’t random Traditional simulations often ignore challenges. margot.sim: Mirrors reality - Generates clean data adds realistic distortions Stress-tests methods - Evaluates approach works assumptions fail Maintains truth - Always knows ground truth principled evaluation Supports estimator - Flexible framework works statistical method Builds confidence - Demonstrates robustness costly field studies framework’s power comes maintaining clean separation true data-generating processes observed data, enabling principled evaluation statistical methods realistic conditions.","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"welcome contributions! Please: Fork repository Create feature branch (git checkout -b feature/amazing-feature) Add tests new functionality Ensure tests pass (devtools::test()) Submit pull request Priority areas contribution: - Additional shadow types domain-specific biases - Pre-built scenarios different research fields - Integration causal inference packages - Performance optimizations","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"use margot.sim research, please cite:","code":"citation(\"margot.sim\")"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"MIT License - see LICENSE.md details","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"shadow metaphor draws inspiration Plato’s Allegory Cave, reminding us observed data often distorted reflections underlying truths.","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"","code":"# TBA"},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_shadow_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare data before and after shadowing — analyse_shadow_effects","title":"Compare data before and after shadowing — analyse_shadow_effects","text":"Compare data shadowing","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_shadow_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare data before and after shadowing — analyse_shadow_effects","text":"","code":"analyse_shadow_effects(original, shadowed, variables = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_shadow_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare data before and after shadowing — analyse_shadow_effects","text":"original Original data shadowed Shadowed data variables Variables compare","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_shadow_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare data before and after shadowing — analyse_shadow_effects","text":"Summary shadow effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyze_heterogeneity.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze heterogeneous effects from simulation output — analyze_heterogeneity","title":"Analyze heterogeneous effects from simulation output — analyze_heterogeneity","text":"Helper function analyze treatment effect heterogeneity margot_simulate output custom heterogeneity parameters.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyze_heterogeneity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze heterogeneous effects from simulation output — analyze_heterogeneity","text":"","code":"analyze_heterogeneity(   data,   treatment_wave = 2,   outcome_wave = 3,   effect_modifiers = c(\"b1\", \"b2\", \"b3\", \"t0_y\", \"t0_a\") )"},{"path":"https://go-bayes.github.io/margot.sim/reference/analyze_heterogeneity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze heterogeneous effects from simulation output — analyze_heterogeneity","text":"data Output margot_simulate treatment_wave Wave treatment analyze (default 2) outcome_wave Wave outcome analyze (default 3) effect_modifiers Character vector baseline variables test","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyze_heterogeneity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze heterogeneous effects from simulation output — analyze_heterogeneity","text":"Data frame heterogeneity statistics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_baseline_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply baseline selection — apply_baseline_selection","title":"Apply baseline selection — apply_baseline_selection","text":"Apply baseline selection","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_baseline_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply baseline selection — apply_baseline_selection","text":"","code":"apply_baseline_selection(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply censoring to complete data — apply_censoring_post_hoc","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"Takes data generated margot_simulate applies censoring based stored censoring probabilities custom censoring function.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"","code":"apply_censoring_post_hoc(   complete_data,   censoring_type = c(\"built_in\", \"custom\"),   censoring_function = NULL,   apply_process_function = TRUE,   ... )"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"complete_data Data frame margot_simulate \"margot_meta\" attribute censoring_type Character: \"built_in\" uses stored probabilities, \"custom\" uses custom function censoring_function Function custom censoring (required censoring_type = \"custom\"). take data frame return censoring applied. apply_process_function Logical. Apply margot_process_longitudinal create -lost indicators? Default: TRUE ... Additional arguments passed margot_process_longitudinal custom censoring_function","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"Data frame censoring applied indicators created. returned   object maintains \"margot_meta\" attribute additional censoring information.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"## Censoring Logic subject censored wave k: 1. variables wave k onwards set NA 2. subject considered \"lost follow-\" point 3. future data observed subject ## -Lost Indicators `apply_process_function = TRUE`, function creates \"not_lost\" indicators: - `t0_not_lost_following_wave`: 1 subject data t1, 0 otherwise - `t1_not_lost_following_wave`: 1 subject data t2, 0 otherwise - ... indicators useful : - Inverse probability censoring weights (IPCW) - Determining -risk population wave - Creating proper denominators survival analyses ## Important Note Unlike implementations, function carry forward last observations. subject censored: - Future values set NA (carried forward) - represents true missingness due dropout - Methods like IPCW multiple imputation used analysis","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"","code":"# Generate complete data complete <- margot_simulate(n = 1000, waves = 3,                             censoring = list(rate = 0.2))  # Apply censoring  observed <- apply_censoring_post_hoc(complete)  # Check censoring rates table(observed$t0_not_lost_following_wave) #>  #>   0   1  #> 396 604  table(observed$t1_not_lost_following_wave) #>  #>   0   1  #> 520 480"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_classical_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply classical measurement error — apply_classical_error","title":"Apply classical measurement error — apply_classical_error","text":"Apply classical measurement error","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_classical_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply classical measurement error — apply_classical_error","text":"","code":"apply_classical_error(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_correlated_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply correlated measurement error — apply_correlated_error","title":"Apply correlated measurement error — apply_correlated_error","text":"Apply correlated measurement error","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_correlated_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply correlated measurement error — apply_correlated_error","text":"","code":"apply_correlated_error(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_dichotomisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dichotomisation — apply_dichotomisation","title":"Apply dichotomisation — apply_dichotomisation","text":"Apply dichotomisation","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_dichotomisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dichotomisation — apply_dichotomisation","text":"","code":"apply_dichotomisation(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_differential_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply differential measurement error — apply_differential_error","title":"Apply differential measurement error — apply_differential_error","text":"Apply differential measurement error","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_differential_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply differential measurement error — apply_differential_error","text":"","code":"apply_differential_error(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_misclassification.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply misclassification to binary variables — apply_misclassification","title":"Apply misclassification to binary variables — apply_misclassification","text":"Apply misclassification binary variables","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_misclassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply misclassification to binary variables — apply_misclassification","text":"","code":"apply_misclassification(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a scenario to data — apply_scenario","title":"Apply a scenario to data — apply_scenario","text":"Applies shadows scenario dataset, maintaining dual data architecture (true observed).","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a scenario to data — apply_scenario","text":"","code":"apply_scenario(data, scenario, verbose = FALSE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a scenario to data — apply_scenario","text":"data Data frame apply scenario scenario margot_scenario object verbose Logical, whether print progress messages","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a scenario to data — apply_scenario","text":"list components: data_true Original data shadows data_observed Data applying shadows scenario Name applied scenario shadows_applied List applied shadow names","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_scenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a scenario to data — apply_scenario","text":"","code":"# simulate some data sim_data <- margot_simulate(n = 1000, waves = 2)  # create and apply a scenario my_scenario <- create_scenario(   name = \"Realistic conditions\",   shadows = list(     measurement = create_shadow(       type = \"measurement_error\",       params = list(         variables = \"t1_l\",         error_type = \"classical\",         sigma = 0.5       )     )   ) )  result <- apply_scenario(sim_data, my_scenario)  # compare true vs observed data compare_shadow_effects(result) #> Shadow Effect Comparison #> ======================== #>  #> True Effects: #> Causal Effect Estimates: #>   N (total): 1000 [Treated: 545, Control: 455] #>   ATE: 0.251 #>   ATT: 0.251 #>   ATU: 0.251 #>  #> Observed Effects (after shadows): #> Causal Effect Estimates: #>   N (total): 1000 [Treated: 545, Control: 455] #>   ATE: 0.251 #>   ATT: 0.251 #>   ATU: 0.251 #>  #> Bias Analysis: #> Shadow Bias Comparison: #>  #>  estimand truth observed bias relative_bias #>       ate 0.251    0.251    0            0% #>       att 0.251    0.251    0            0% #>       atu 0.251    0.251    0            0%"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.censoring_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply censoring shadow — apply_shadow.censoring_shadow","title":"Apply censoring shadow — apply_shadow.censoring_shadow","text":"Apply censoring shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.censoring_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply censoring shadow — apply_shadow.censoring_shadow","text":"","code":"# S3 method for class 'censoring_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.censoring_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply censoring shadow — apply_shadow.censoring_shadow","text":"data Data frame apply shadow shadow censoring shadow object created create_shadow() ... Additional arguments passed apply_censoring_post_hoc","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.censoring_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply censoring shadow — apply_shadow.censoring_shadow","text":"Modified data frame censoring applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.coarsening_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply coarsening shadow — apply_shadow.coarsening_shadow","title":"Apply coarsening shadow — apply_shadow.coarsening_shadow","text":"Apply coarsening shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.coarsening_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply coarsening shadow — apply_shadow.coarsening_shadow","text":"","code":"# S3 method for class 'coarsening_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.coarsening_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply coarsening shadow — apply_shadow.coarsening_shadow","text":"data Data frame apply shadow shadow coarsening shadow object ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.coarsening_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply coarsening shadow — apply_shadow.coarsening_shadow","text":"Data frame coarsening applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.combined_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply combined shadow — apply_shadow.combined_shadow","title":"Apply combined shadow — apply_shadow.combined_shadow","text":"Apply combined shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.combined_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply combined shadow — apply_shadow.combined_shadow","text":"","code":"# S3 method for class 'combined_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.combined_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply combined shadow — apply_shadow.combined_shadow","text":"data Data frame apply shadow shadow combined shadow object created combine_shadows() ... Additional arguments passed apply_shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.combined_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply combined shadow — apply_shadow.combined_shadow","text":"Modified data frame component shadows applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a shadow to data — apply_shadow","title":"Apply a shadow to data — apply_shadow","text":"Apply shadow data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a shadow to data — apply_shadow","text":"","code":"apply_shadow(data, shadow, preserve_truth = FALSE, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a shadow to data — apply_shadow","text":"data Data frame apply shadow shadow shadow object created create_shadow() preserve_truth Logical, whether preserve original values (default FALSE) ... Additional arguments passed specific shadow methods","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a shadow to data — apply_shadow","text":"Modified data frame","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.item_missingness_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply item-level missingness shadow — apply_shadow.item_missingness_shadow","title":"Apply item-level missingness shadow — apply_shadow.item_missingness_shadow","text":"Apply item-level missingness shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.item_missingness_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply item-level missingness shadow — apply_shadow.item_missingness_shadow","text":"","code":"# S3 method for class 'item_missingness_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.item_missingness_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply item-level missingness shadow — apply_shadow.item_missingness_shadow","text":"data Data frame apply shadow shadow item missingness shadow object created create_item_missingness_shadow() ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.item_missingness_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply item-level missingness shadow — apply_shadow.item_missingness_shadow","text":"Modified data frame missing values introduced","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.measurement_error_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply measurement error shadow — apply_shadow.measurement_error_shadow","title":"Apply measurement error shadow — apply_shadow.measurement_error_shadow","text":"Apply measurement error shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.measurement_error_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply measurement error shadow — apply_shadow.measurement_error_shadow","text":"","code":"# S3 method for class 'measurement_error_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.measurement_error_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply measurement error shadow — apply_shadow.measurement_error_shadow","text":"data Data frame apply shadow shadow measurement error shadow object created create_shadow() ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.measurement_error_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply measurement error shadow — apply_shadow.measurement_error_shadow","text":"Modified data frame measurement error applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.mode_effects_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply mode effects shadow — apply_shadow.mode_effects_shadow","title":"Apply mode effects shadow — apply_shadow.mode_effects_shadow","text":"Apply mode effects shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.mode_effects_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply mode effects shadow — apply_shadow.mode_effects_shadow","text":"","code":"# S3 method for class 'mode_effects_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.mode_effects_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply mode effects shadow — apply_shadow.mode_effects_shadow","text":"data Data frame apply shadow shadow mode effects shadow object ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.mode_effects_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply mode effects shadow — apply_shadow.mode_effects_shadow","text":"Data frame mode effects applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.positivity_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply positivity violation shadow — apply_shadow.positivity_shadow","title":"Apply positivity violation shadow — apply_shadow.positivity_shadow","text":"Apply positivity violation shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.positivity_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply positivity violation shadow — apply_shadow.positivity_shadow","text":"","code":"# S3 method for class 'positivity_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.positivity_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply positivity violation shadow — apply_shadow.positivity_shadow","text":"data Data frame apply shadow shadow positivity shadow object created create_positivity_shadow() ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.positivity_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply positivity violation shadow — apply_shadow.positivity_shadow","text":"Filtered data frame positivity violations removed","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.selection_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply selection bias shadow — apply_shadow.selection_shadow","title":"Apply selection bias shadow — apply_shadow.selection_shadow","text":"Apply selection bias shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.selection_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply selection bias shadow — apply_shadow.selection_shadow","text":"","code":"# S3 method for class 'selection_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.selection_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply selection bias shadow — apply_shadow.selection_shadow","text":"data Data frame apply shadow shadow selection shadow object created create_shadow() ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.selection_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply selection bias shadow — apply_shadow.selection_shadow","text":"Subset data frame selection bias applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.truncation_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply truncation shadow — apply_shadow.truncation_shadow","title":"Apply truncation shadow — apply_shadow.truncation_shadow","text":"Apply truncation shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.truncation_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply truncation shadow — apply_shadow.truncation_shadow","text":"","code":"# S3 method for class 'truncation_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.truncation_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply truncation shadow — apply_shadow.truncation_shadow","text":"data Data frame apply shadow shadow truncation shadow object ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.truncation_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply truncation shadow — apply_shadow.truncation_shadow","text":"Data frame truncation applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply multiple shadows sequentially — apply_shadows","title":"Apply multiple shadows sequentially — apply_shadows","text":"Apply multiple shadows sequentially","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply multiple shadows sequentially — apply_shadows","text":"","code":"apply_shadows(data, shadows, verbose = FALSE, preserve_truth = FALSE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply multiple shadows sequentially — apply_shadows","text":"data Data frame shadows List shadow objects verbose Logical, print progress? preserve_truth Logical, whether preserve original values (default FALSE)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply multiple shadows sequentially — apply_shadows","text":"Data frame shadows applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply shadows with dependency management — apply_shadows_with_dependencies","title":"Apply shadows with dependency management — apply_shadows_with_dependencies","text":"Apply shadows dependency management","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply shadows with dependency management — apply_shadows_with_dependencies","text":"","code":"apply_shadows_with_dependencies(   data,   shadows,   reorder = TRUE,   update_params = TRUE )"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply shadows with dependency management — apply_shadows_with_dependencies","text":"data Data apply shadows shadows List shadow objects reorder Logical, whether reorder shadows dependencies update_params Logical, whether update parameters based dependencies","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply shadows with dependency management — apply_shadows_with_dependencies","text":"List shadowed data diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_truth.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for Shadow Application with Dual Data Architecture — apply_shadows_with_truth","title":"Wrapper for Shadow Application with Dual Data Architecture — apply_shadows_with_truth","text":"function provides unified interface applying shadows optionally maintaining complete copy original data.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_truth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for Shadow Application with Dual Data Architecture — apply_shadows_with_truth","text":"","code":"apply_shadows_with_truth(   data,   shadows,   preserve_complete = TRUE,   verbose = FALSE,   ... )"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_truth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for Shadow Application with Dual Data Architecture — apply_shadows_with_truth","text":"data Data frame apply shadows shadows Shadow object list shadow objects preserve_complete Logical, whether return true observed data verbose Logical, print progress messages ... Additional arguments passed shadow methods","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_truth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for Shadow Application with Dual Data Architecture — apply_shadows_with_truth","text":"preserve_complete FALSE, returns shadowed data.   preserve_complete TRUE, returns list : data_true: Original data shadows data_observed: Data shadows applied shadows_applied: List applied shadow names","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as.data.frame.margot_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert scenario to data frame for summary — as.data.frame.margot_scenario","title":"Convert scenario to data frame for summary — as.data.frame.margot_scenario","text":"Convert scenario data frame summary","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as.data.frame.margot_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert scenario to data frame for summary — as.data.frame.margot_scenario","text":"","code":"# S3 method for class 'margot_scenario' as.data.frame(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/as.data.frame.margot_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert scenario to data frame for summary — as.data.frame.margot_scenario","text":"x margot_scenario object ... Additional arguments","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as.data.frame.margot_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert scenario to data frame for summary — as.data.frame.margot_scenario","text":"data frame scenario information","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as.data.frame.margot_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert shadow to data frame for summary — as.data.frame.margot_shadow","title":"Convert shadow to data frame for summary — as.data.frame.margot_shadow","text":"Convert shadow data frame summary","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as.data.frame.margot_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert shadow to data frame for summary — as.data.frame.margot_shadow","text":"","code":"# S3 method for class 'margot_shadow' as.data.frame(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/as.data.frame.margot_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert shadow to data frame for summary — as.data.frame.margot_shadow","text":"x margot_shadow object ... Additional arguments","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as.data.frame.margot_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert shadow to data frame for summary — as.data.frame.margot_shadow","text":"data frame shadow information","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert old-style scenario to S3 — as_scenario","title":"Convert old-style scenario to S3 — as_scenario","text":"Converts scenarios created old interface proper S3 objects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert old-style scenario to S3 — as_scenario","text":"","code":"as_scenario(old_scenario)"},{"path":"https://go-bayes.github.io/margot.sim/reference/as_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert old-style scenario to S3 — as_scenario","text":"old_scenario List-based scenario old interface","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert old-style scenario to S3 — as_scenario","text":"validated margot_scenario S3 object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert old-style shadow to S3 — as_shadow","title":"Convert old-style shadow to S3 — as_shadow","text":"Converts shadows created old interface proper S3 objects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert old-style shadow to S3 — as_shadow","text":"","code":"as_shadow(old_shadow)"},{"path":"https://go-bayes.github.io/margot.sim/reference/as_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert old-style shadow to S3 — as_shadow","text":"old_shadow List-based shadow old interface","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/as_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert old-style shadow to S3 — as_shadow","text":"validated margot_shadow S3 object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/c.margot_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple shadows into a list — c.margot_shadow","title":"Combine multiple shadows into a list — c.margot_shadow","text":"Combine multiple shadows list","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/c.margot_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple shadows into a list — c.margot_shadow","text":"","code":"# S3 method for class 'margot_shadow' c(...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/c.margot_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple shadows into a list — c.margot_shadow","text":"... Shadow objects combine","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/c.margot_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple shadows into a list — c.margot_shadow","text":"list validated shadow objects class \"shadow_list\"","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/calculate_performance_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate performance metrics from MC results — calculate_performance_metrics","title":"Calculate performance metrics from MC results — calculate_performance_metrics","text":"Calculate performance metrics MC results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/calculate_performance_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate performance metrics from MC results — calculate_performance_metrics","text":"","code":"calculate_performance_metrics(results_df)"},{"path":"https://go-bayes.github.io/margot.sim/reference/check_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a variable follows a specified distribution — check_distribution","title":"Check if a variable follows a specified distribution — check_distribution","text":"Check variable follows specified distribution","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a variable follows a specified distribution — check_distribution","text":"","code":"check_distribution(x, dist, plot = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/check_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a variable follows a specified distribution — check_distribution","text":"x Vector values dist Distribution specification family name plot Logical, create diagnostic plot?","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a variable follows a specified distribution — check_distribution","text":"List test results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positive_definite.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and fix positive definiteness of a covariance matrix — check_positive_definite","title":"Check and fix positive definiteness of a covariance matrix — check_positive_definite","text":"Check fix positive definiteness covariance matrix","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positive_definite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and fix positive definiteness of a covariance matrix — check_positive_definite","text":"","code":"check_positive_definite(mat, tol = 1e-08)"},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Check positivity of treatment probabilities — check_positivity","title":"Check positivity of treatment probabilities — check_positivity","text":"Check positivity treatment probabilities","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check positivity of treatment probabilities — check_positivity","text":"","code":"check_positivity(treatment_probs, trt_name, time, min_prob = 0.01)"},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positivity_empirical.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical positivity check — check_positivity_empirical","title":"Empirical positivity check — check_positivity_empirical","text":"Empirical positivity check","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positivity_empirical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical positivity check — check_positivity_empirical","text":"","code":"check_positivity_empirical(   data,   treatment,   covariates,   treatment_vals,   threshold )"},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positivity_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based positivity check — check_positivity_model","title":"Model-based positivity check — check_positivity_model","text":"Model-based positivity check","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positivity_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based positivity check — check_positivity_model","text":"","code":"check_positivity_model(data, treatment, covariates, treatment_vals, threshold)"},{"path":"https://go-bayes.github.io/margot.sim/reference/check_shadow_ordering.html","id":null,"dir":"Reference","previous_headings":"","what":"Check shadow ordering for dependencies — check_shadow_ordering","title":"Check shadow ordering for dependencies — check_shadow_ordering","text":"Check shadow ordering dependencies","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_shadow_ordering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check shadow ordering for dependencies — check_shadow_ordering","text":"","code":"check_shadow_ordering(shadows)"},{"path":"https://go-bayes.github.io/margot.sim/reference/check_shadow_ordering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check shadow ordering for dependencies — check_shadow_ordering","text":"shadows List shadow objects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_shadow_ordering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check shadow ordering for dependencies — check_shadow_ordering","text":"Logical indicating ordering respects dependencies","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_shadows.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complex shadow combining multiple distortions — combine_shadows","title":"Create a complex shadow combining multiple distortions — combine_shadows","text":"Create complex shadow combining multiple distortions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_shadows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complex shadow combining multiple distortions — combine_shadows","text":"","code":"combine_shadows(..., name = \"combined_shadow\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_shadows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complex shadow combining multiple distortions — combine_shadows","text":"... Individual shadow objects combine name Name combined shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_shadows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complex shadow combining multiple distortions — combine_shadows","text":"composite shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_mc_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare multiple Monte Carlo results — compare_mc_results","title":"Compare multiple Monte Carlo results — compare_mc_results","text":"Compare multiple Monte Carlo results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_mc_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare multiple Monte Carlo results — compare_mc_results","text":"","code":"compare_mc_results(..., names = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_mc_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare multiple Monte Carlo results — compare_mc_results","text":"... Multiple margot_mc_results objects names Optional names result set","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_mc_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare multiple Monte Carlo results — compare_mc_results","text":"Comparison object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_scenarios.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare causal effects across scenarios — compare_scenarios","title":"Compare causal effects across scenarios — compare_scenarios","text":"Compares causal effect estimate across different scenarios assess sensitivity assumptions.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_scenarios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare causal effects across scenarios — compare_scenarios","text":"","code":"compare_scenarios(   data,   scenarios,   exposure,   outcome,   estimands = c(\"ate\", \"att\", \"atu\"),   verbose = FALSE )"},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_scenarios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare causal effects across scenarios — compare_scenarios","text":"data Data frame true data scenarios List scenario objects compare exposure Character, name exposure variable outcome Character, name outcome variable estimands Character vector estimands compute verbose Logical, whether print progress","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_scenarios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare causal effects across scenarios — compare_scenarios","text":"scenario comparison object containing effects scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_scenarios.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare causal effects across scenarios — compare_scenarios","text":"","code":"# create data sim_data <- margot_simulate(n = 1000, waves = 2)  # define scenarios scenarios <- list(   oracle = create_scenario(\"Oracle\", shadows = list()),   realistic = create_scenario(     \"Realistic\",     shadows = list(       create_shadow(         type = \"measurement_error\",         params = list(           variables = \"t1_a\",           error_type = \"misclassification\",           sensitivity = 0.85,           specificity = 0.90         )       )     )   ) )  # compare scenarios comparison <- compare_scenarios(   sim_data,   scenarios,   exposure = \"t1_a\",   outcome = \"t2_y\" )  print(comparison) #> Scenario Comparison Results #> =========================== #> Exposure: t1_a #> Outcome: t2_y #> Number of scenarios: 2 #>  #>   Scenario N_Shadows   ATE   ATT   ATU #>     oracle         0 0.395 0.395 0.395 #>  realistic         1 0.383 0.383 0.383 #>  #> Sensitivity Analysis: #>   ATE range: [0.383, 0.395] #>     Bias from oracle: #>       realistic: -0.012 (-3%) #>   ATT range: [0.383, 0.395] #>     Bias from oracle: #>       realistic: -0.012 (-3%) #>   ATU range: [0.383, 0.395] #>     Bias from oracle: #>       realistic: -0.012 (-3%)"},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","title":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","text":"Compares causal effect estimates true (unshadowed) data estimates observed (shadowed) data quantify bias introduced observational distortions.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","text":"","code":"compare_shadow_bias(effects_true, effects_observed, include_relative = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","text":"effects_true list true causal effects (compute_causal_effects) effects_observed list observed causal effects (compute_causal_effects) include_relative Logical, whether include relative bias (default TRUE)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","text":"data frame bias metrics estimand: estimand: causal estimand (ate, att, atu) truth: True value estimand observed: Observed value estimand bias: Absolute bias (observed - truth) relative_bias: Relative bias percentage truth","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","text":"","code":"# Simulate true and observed effects true_effects <- list(ate = 0.5, att = 0.6, atu = 0.4) obs_effects <- list(ate = 0.3, att = 0.35, atu = 0.25)  # Compare bias bias_summary <- compare_shadow_bias(true_effects, obs_effects) print(bias_summary) #> Shadow Bias Comparison: #>  #>  estimand truth observed  bias relative_bias #>       ate   0.5     0.30 -0.20          -40% #>       att   0.6     0.35 -0.25        -41.7% #>       atu   0.4     0.25 -0.15        -37.5%"},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Effects Before and After Shadows — compare_shadow_effects","title":"Compare Effects Before and After Shadows — compare_shadow_effects","text":"Convenience function computes causal effects true observed data shadow result object.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Effects Before and After Shadows — compare_shadow_effects","text":"","code":"compare_shadow_effects(   shadow_result,   wave = 1,   outcome_wave = NULL,   treatment_name = \"a\",   outcome_name = \"y\",   estimands = c(\"ate\", \"att\", \"atu\"),   ... )"},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Effects Before and After Shadows — compare_shadow_effects","text":"shadow_result margot_shadow_result object wave Treatment wave outcome_wave Outcome wave treatment_name Treatment variable name outcome_name Outcome variable name estimands estimands compute ... Additional arguments passed compute_effects_from_sim","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Effects Before and After Shadows — compare_shadow_effects","text":"list : effects_true: Effects true data effects_observed: Effects observed data comparison: Bias comparison table","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_causal_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Causal Effects from Data — compute_causal_effects","title":"Compute Causal Effects from Data — compute_causal_effects","text":"Calculates various causal estimands (ATE, ATT, ATU) simulated observed data. function assumes data contains potential outcomes can used compute contrasts treatment groups.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_causal_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Causal Effects from Data — compute_causal_effects","text":"","code":"compute_causal_effects(   data,   exposure,   outcome,   covariates = NULL,   estimands = c(\"ate\", \"att\", \"atu\"),   weights = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_causal_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Causal Effects from Data — compute_causal_effects","text":"data data frame containing outcome exposure variables exposure Character string naming exposure/treatment variable outcome Character string naming outcome variable covariates Character vector covariate names (currently unused, future HTE) estimands Character vector specifying estimands compute weights Optional weights observation","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_causal_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Causal Effects from Data — compute_causal_effects","text":"list containing requested causal effects: ate: Average Treatment Effect E[Y(1) - Y(0)] att: Average Treatment Treated E[Y(1) - Y(0) | = 1] atu: Average Treatment Untreated E[Y(1) - Y(0) | = 0]","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_causal_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Causal Effects from Data — compute_causal_effects","text":"","code":"# Generate simple data set.seed(123) n <- 1000 data <- data.frame(   a = rbinom(n, 1, 0.5),   y = rnorm(n, mean = 2) ) data$y[data$a == 1] <- data$y[data$a == 1] + 0.5  # True ATE = 0.5  # Compute effects effects <- compute_causal_effects(data, exposure = \"a\", outcome = \"y\") print(effects) #> Causal Effect Estimates: #>   N (total): 1000 [Treated: 493, Control: 507] #>   ATE: 0.503 #>   ATT: 0.503 #>   ATU: 0.503"},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_effects_from_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Causal Effects from Margot Simulation Data — compute_effects_from_sim","title":"Compute Causal Effects from Margot Simulation Data — compute_effects_from_sim","text":"Wrapper function extracts treatment outcome margot simulation data structure computes causal effects.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_effects_from_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Causal Effects from Margot Simulation Data — compute_effects_from_sim","text":"","code":"compute_effects_from_sim(   sim_data,   wave = 1,   outcome_wave = NULL,   treatment_name = \"a\",   outcome_name = \"y\",   estimands = c(\"ate\", \"att\", \"atu\"),   weights = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_effects_from_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Causal Effects from Margot Simulation Data — compute_effects_from_sim","text":"sim_data Data margot_simulate margot_simulate_causal wave Treatment wave (default 1) outcome_wave Outcome wave (default last wave) treatment_name Name treatment variable outcome_name Name outcome variable estimands estimands compute weights Optional weights","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_effects_from_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Causal Effects from Margot Simulation Data — compute_effects_from_sim","text":"margot_effects object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_true_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute true causal effects from simulated data — compute_true_effects","title":"Compute true causal effects from simulated data — compute_true_effects","text":"Compute true causal effects simulated data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_true_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute true causal effects from simulated data — compute_true_effects","text":"","code":"compute_true_effects(data_list, outcome_name, estimand = \"ATE\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_coarsening_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a coarsening shadow — create_coarsening_shadow","title":"Create a coarsening shadow — create_coarsening_shadow","text":"Creates shadow converts continuous data categorical bins, simulating loss precision data collection privacy-preserving data release.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_coarsening_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a coarsening shadow — create_coarsening_shadow","text":"","code":"create_coarsening_shadow(   variables,   breaks,   labels = NULL,   type = c(\"midpoint\", \"lower\", \"upper\", \"random\", \"heaping\"),   heaping_digits = c(0, 5),   heaping_prob = 0.7,   include_lowest = TRUE,   right = TRUE,   name = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_coarsening_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a coarsening shadow — create_coarsening_shadow","text":"variables Character vector variable names coarsen breaks Either numeric vector break points single number giving number intervals labels Character vector labels bins (optional) type Character string specifying handle values within bins: \"midpoint\" (bin centres), \"lower\" (left edge), \"upper\" (right edge), \"random\" (uniform within bin), \"heaping\" (digit preference patterns) heaping_digits Numeric vector preferred final digits type=\"heaping\" (default c(0, 5) rounding 0s 5s) heaping_prob Probability heaping type=\"heaping\" (default 0.7) include_lowest Logical, whether include lowest value first bin right Logical, whether intervals closed right name Optional name shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_coarsening_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a coarsening shadow — create_coarsening_shadow","text":"coarsening shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_coarsening_shadow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a coarsening shadow — create_coarsening_shadow","text":"","code":"# create age group coarsening coarsen_age <- create_coarsening_shadow(   variables = \"age\",   breaks = c(0, 18, 25, 35, 45, 55, 65, Inf),   labels = c(\"<18\", \"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\"),   type = \"midpoint\" )  # create income brackets with heaping at round numbers coarsen_income <- create_coarsening_shadow(   variables = c(\"income_self\", \"income_spouse\"),   breaks = c(0, 25000, 50000, 75000, 100000, 150000, Inf),   type = \"heaping\",   heaping_digits = c(0),  # heap at multiples of 10000   heaping_prob = 0.8 )  # create 5-point likert scale from continuous coarsen_satisfaction <- create_coarsening_shadow(   variables = \"satisfaction_score\",   breaks = 5,  # 5 equal intervals   type = \"lower\",  # assume people pick lowest qualifying option   labels = c(\"Very Unsatisfied\", \"Unsatisfied\", \"Neutral\",               \"Satisfied\", \"Very Satisfied\") )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_data_summarizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Memory Management Utilities for Monte Carlo Simulations — create_data_summarizer","title":"Memory Management Utilities for Monte Carlo Simulations — create_data_summarizer","text":"Functions help manage memory usage large Monte Carlo simulations, including data summarization, streaming results, memory monitoring. Create summary function data reduction","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_data_summarizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Memory Management Utilities for Monte Carlo Simulations — create_data_summarizer","text":"","code":"create_data_summarizer(stats = c(\"mean\", \"sd\", \"quantiles\"), vars = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_data_summarizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Memory Management Utilities for Monte Carlo Simulations — create_data_summarizer","text":"stats Character vector statistics compute vars Character vector variables summarize (NULL )","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_data_summarizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Memory Management Utilities for Monte Carlo Simulations — create_data_summarizer","text":"Function summarizes data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_data_summarizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Memory Management Utilities for Monte Carlo Simulations — create_data_summarizer","text":"","code":"# Create a summarizer that computes means and SDs summarizer <- create_data_summarizer(   stats = c(\"mean\", \"sd\", \"quantiles\"),   vars = c(\"y\", \"a\") )  # Use in Monte Carlo if (FALSE) { # \\dontrun{ results <- margot_monte_carlo(   n_reps = 1000,   n_per_rep = 100,   dgp_params = list(     waves = 2,     treatments = \"a\",     interventions = list(       natural = function(data, time, trt) data[[trt]],       shifted = function(data, time, trt) pmin(data[[trt]] + 1, 2)     )   ),   estimator_fn = function(data) list(estimate = mean(data$t2_y)),   summarize_fn = summarizer ) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Flexible Distribution Specifications for margot — create_distribution","title":"Flexible Distribution Specifications for margot — create_distribution","text":"file implements system specifying custom distributions data generating process, allowing skewed, heavy-tailed, non-normal distributions. Create distribution specification","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flexible Distribution Specifications for margot — create_distribution","text":"","code":"create_distribution(   family,   params = list(),   link = NULL,   inverse_link = NULL,   name = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flexible Distribution Specifications for margot — create_distribution","text":"family Distribution family name custom function params Named list distribution parameters link Link function transforming linear predictor scale inverse_link Inverse link function name Optional name distribution","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flexible Distribution Specifications for margot — create_distribution","text":"Distribution specification object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flexible Distribution Specifications for margot — create_distribution","text":"","code":"# Normal distribution dist_normal <- create_distribution(\"normal\", params = list(sd = 1))  # Log-normal via transformation dist_lognormal <- create_distribution(   \"normal\",   params = list(sd = 0.5),   inverse_link = exp )  # Beta distribution for bounded variables dist_beta <- create_distribution(   \"beta\",   params = list(shape1 = 2, shape2 = 5) )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_diagnostic_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create diagnostic plot for distribution — create_distribution_diagnostic_plot","title":"Create diagnostic plot for distribution — create_distribution_diagnostic_plot","text":"Create diagnostic plot distribution","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_diagnostic_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create diagnostic plot for distribution — create_distribution_diagnostic_plot","text":"","code":"create_distribution_diagnostic_plot(x, family)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of distributions for different variable types — create_distribution_set","title":"Create a set of distributions for different variable types — create_distribution_set","text":"Create set distributions different variable types","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of distributions for different variable types — create_distribution_set","text":"","code":"create_distribution_set(   baseline = NULL,   exposure = NULL,   outcome = NULL,   confounder = NULL,   error = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of distributions for different variable types — create_distribution_set","text":"baseline Distribution baseline covariates exposure Distribution exposure/treatment outcome Distribution outcome confounder Distribution time-varying confounders error Distribution error terms","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of distributions for different variable types — create_distribution_set","text":"Distribution set object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_ips_intervention.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Incremental propensity score interventions — create_ips_intervention","title":"Example: Incremental propensity score interventions — create_ips_intervention","text":"Example: Incremental propensity score interventions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_ips_intervention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Incremental propensity score interventions — create_ips_intervention","text":"","code":"create_ips_intervention(delta, start_wave = 1)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_ips_intervention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example: Incremental propensity score interventions — create_ips_intervention","text":"delta Multiplicative shift odds treatment start_wave Wave start intervention","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_ips_intervention.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Incremental propensity score interventions — create_ips_intervention","text":"Function suitable use intervention margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_ips_intervention.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example: Incremental propensity score interventions — create_ips_intervention","text":"","code":"# Increase odds of treatment by 20% ips_intervention <- create_ips_intervention(delta = 1.2)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create item-level missingness shadow — create_item_missingness_shadow","title":"Create item-level missingness shadow — create_item_missingness_shadow","text":"Create item-level missingness shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create item-level missingness shadow — create_item_missingness_shadow","text":"","code":"create_item_missingness_shadow(   variables,   missing_rate,   missing_mechanism = c(\"MCAR\", \"MAR\", \"MNAR\"),   dependent_vars = NULL,   name = \"item_missingness\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create item-level missingness shadow — create_item_missingness_shadow","text":"variables Character vector variables apply missingness missing_rate Numeric. Overall missing rate (0-1) missing_mechanism Character. One \"MCAR\", \"MAR\", \"MNAR\" dependent_vars Character vector. Variables influence missingness (MAR/MNAR) name Optional name shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create item-level missingness shadow — create_item_missingness_shadow","text":"Item missingness shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_lmtp_style_shifts.html","id":null,"dir":"Reference","previous_headings":"","what":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","title":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","text":"Example shift interventions matching lmtp style","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_lmtp_style_shifts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","text":"","code":"create_lmtp_style_shifts(   min_score = 1,   max_score = 7,   baseline_wave = 0,   shift_wave = 1 )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_lmtp_style_shifts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","text":"min_score Minimum score value max_score Maximum score value baseline_wave Wave keep observed (typically 0) shift_wave Wave apply shift (typically 1)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_lmtp_style_shifts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","text":"List containing shift_up shift_down intervention functions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_lmtp_style_shifts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","text":"","code":"# Create lmtp-style shift interventions shifts <- create_lmtp_style_shifts(   min_score = 1,   max_score = 7,   baseline_wave = 0,   shift_wave = 1 )  # Use in margot_simulate_causal if (FALSE) { # \\dontrun{ results <- margot_simulate_causal(   n = 1000,   waves = 2,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]],     shift_up = shifts$shift_up,     shift_down = shifts$shift_down   ) ) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mc_streamer.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream Monte Carlo results to disk — create_mc_streamer","title":"Stream Monte Carlo results to disk — create_mc_streamer","text":"Stream Monte Carlo results disk","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mc_streamer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream Monte Carlo results to disk — create_mc_streamer","text":"","code":"create_mc_streamer(file_path, batch_size = 100)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mc_streamer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream Monte Carlo results to disk — create_mc_streamer","text":"file_path Path output file batch_size Number results accumulate writing","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mc_streamer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stream Monte Carlo results to disk — create_mc_streamer","text":"List write finalize functions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_memory_monitor.html","id":null,"dir":"Reference","previous_headings":"","what":"Monitor memory usage during simulation — create_memory_monitor","title":"Monitor memory usage during simulation — create_memory_monitor","text":"Monitor memory usage simulation","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_memory_monitor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monitor memory usage during simulation — create_memory_monitor","text":"","code":"create_memory_monitor(interval = 10, threshold = 1000)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_memory_monitor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monitor memory usage during simulation — create_memory_monitor","text":"interval Check interval seconds threshold Memory threshold MB trigger warning","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_memory_monitor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monitor memory usage during simulation — create_memory_monitor","text":"Function monitors memory","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mode_effects_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a mode effects shadow — create_mode_effects_shadow","title":"Create a mode effects shadow — create_mode_effects_shadow","text":"Creates shadow applies systematic measurement differences based data collection mode (e.g., phone vs -person, self-report vs clinical).","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mode_effects_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a mode effects shadow — create_mode_effects_shadow","text":"","code":"create_mode_effects_shadow(   variables,   mode_var,   effect_specs,   reference_mode = NULL,   name = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mode_effects_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a mode effects shadow — create_mode_effects_shadow","text":"variables Character vector variable names affected mode mode_var Character name variable indicating collection mode effect_specs List specifying effects mode. mode list elements: shift (additive), scale (multiplicative), /noise (additional error SD) reference_mode Character name reference mode (effect applied) name Optional name shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mode_effects_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a mode effects shadow — create_mode_effects_shadow","text":"mode effects shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mode_effects_shadow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a mode effects shadow — create_mode_effects_shadow","text":"","code":"# create mode effects for survey responses mode_shadow <- create_mode_effects_shadow(   variables = c(\"income\", \"health_rating\"),   mode_var = \"survey_mode\",   effect_specs = list(     phone = list(shift = 0.1, scale = 0.95),     # slight underreporting     online = list(shift = -0.05, scale = 1.05),  # slight overreporting     paper = list(shift = 0, scale = 1, noise = 0.2)  # more random error   ),   reference_mode = \"in_person\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mtp_intervention.html","id":null,"dir":"Reference","previous_headings":"","what":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","title":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","text":"Creates interventions depend natural value treatment, similar lmtp package approach.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mtp_intervention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","text":"","code":"create_mtp_intervention(policy, covariate_names = NULL, start_wave = 1)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mtp_intervention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","text":"policy Function takes (natural_value, covariates) returns modified value covariate_names Character vector covariate names consider start_wave Wave start applying policy","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mtp_intervention.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","text":"Function suitable use intervention margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mtp_intervention.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","text":"","code":"# Only treat if natural value > 0 AND covariate L > 0 mtp <- create_mtp_intervention(   policy = function(natural, covars) {     ifelse(natural > 0 & covars$L > 0, natural, 0)   },   covariate_names = \"L\",   start_wave = 1 )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create positivity violation shadow — create_positivity_shadow","title":"Create positivity violation shadow — create_positivity_shadow","text":"Create positivity violation shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create positivity violation shadow — create_positivity_shadow","text":"","code":"create_positivity_shadow(exposure_var, filter_fn, name = \"positivity_filter\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create positivity violation shadow — create_positivity_shadow","text":"exposure_var Character. Name exposure variable filter filter_fn Function takes data returns logical vector valid rows name Optional name shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create positivity violation shadow — create_positivity_shadow","text":"Positivity shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow_from_diagnostic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create positivity shadow based on diagnostics — create_positivity_shadow_from_diagnostic","title":"Create positivity shadow based on diagnostics — create_positivity_shadow_from_diagnostic","text":"Create positivity shadow based diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow_from_diagnostic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create positivity shadow based on diagnostics — create_positivity_shadow_from_diagnostic","text":"","code":"create_positivity_shadow_from_diagnostic(   diagnostic,   method = c(\"trim\", \"truncate\", \"custom\") )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow_from_diagnostic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create positivity shadow based on diagnostics — create_positivity_shadow_from_diagnostic","text":"diagnostic margot_positivity_diagnostic object method create shadow: \"trim\", \"truncate\", \"custom\"","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow_from_diagnostic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create positivity shadow based on diagnostics — create_positivity_shadow_from_diagnostic","text":"Shadow object enforces positivity","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_rng_streams.html","id":null,"dir":"Reference","previous_headings":"","what":"RNG Stream Management for Parallel Monte Carlo — create_rng_streams","title":"RNG Stream Management for Parallel Monte Carlo — create_rng_streams","text":"Implements proper random number generation stream management reproducible parallel Monte Carlo simulations.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_rng_streams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RNG Stream Management for Parallel Monte Carlo — create_rng_streams","text":"","code":"create_rng_streams(n_streams, seed = NULL, kind = \"L'Ecuyer-CMRG\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_rng_streams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RNG Stream Management for Parallel Monte Carlo — create_rng_streams","text":"n_streams Number independent RNG streams needed seed Master seed reproducibility kind RNG kind (default: \"L'Ecuyer-CMRG\" parallel safety)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_rng_streams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RNG Stream Management for Parallel Monte Carlo — create_rng_streams","text":"List RNG stream states","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_rng_streams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RNG Stream Management for Parallel Monte Carlo — create_rng_streams","text":"module ensures : - Monte Carlo replication gets independent RNG stream - Results reproducible regardless parallelisation - Streams overlap replications - results obtained whether run parallel sequential Create RNG streams parallel processing","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_rng_streams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RNG Stream Management for Parallel Monte Carlo — create_rng_streams","text":"","code":"# Create 100 independent streams streams <- create_rng_streams(100, seed = 123)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Scenario Framework for margot — create_scenario","title":"Scenario Framework for margot — create_scenario","text":"file implements scenario abstraction layer bundles shadows justifications systematic sensitivity analyses. Create scenario specification Creates scenario bundles observational shadows documentation assumptions justifications. Scenarios represent different sets assumptions data generated, measured, selected.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scenario Framework for margot — create_scenario","text":"","code":"create_scenario(   name,   shadows = list(),   population = NULL,   description = \"\",   justification = \"\",   references = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scenario Framework for margot — create_scenario","text":"name Character string naming scenario shadows List shadow objects apply population Optional population specification description Character string describing scenario justification Character string explaining assumptions plausible references Optional character vector supporting references","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scenario Framework for margot — create_scenario","text":"scenario object class \"margot_scenario\"","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scenario Framework for margot — create_scenario","text":"","code":"# create a scenario for typical RCT conditions rct_scenario <- create_scenario(   name = \"Typical RCT\",   shadows = list(     measurement = create_shadow(       type = \"measurement_error\",       params = list(         variables = c(\"bp\", \"cholesterol\"),         error_type = \"classical\",         sigma = 0.1       )     ),     dropout = create_shadow(       type = \"censoring\",       params = list(         rate = 0.15,         mechanism = \"MAR\"       )     )   ),   description = \"Typical randomised controlled trial with good measurement\",   justification = \"Based on protocols from major cardiovascular trials\",   references = c(\"NEJM 2019;380:1509-1524\", \"Lancet 2020;395:795-808\") )  # create a scenario for electronic health records ehr_scenario <- create_scenario(   name = \"EHR Data\",   shadows = list(     misclass = create_shadow(       type = \"measurement_error\",       params = list(         variables = \"diagnosis\",         error_type = \"misclassification\",         sensitivity = 0.85,         specificity = 0.95       )     ),     missingness = create_item_missingness_shadow(       variables = c(\"lab_values\", \"vitals\"),       mechanism = \"MAR\",       rate = 0.30,       dependent_vars = c(\"age\", \"severity\")     )   ),   description = \"Electronic health record data with typical limitations\",   justification = \"Validation studies show 85% sensitivity for diagnoses\" ) #> Error in create_item_missingness_shadow(variables = c(\"lab_values\", \"vitals\"),     mechanism = \"MAR\", rate = 0.3, dependent_vars = c(\"age\",         \"severity\")): unused arguments (mechanism = \"MAR\", rate = 0.3)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scm_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SCM diagram — create_scm_diagram","title":"Create SCM diagram — create_scm_diagram","text":"Creates visual representation structural causal model DAG. Can output various formats including text, mermaid, DOT.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scm_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SCM diagram — create_scm_diagram","text":"","code":"create_scm_diagram(   format = c(\"text\", \"mermaid\", \"dot\"),   waves = 3,   show_equations = FALSE,   highlight_path = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scm_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SCM diagram — create_scm_diagram","text":"format Output format: \"text\", \"mermaid\", \"dot\" waves Number waves show show_equations Include structural equations? highlight_path Optional path highlight (e.g., c(\"A1\", \"Y2\"))","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scm_diagram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SCM diagram — create_scm_diagram","text":"Character string diagram specification","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Shadowing Framework for margot — create_shadow","title":"Shadowing Framework for margot — create_shadow","text":"file implements unified shadowing framework applying various observational distortions simulated data, including censoring, measurement error, selection bias. Create shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shadowing Framework for margot — create_shadow","text":"","code":"create_shadow(   type = c(\"censoring\", \"measurement_error\", \"selection\", \"item_missingness\",     \"positivity\", \"truncation\", \"coarsening\", \"mode_effects\"),   params = list(),   name = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shadowing Framework for margot — create_shadow","text":"type Character string specifying shadow type: \"censoring\", \"measurement_error\", \"selection\" params List parameters specific shadow type. measurement_error type: - variables: Character vector variable names apply error - error_type: \"classical\", \"differential\", \"dichotomise\", \"correlated\", \"misclassification\" - \"classical\": sigma (numeric) error standard deviation - \"misclassification\": sensitivity specificity (numeric 0-1) name Optional name shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shadowing Framework for margot — create_shadow","text":"shadow object class attributes method dispatch","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shadow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shadowing Framework for margot — create_shadow","text":"","code":"# Create a classical measurement error shadow shadow <- create_shadow(   type = \"measurement_error\",   params = list(     variables = c(\"t1_l\", \"t2_l\"),     error_type = \"classical\",     sigma = 0.5   ) )  # Create a misclassification shadow for binary variables misclass_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     variables = \"t1_a\",     error_type = \"misclassification\",     sensitivity = 0.85,  # 85% of true positives correctly classified     specificity = 0.90   # 90% of true negatives correctly classified   ) )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shift_intervention.html","id":null,"dir":"Reference","previous_headings":"","what":"Create bounded shift intervention — create_shift_intervention","title":"Create bounded shift intervention — create_shift_intervention","text":"Create bounded shift intervention","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shift_intervention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create bounded shift intervention — create_shift_intervention","text":"","code":"create_shift_intervention(   shift_amount,   min_value = -Inf,   max_value = Inf,   start_wave = 1 )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shift_intervention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create bounded shift intervention — create_shift_intervention","text":"shift_amount Numeric amount shift (positive negative) min_value Minimum allowed value shift max_value Maximum allowed value shift start_wave Wave start shifting (default: 1)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shift_intervention.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create bounded shift intervention — create_shift_intervention","text":"Function suitable use intervention margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shift_intervention.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create bounded shift intervention — create_shift_intervention","text":"","code":"# Shift up by 1, bounded between 1 and 7 shift_up_bounded <- create_shift_intervention(   shift_amount = 1,   min_value = 1,   max_value = 7,   start_wave = 1 )  # Use in simulation if (FALSE) { # \\dontrun{ sim_data <- margot_simulate(   n = 1000,   waves = 3,   exposure_type = \"continuous\",   intervention = shift_up_bounded ) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_threshold_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Create threshold-based shift intervention — create_threshold_shift","title":"Create threshold-based shift intervention — create_threshold_shift","text":"Create threshold-based shift intervention","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_threshold_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create threshold-based shift intervention — create_threshold_shift","text":"","code":"create_threshold_shift(   threshold,   shift_to,   direction = c(\"up\", \"down\"),   start_wave = 1 )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_threshold_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create threshold-based shift intervention — create_threshold_shift","text":"threshold Value /apply shift shift_to Target value shift direction \"\" shift values threshold, \"\" start_wave Wave start shifting","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_threshold_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create threshold-based shift intervention — create_threshold_shift","text":"Function suitable use intervention margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_threshold_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create threshold-based shift intervention — create_threshold_shift","text":"","code":"# Shift values below 1 up to 1 shift_low_values <- create_threshold_shift(   threshold = 1,   shift_to = 1,   direction = \"up\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_truncation_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended Shadow Types for margot — create_truncation_shadow","title":"Extended Shadow Types for margot — create_truncation_shadow","text":"file implements additional shadow types margot package: truncation, coarsening, mode effects shadows. Create truncation shadow Creates shadow truncates values outside specified bounds, simulating measurement instruments limited ranges administrative data thresholds.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_truncation_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended Shadow Types for margot — create_truncation_shadow","text":"","code":"create_truncation_shadow(   variables,   lower = -Inf,   upper = Inf,   type = c(\"simple\", \"boundary\", \"redistribute\"),   name = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_truncation_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended Shadow Types for margot — create_truncation_shadow","text":"variables Character vector variable names truncate lower Numeric lower bound (default -Inf) upper Numeric upper bound (default Inf) type Character string: \"simple\" (values become NA), \"boundary\" (values pile limits), \"redistribute\" (truncated mass redistributed interior) name Optional name shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_truncation_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended Shadow Types for margot — create_truncation_shadow","text":"truncation shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_truncation_shadow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended Shadow Types for margot — create_truncation_shadow","text":"","code":"# create truncation shadow for lab equipment with range 0-300 truncate_cholesterol <- create_truncation_shadow(   variables = \"cholesterol\",   lower = 0,   upper = 300,   type = \"simple\" )  # create truncation shadow for income top-coding truncate_income <- create_truncation_shadow(   variables = c(\"income_wave1\", \"income_wave2\"),   upper = 200000,   type = \"boundary\"  # pile up at boundary )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_wave_specific_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Create wave-specific shift intervention — create_wave_specific_shift","title":"Create wave-specific shift intervention — create_wave_specific_shift","text":"Create wave-specific shift intervention","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_wave_specific_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create wave-specific shift intervention — create_wave_specific_shift","text":"","code":"create_wave_specific_shift(wave_shifts)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_wave_specific_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create wave-specific shift intervention — create_wave_specific_shift","text":"wave_shifts Named list mapping waves shift functions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_wave_specific_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create wave-specific shift intervention — create_wave_specific_shift","text":"Function suitable use intervention margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_wave_specific_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create wave-specific shift intervention — create_wave_specific_shift","text":"","code":"# Different shifts at different waves wave_specific <- create_wave_specific_shift(   wave_shifts = list(     \"0\" = function(x) x,              # No change at baseline     \"1\" = function(x) pmin(x + 1, 7), # Shift up by 1 at wave 1     \"2\" = function(x) pmax(x - 1, 1)  # Shift down by 1 at wave 2   ) )"},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_all_shadows.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnose all shadowing effects — diagnose_all_shadows","title":"Diagnose all shadowing effects — diagnose_all_shadows","text":"Diagnose shadowing effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_all_shadows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnose all shadowing effects — diagnose_all_shadows","text":"","code":"diagnose_all_shadows(data, shadowed_data, shadows)"},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_all_shadows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnose all shadowing effects — diagnose_all_shadows","text":"data Original data shadowed_data Data applying shadows shadows List applied shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_all_shadows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnose all shadowing effects — diagnose_all_shadows","text":"Comprehensive diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_rng_streams.html","id":null,"dir":"Reference","previous_headings":"","what":"Get RNG stream diagnostics — diagnose_rng_streams","title":"Get RNG stream diagnostics — diagnose_rng_streams","text":"Provides diagnostics RNG stream independence","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_rng_streams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get RNG stream diagnostics — diagnose_rng_streams","text":"","code":"diagnose_rng_streams(streams)"},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_rng_streams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get RNG stream diagnostics — diagnose_rng_streams","text":"streams List RNG streams","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_rng_streams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get RNG stream diagnostics — diagnose_rng_streams","text":"Data frame diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_shadowing.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick diagnostic for a shadowed dataset — diagnose_shadowing","title":"Quick diagnostic for a shadowed dataset — diagnose_shadowing","text":"Quick diagnostic shadowed dataset","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_shadowing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick diagnostic for a shadowed dataset — diagnose_shadowing","text":"","code":"diagnose_shadowing(original, shadowed, key_vars = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_shadowing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick diagnostic for a shadowed dataset — diagnose_shadowing","text":"original Original data shadowed Shadowed data key_vars Variables focus ","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/dot-default_sim_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Default simulation parameter values — .default_sim_params","title":"Default simulation parameter values — .default_sim_params","text":"Default simulation parameter values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/dot-default_sim_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default simulation parameter values — .default_sim_params","text":"","code":".default_sim_params()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_basic_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Basic simulation — example_basic_simulation","title":"Example: Basic simulation — example_basic_simulation","text":"Example: Basic simulation","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_basic_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Basic simulation — example_basic_simulation","text":"","code":"example_basic_simulation()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_causal_censoring_bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Causal effects under censoring — example_causal_censoring_bias","title":"Example: Causal effects under censoring — example_causal_censoring_bias","text":"Example: Causal effects censoring","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_causal_censoring_bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Causal effects under censoring — example_causal_censoring_bias","text":"","code":"example_causal_censoring_bias()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_censoring_mechanisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Different censoring mechanisms — example_censoring_mechanisms","title":"Example: Different censoring mechanisms — example_censoring_mechanisms","text":"Example: Different censoring mechanisms","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_censoring_mechanisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Different censoring mechanisms — example_censoring_mechanisms","text":"","code":"example_censoring_mechanisms()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_complete_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrated Examples for margot Extensions — example_complete_workflow","title":"Integrated Examples for margot Extensions — example_complete_workflow","text":"file demonstrates complete workflows using shadowing framework, Monte Carlo simulations, flexible distributions together. Complete workflow: Evaluating TMLE complex shadowing example demonstrates: 1. Setting realistic DGP non-normal distributions 2. Applying multiple types shadows (censoring + measurement error) 3. Evaluating estimator (TMLE) via Monte Carlo 4. Comparing performance different shadowing scenarios Comprehensive example showing: - Sampling weights create target population - Multiple interventions causal contrasts - Post-hoc censoring creating observed data - Bias analysis censoring","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_complete_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrated Examples for margot Extensions — example_complete_workflow","text":"","code":"example_complete_workflow()  example_complete_workflow()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_complete_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrated Examples for margot Extensions — example_complete_workflow","text":"margot_causal_sim object results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_dynamic_interventions.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Dynamic treatment strategies — example_dynamic_interventions","title":"Example: Dynamic treatment strategies — example_dynamic_interventions","text":"Example: Dynamic treatment strategies","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_dynamic_interventions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Dynamic treatment strategies — example_dynamic_interventions","text":"","code":"example_dynamic_interventions()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_flexible_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Simulate with different distributions — example_flexible_distributions","title":"Example: Simulate with different distributions — example_flexible_distributions","text":"Example: Simulate different distributions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_flexible_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Simulate with different distributions — example_flexible_distributions","text":"","code":"example_flexible_distributions()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_heterogeneous_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","title":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","text":"Demonstrates simulate analyze treatment effect heterogeneity baseline covariates, baseline outcome, baseline exposure.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_heterogeneous_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","text":"","code":"example_heterogeneous_effects(   n = 2000,   waves = 2,   seed = 2025,   plot = TRUE,   verbose = TRUE )"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_heterogeneous_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","text":"n Sample size (default 2000) waves Number waves (default 2) seed Random seed (default 2025) plot Logical, whether create diagnostic plots (default TRUE) verbose Logical, whether print results (default TRUE)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_heterogeneous_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","text":"List containing simulated data heterogeneity analysis","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_heterogeneous_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","text":"","code":"if (FALSE) { # \\dontrun{ # Run heterogeneity analysis het_results <- example_heterogeneous_effects()  # Access the data dat <- het_results$data  # See heterogeneity by b1 het_results$het_by_b1 } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_long_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Long format data — example_long_format","title":"Example: Long format data — example_long_format","text":"Example: Long format data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_long_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Long format data — example_long_format","text":"","code":"example_long_format()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_mc_measurement_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Evaluate estimator under measurement error — example_mc_measurement_error","title":"Example: Evaluate estimator under measurement error — example_mc_measurement_error","text":"Example: Evaluate estimator measurement error","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_mc_measurement_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Evaluate estimator under measurement error — example_mc_measurement_error","text":"","code":"example_mc_measurement_error()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_measurement_error_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Practical example: Impact of measurement error on different estimators — example_measurement_error_comparison","title":"Practical example: Impact of measurement error on different estimators — example_measurement_error_comparison","text":"Compares different estimators (OLS, IPW, G-computation) perform increasing levels measurement error","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_measurement_error_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Practical example: Impact of measurement error on different estimators — example_measurement_error_comparison","text":"","code":"example_measurement_error_comparison()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_multiple_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Multiple correlated outcomes — example_multiple_outcomes","title":"Example: Multiple correlated outcomes — example_multiple_outcomes","text":"Example: Multiple correlated outcomes","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_multiple_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Multiple correlated outcomes — example_multiple_outcomes","text":"","code":"example_multiple_outcomes()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_sampling_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Sampling weights — example_sampling_weights","title":"Example: Sampling weights — example_sampling_weights","text":"Example: Sampling weights","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_sampling_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Sampling weights — example_sampling_weights","text":"","code":"example_sampling_weights()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_bias_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","title":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","text":"example demonstrates complete workflow analyzing observational shadows affect causal effect estimation.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_bias_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","text":"","code":"example_shadow_bias_analysis(n = 1000, seed = 2024, verbose = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_bias_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","text":"n Sample size (default 1000) seed Random seed reproducibility verbose Print progress messages","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_bias_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","text":"list containing simulation results bias analysis","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_bias_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","text":"","code":"if (FALSE) { # \\dontrun{ # Run the example results <- example_shadow_bias_analysis()  # View the bias comparison print(results$comparison) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_scenarios.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Multiple Shadow Scenarios — example_shadow_scenarios","title":"Example: Multiple Shadow Scenarios — example_shadow_scenarios","text":"Demonstrates different shadow combinations affect bias.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_scenarios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Multiple Shadow Scenarios — example_shadow_scenarios","text":"","code":"example_shadow_scenarios(n = 500, scenarios = NULL, verbose = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_scenarios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example: Multiple Shadow Scenarios — example_shadow_scenarios","text":"n Sample size scenarios List shadow scenarios compare verbose Print progress","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_scenarios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Multiple Shadow Scenarios — example_shadow_scenarios","text":"Data frame comparing bias across scenarios","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadows.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Create and apply various shadows — example_shadows","title":"Example: Create and apply various shadows — example_shadows","text":"Example: Create apply various shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Create and apply various shadows — example_shadows","text":"","code":"example_shadows()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_test_censoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Test censoring indicators — example_test_censoring","title":"Example: Test censoring indicators — example_test_censoring","text":"Demonstrates censoring indicators work validates censoring logic showing future data NA not_lost indicator 0.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_test_censoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Test censoring indicators — example_test_censoring","text":"","code":"example_test_censoring()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_test_censoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Test censoring indicators — example_test_censoring","text":"List original censored data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_weighted_shadow_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","title":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","text":"Demonstrates sampling weights interact shadow bias analysis, showing effects source population weighted target population.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_weighted_shadow_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","text":"","code":"example_weighted_shadow_analysis(n = 800, seed = 2025, verbose = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_weighted_shadow_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","text":"n Sample size seed Random seed verbose Print progress","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_weighted_shadow_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","text":"List weighted unweighted comparisons","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_weighted_shadow_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","text":"","code":"if (FALSE) { # \\dontrun{ # Run weighted analysis results <- example_weighted_shadow_analysis()  # Compare weighted vs unweighted bias print(results$comparison_weighted) print(results$comparison_unweighted) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/extract_treatment_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Treatment and Outcome for Causal Effect Computation — extract_treatment_outcome","title":"Extract Treatment and Outcome for Causal Effect Computation — extract_treatment_outcome","text":"Helper function extract treatment outcome variables margot simulation data structure proper time indexing.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/extract_treatment_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Treatment and Outcome for Causal Effect Computation — extract_treatment_outcome","text":"","code":"extract_treatment_outcome(   data,   wave = 1,   outcome_wave = NULL,   treatment_name = \"a\",   outcome_name = \"y\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/extract_treatment_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Treatment and Outcome for Causal Effect Computation — extract_treatment_outcome","text":"data Data frame margot simulation wave wave use treatment (default first wave) outcome_wave wave use outcome (default last wave) treatment_name Name treatment variable (without time prefix) outcome_name Name outcome variable (without time prefix)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/extract_treatment_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Treatment and Outcome for Causal Effect Computation — extract_treatment_outcome","text":"data frame columns '' (treatment) 'y' (outcome)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.custom_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate from custom distribution function — generate_from_dist.custom_distribution","title":"Generate from custom distribution function — generate_from_dist.custom_distribution","text":"Generate custom distribution function","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.custom_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate from custom distribution function — generate_from_dist.custom_distribution","text":"","code":"# S3 method for class 'custom_distribution' generate_from_dist(dist, n, linear_predictor = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.custom_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate from custom distribution function — generate_from_dist.custom_distribution","text":"dist custom distribution object n Number values generate linear_predictor Optional linear predictor values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.custom_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate from custom distribution function — generate_from_dist.custom_distribution","text":"Vector generated values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate values from a distribution specification — generate_from_dist","title":"Generate values from a distribution specification — generate_from_dist","text":"Generate values distribution specification","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate values from a distribution specification — generate_from_dist","text":"","code":"generate_from_dist(dist, n, linear_predictor = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate values from a distribution specification — generate_from_dist","text":"dist Distribution specification n Number values generate linear_predictor Optional linear predictor values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate values from a distribution specification — generate_from_dist","text":"Vector generated values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.parametric_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate from parametric distribution — generate_from_dist.parametric_distribution","title":"Generate from parametric distribution — generate_from_dist.parametric_distribution","text":"Generate parametric distribution","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.parametric_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate from parametric distribution — generate_from_dist.parametric_distribution","text":"","code":"# S3 method for class 'parametric_distribution' generate_from_dist(dist, n, linear_predictor = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.parametric_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate from parametric distribution — generate_from_dist.parametric_distribution","text":"dist parametric distribution object n Number values generate linear_predictor Optional linear predictor values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.parametric_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate from parametric distribution — generate_from_dist.parametric_distribution","text":"Vector generated values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_default_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default link functions for distribution families — get_default_links","title":"Get default link functions for distribution families — get_default_links","text":"Get default link functions distribution families","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_default_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default link functions for distribution families — get_default_links","text":"","code":"get_default_links(family)"},{"path":"https://go-bayes.github.io/margot.sim/reference/get_memory_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get memory usage statistics — get_memory_stats","title":"Get memory usage statistics — get_memory_stats","text":"Get memory usage statistics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_memory_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get memory usage statistics — get_memory_stats","text":"","code":"get_memory_stats()"},{"path":"https://go-bayes.github.io/margot.sim/reference/get_memory_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get memory usage statistics — get_memory_stats","text":"Data frame memory statistics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_shadow_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Shadow Dependency System — get_shadow_dependencies","title":"Shadow Dependency System — get_shadow_dependencies","text":"Implements system tracking managing dependencies shadows. shadows affect parameters behavior shadows.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_shadow_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shadow Dependency System — get_shadow_dependencies","text":"","code":"get_shadow_dependencies()"},{"path":"https://go-bayes.github.io/margot.sim/reference/get_shadow_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shadow Dependency System — get_shadow_dependencies","text":"List defining shadows depend others","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_shadow_dependencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shadow Dependency System — get_shadow_dependencies","text":"Examples shadow dependencies: - Truncation affects variance available measurement error - Censoring affects units available selection - Mode effects may interact measurement error - Positivity violations affect downstream shadows Define shadow dependency relationships","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_time_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract time index from variable name — get_time_index","title":"Extract time index from variable name — get_time_index","text":"Extract time index variable name","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_time_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract time index from variable name — get_time_index","text":"","code":"get_time_index(var_name)"},{"path":"https://go-bayes.github.io/margot.sim/reference/is_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if object is a scenario — is_scenario","title":"Test if object is a scenario — is_scenario","text":"Test object scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/is_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if object is a scenario — is_scenario","text":"","code":"is_scenario(x)"},{"path":"https://go-bayes.github.io/margot.sim/reference/is_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if object is a scenario — is_scenario","text":"x Object test","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/is_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if object is a scenario — is_scenario","text":"Logical indicating x margot_scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/is_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if object is a shadow — is_shadow","title":"Test if object is a shadow — is_shadow","text":"Test object shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/is_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if object is a shadow — is_shadow","text":"","code":"is_shadow(x)"},{"path":"https://go-bayes.github.io/margot.sim/reference/is_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if object is a shadow — is_shadow","text":"x Object test","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/is_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if object is a shadow — is_shadow","text":"Logical indicating x margot_shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/length.margot_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Length method for scenarios — length.margot_scenario","title":"Length method for scenarios — length.margot_scenario","text":"Length method scenarios","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/length.margot_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length method for scenarios — length.margot_scenario","text":"","code":"# S3 method for class 'margot_scenario' length(x)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_check_positivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Positivity and Assumption Diagnostics — margot_check_positivity","title":"Positivity and Assumption Diagnostics — margot_check_positivity","text":"Functions diagnosing positivity violations causal assumptions margot simulations.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_check_positivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Positivity and Assumption Diagnostics — margot_check_positivity","text":"","code":"margot_check_positivity(   data,   treatment,   covariates,   threshold = 0.01,   method = c(\"empirical\", \"model-based\", \"both\") )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_check_positivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Positivity and Assumption Diagnostics — margot_check_positivity","text":"data Data frame check treatment Character, name treatment variable covariates Character vector covariate names threshold Numeric, minimum probability threshold (default 0.01) method Method checking: \"empirical\", \"model-based\", \"\"","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_check_positivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Positivity and Assumption Diagnostics — margot_check_positivity","text":"Object class \"margot_positivity_diagnostic\" diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_check_positivity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Positivity and Assumption Diagnostics — margot_check_positivity","text":"Positivity (overlap) requires units non-zero probability receiving treatment level given covariates. Violations can lead biased undefined causal estimates. Check positivity violations data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_check_positivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Positivity and Assumption Diagnostics — margot_check_positivity","text":"","code":"# Create example data with potential positivity violation set.seed(123) n <- 1000 data <- data.frame(   x1 = rnorm(n),   x2 = rnorm(n),   # treatment depends strongly on x1   a = rbinom(n, 1, plogis(3 * x1)),   y = rnorm(n) ) #> Error: object 'x1' not found  # Check positivity pos_check <- margot_check_positivity(   data = data,   treatment = \"a\",   covariates = c(\"x1\", \"x2\") ) #> Error in margot_check_positivity(data = data, treatment = \"a\", covariates = c(\"x1\",     \"x2\")): Treatment variable not found in data print(pos_check) #> Error: object 'pos_check' not found plot(pos_check) #> Error: object 'pos_check' not found"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_convert_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert margot data between wide and long formats — margot_convert_format","title":"Convert margot data between wide and long formats — margot_convert_format","text":"Convert margot data wide long formats","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_convert_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert margot data between wide and long formats — margot_convert_format","text":"","code":"margot_convert_format(data, format = c(\"wide\", \"long\"))"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_convert_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert margot data between wide and long formats — margot_convert_format","text":"data Data margot_simulate format Target format: \"wide\" \"long\"","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_convert_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert margot data between wide and long formats — margot_convert_format","text":"Data requested format metadata preserved","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Common distribution specifications — margot_distributions","title":"Common distribution specifications — margot_distributions","text":"Common distribution specifications","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common distribution specifications — margot_distributions","text":"","code":"margot_distributions"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_distributions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common distribution specifications — margot_distributions","text":"object class list length 9.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_extract_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variable at specific time point — margot_extract_var","title":"Extract variable at specific time point — margot_extract_var","text":"Extract variable specific time point","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_extract_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variable at specific time point — margot_extract_var","text":"","code":"margot_extract_var(data, var, time)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_extract_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variable at specific time point — margot_extract_var","text":"data Wide format data margot_simulate var Variable name (without time prefix) time Time point","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_extract_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variable at specific time point — margot_extract_var","text":"Vector values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_missingness_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary of missingness patterns — margot_missingness_summary","title":"Get summary of missingness patterns — margot_missingness_summary","text":"Get summary missingness patterns","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_missingness_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary of missingness patterns — margot_missingness_summary","text":"","code":"margot_missingness_summary(data, vars = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_missingness_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary of missingness patterns — margot_missingness_summary","text":"data Data margot_simulate vars Variables check (defaults )","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_missingness_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary of missingness patterns — margot_missingness_summary","text":"Data frame missingness summary","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_monte_carlo.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Framework for margot — margot_monte_carlo","title":"Monte Carlo Framework for margot — margot_monte_carlo","text":"file implements Monte Carlo simulation capabilities evaluating statistical estimators various shadowing conditions. Run Monte Carlo simulation evaluate estimator performance","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_monte_carlo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Framework for margot — margot_monte_carlo","text":"","code":"margot_monte_carlo(   n_reps = 500,   n_per_rep = 1000,   dgp_params = list(),   shadows = list(),   estimator_fn = NULL,   truth_fn = NULL,   extract_fn = NULL,   parallel = FALSE,   n_cores = NULL,   seed = NULL,   verbose = TRUE,   save_data = FALSE,   memory_limit = NULL,   summarize_fn = NULL,   checkpoint_dir = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_monte_carlo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Framework for margot — margot_monte_carlo","text":"n_reps Number Monte Carlo replications n_per_rep Sample size per replication dgp_params List parameters margot_simulate_causal() shadows List shadow objects apply data estimator_fn Function takes data returns estimate(s) truth_fn Optional function compute true parameter value extract_fn Optional function extract additional information parallel Logical, use parallel processing? n_cores Number cores parallel processing seed Random seed verbose Print progress? save_data Logical, save datasets replication?","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_monte_carlo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Framework for margot — margot_monte_carlo","text":"Object class \"margot_mc_results\" simulation results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_monte_carlo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Framework for margot — margot_monte_carlo","text":"","code":"if (FALSE) { # \\dontrun{ # Define estimator my_estimator <- function(data) {   fit <- lm(t3_y ~ t2_a + t1_a + b1, data = data)   list(     estimate = coef(fit)[\"t2_a\"],     se = sqrt(diag(vcov(fit)))[\"t2_a\"],     converged = TRUE   ) }  # Run simulation results <- margot_monte_carlo(   n_reps = 500,   n_per_rep = 1000,   dgp_params = list(     waves = 3,     params = list(a_lag_y_coef = 0.3)   ),   estimator_fn = my_estimator ) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_process_longitudinal.html","id":null,"dir":"Reference","previous_headings":"","what":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","title":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","text":"Internal replacement margot_process_longitudinal_data_wider(). Processes longitudinal data wide format across multiple waves, handling censoring indicators optional scaling.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_process_longitudinal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","text":"","code":"margot_process_longitudinal(   df_wide,   exposure_vars = NULL,   outcome_vars = NULL,   preserve_temporal_order = TRUE,   scale_continuous = FALSE,   not_lost_suffix = \"not_lost_following_wave\",   time_point_regex = \"^(t\\\\d+)_.*$\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_process_longitudinal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","text":"df_wide Wide-format data frame containing time-prefixed columns (e.g., `t0_x`) exposure_vars Character vector exposure base names (without time prefixes) outcome_vars Character vector outcome base names (without time prefixes) preserve_temporal_order Logical; TRUE, maintains temporal ordering (t0_var, t1_var, ..., tn_var) scale_continuous Logical; TRUE, scales continuous variables. Default: FALSE not_lost_suffix Suffix -lost indicator. Default: \"not_lost_following_wave\" time_point_regex Regex pattern identify time-point prefixes. Default: \"^(t\\d+)_.*$\"","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_process_longitudinal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","text":"data frame processed columns censoring indicators. Future waves   set NA censored subjects (carry-forward).","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_process_longitudinal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","text":"## Censoring Propagation function enforces monotonic missingness patterns: - subject lost (data wave k), remain lost - future waves set NA consistency - prevents \"resurrections\" subjects reappear lost ## -Lost Indicators wave k, indicator `tk_not_lost_following_wave` created: - Value = 1: Subject least data wave k+1 - Value = 0: Subject data wave k+1 (censored) indicators essential : - Constructing inverse probability weights - Defining -risk set wave - Implementing proper survival analysis methods ## Carry-Forward function implement last observation carried forward (LOCF). Missing values due censoring remain NA. intentional : - LOCF can introduce bias longitudinal causal inference - Modern methods (IPCW, g-computation) handle missingness appropriately - Carrying forward values can mask true censoring pattern","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_report_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Report margot simulation summary — margot_report_sim","title":"Report margot simulation summary — margot_report_sim","text":"Provides formatted summary margot_simulate() output object, including structural model details, sample sizes, censoring patterns.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_report_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report margot simulation summary — margot_report_sim","text":"","code":"margot_report_sim(dat)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_report_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report margot simulation summary — margot_report_sim","text":"dat data frame tibble output margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_report_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report margot simulation summary — margot_report_sim","text":"Invisibly returns metadata list. Called side effect   printing formatted summary console.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_report_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report margot simulation summary — margot_report_sim","text":"","code":"dat <- margot_simulate(n = 100, waves = 3, seed = 123) margot_report_sim(dat) #>  #> ── margot simulation summary ─────────────────────────────────────────────────── #>  #> ── design ── #>  #> • n = 100 subjects #> • waves = 3 measurement occasions #> • structural model: semi-markovian #> • intervention: no #> • sampling weights: no #>  #> ── variables ── #>  #> • baseline covariates: 5 #> • exposure type: binary #> • outcome type: continuous (1 outcome) #> • outcome feedback: full #>  #> ── censoring ── #>  #> • censoring mechanism: built-in #> • base rate: 0.1 #> ℹ data format: wide (id only)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Display detailed SCM equations — margot_scm_details","title":"Display detailed SCM equations — margot_scm_details","text":"Provides detailed mathematical specifications structural causal model (SCM) used margot_simulate. Shows DAG structure specific parametric forms structural equations.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display detailed SCM equations — margot_scm_details","text":"","code":"margot_scm_details(format = c(\"text\", \"latex\"), estimand = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display detailed SCM equations — margot_scm_details","text":"format Character: \"text\" console output, \"latex\" LaTeX estimand Character: specific estimand highlight (optional)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display detailed SCM equations — margot_scm_details","text":"Invisibly returns list equations","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_overview.html","id":null,"dir":"Reference","previous_headings":"","what":"High-level SCM overview — margot_scm_overview","title":"High-level SCM overview — margot_scm_overview","text":"Provides high-level overview structural causal model implementation margot, including key principles, available estimands, usage guidance.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_overview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"High-level SCM overview — margot_scm_overview","text":"","code":"margot_scm_overview(topic = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_overview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"High-level SCM overview — margot_scm_overview","text":"topic Optional specific topic focus ","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_overview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"High-level SCM overview — margot_scm_overview","text":"Invisibly returns NULL","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"Generates data following semi-markovian structural causal model (SCM) : - Semi-markovian data generating process - Optional sampling weights reflect target population - Intervention functions causal inference - Post-hoc censoring bias analysis function cleanly separates three stages: 1. Data generation intervention g (specified): \\((B, L_k^g, A_k^g, Y_k^g)\\) 2. Application sampling weights match target population 3. Creation censoring indicators: \\(C_k\\) (via margot_process_longitudinal) mirrors counterfactual notation: \\(A_k \\A_k^g, C_k \\equiv 0, Y_K^{g,C=0}\\)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"","code":"margot_simulate(   n,   waves,   n_outcomes = 1,   n_baselines = 5,   exposure_type = \"binary\",   outcome_type = \"continuous\",   y_feedback = c(\"full\", \"y_only\", \"none\"),   censoring = list(rate = 0.1, exposure_dependence = TRUE, l_dependence = FALSE,     y_dependence = FALSE, latent_dependence = FALSE),   params = list(),   seed = NULL,   wide = TRUE,   validate_props = TRUE,   verbose = FALSE,   intervention = NULL,   sampling_weights = NULL,   apply_process_function = TRUE,   process_args = list(),   shadows = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"n Integer. Number subjects simulate waves Integer. Number measurement waves (time points) n_outcomes Integer. Number outcomes (1-3). Default: 1 n_baselines Integer. Number baseline covariates. Default: 5 exposure_type Character. Type exposure: \"binary\" \"continuous\". Default: \"binary\" outcome_type Character. Type outcome: \"continuous\" \"binary\". Default: \"continuous\" y_feedback Character. Type outcome feedback: \"full\", \"y_only\", \"none\". Default: \"full\" censoring List. Censoring parameters including rate, exposure_dependence, l_dependence, y_dependence, latent_dependence params List. Named list model parameters (see defaults .default_sim_params()). Key heterogeneity parameters include: a_b1_y_het, a_b2_y_het, a_b3_y_het: Effect modification baseline covariates a_y0_y_het: Effect modification baseline outcome (y_feedback != \"none\") a_a0_y_het: Effect modification baseline exposure a_b_y_het: Legacy parameter b1 interaction (kept compatibility) a_l_y_het: Effect modification time-varying confounder seed Integer. Random seed reproducibility wide Logical. Return data wide format? Default: TRUE validate_props Logical. Validate coefficients sum < 1? Default: TRUE verbose Logical. Print progress messages? Default: FALSE intervention Function. Intervention function(data, time, trt) modifies treatment sampling_weights Numeric vector length n, function(baseline_data) returns weights. Used weight baseline covariates reflect target population. NULL, weighting applied. apply_process_function Logical. TRUE, applies margot_process_longitudinal create proper censoring indicators process_args List arguments pass margot_process_longitudinal shadows shadow object list shadow objects created create_shadow() related functions. Shadows applied data generation processing simulate observational distortions like measurement error, missingness, selection bias.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"tibble columns :   - id: Subject identifier   - b1, ..., bn: Baseline covariates   - t0_a, t1_a, ...: Treatment assignments (natural intervention)   - t1_l, t2_l, ...: Time-varying confounders   - t0_y, t1_y, ..., t(K+1)_y: Outcomes   - t*_not_lost_following_wave: Censoring indicators (apply_process_function = TRUE)   - sampling_weight: Applied weights (sampling_weights provided) returned object attribute \"margot_meta\" containing simulation parameters.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"directed-acyclic-graph-dag-","dir":"Reference","previous_headings":"","what":"Directed Acyclic Graph (DAG)","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"data generating process follows DAG structure:","code":"B --+---> L_1 ---> A_1 ---> Y_1 ---> L_2 ---> A_2 ---> Y_2 ---> ... ---> Y_K         |      |      |      |      |      |      |         |      v      v      v      v      v      v         +----> C_1     C_2     C_3    C_4     C_5     C_6  Where:   B  = Baseline covariates (time-invariant)   L_k = Time-varying confounders at wave k   A_k = Exposure/treatment at wave k   Y_k = Outcome(s) at wave k   C_k = Censoring indicator after wave k"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"structural-equations","dir":"Reference","previous_headings":"","what":"Structural Equations","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"SCM defined following structural equations. baseline (k=0): $$B \\sim \\text{MVN}(0, \\Sigma_B) \\text{ } \\Sigma_B[,j] = \\rho_B \\text{ } \\neq j$$ $$A_0 = f_{A_0}(B, U_{A_0})$$ $$Y_0 = f_{Y_0}(B, A_0, U_{Y_0})$$ wave k >= 1: $$L_k = \\beta_{B \\L} \\cdot h_k(B) + \\beta_{\\L} A_{k-1} + \\beta_{Y \\L} Y_{k-1} + U_{L_k}$$ $$A_k = f_{A_k}(B, L_k, A_{k-1}, Y_{k-1}, U_{A_k})$$ $$Y_k = f_{Y_k}(B, L_{k-1}, A_{k-1}, Y_{k-1}, U_{Y_k})$$ $$C_k = f_{C_k}(A_{k-1}, L_{k-1}, Y_{k-1}, \\theta, U_{C_k})$$ : - \\(h_k(B)\\) represents time-varying functions baseline covariates - \\(U_{\\cdot} \\sim N(0,1)\\) independent errors except noted - \\(\\theta\\) shared frailty term latent_dependence = TRUE","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"unmeasured-confounding","dir":"Reference","previous_headings":"","what":"Unmeasured Confounding","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"following unmeasured confounding structures supported: 1. **Independent errors** (default): \\(U_{\\cdot}\\) mutually independent 2. **Shared frailty censoring**: latent_dependence = TRUE,    $$\\theta \\sim N(0, \\sigma^2_{\\text{frailty}})$$    affects censoring events, inducing correlation dropout times 3. **Correlated outcomes**: n_outcomes > 1,    $$U_{Y_k} \\sim \\text{MVN}(0, \\Sigma_Y)$$    \\(\\Sigma_Y\\) -diagonal elements y_cor Note: unmeasured confounding treatment outcome design. confounding passes measured variables (B, L).","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"parameter-interpretation","dir":"Reference","previous_headings":"","what":"Parameter Interpretation","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"Key parameters structural equations: - b_l_coef: \\(\\beta_{B \\L}\\) effect baseline time-varying confounder - a_l_coef: \\(\\beta_{\\L}\\) effect past treatment confounder - y_l_coef: \\(\\beta_{Y \\L}\\) feedback past outcome confounder - l_a_coef: \\(\\beta_{L \\}\\) effect confounder treatment - a_autoreg: \\(\\beta_{\\}\\) treatment persistence - a_lag_y_coef: \\(\\beta_{\\Y}\\) causal effect treatment outcome - cens_*_coef: Effects censoring hazard","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"Robins JM (1986). \"new approach causal inference mortality studies sustained exposure periods–application control healthy worker survivor effect.\" Mathematical Modelling, 7(9-12), 1393-1512. Hernan MA, Robins JM (2020). \"Causal Inference: .\" Boca Raton: Chapman & Hall/CRC.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"","code":"# basic simulation following the SCM dat <- margot_simulate(   n = 1000,   waves = 3,   seed = 2025 )  # with intervention g: always treat after baseline dat_g <- margot_simulate(   n = 1000,   waves = 3,   intervention = function(data, time, trt) {     if (time == 0) return(data[[trt]])  # natural at baseline     rep(1, nrow(data))                   # always treat after   },   seed = 2025 )  # the estimand E[Y_K^{g,C=0}] can be computed as mean(dat_g$t4_y)  # Example with shadows # Create measurement error shadow me_shadow <- create_shadow(   \"measurement_error\",   params = list(     variables = c(\"t1_l\", \"t2_l\"),     error_type = \"classical\",     sigma = 0.5   ) )  # Generate data with measurement error dat_with_error <- margot_simulate(   n = 1000,   waves = 2,   shadows = me_shadow,   seed = 2025 ) # shadowed data has measurement error applied to specified variables"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_causal.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data for causal inference with proper censoring — margot_simulate_causal","title":"Simulate data for causal inference with proper censoring — margot_simulate_causal","text":"Wrapper function simulates data multiple intervention regimes causal inference. Supports: - Multiple treatment strategies - Sampling weights target populations - Post-hoc censoring create realistic observed data - Automatic computation true causal effects - Bias analysis censoring","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_causal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data for causal inference with proper censoring — margot_simulate_causal","text":"","code":"margot_simulate_causal(   n,   waves,   treatments,   interventions,   sampling_weights = NULL,   apply_censoring = FALSE,   use_process_function = TRUE,   common_params = list(),   ... )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_causal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data for causal inference with proper censoring — margot_simulate_causal","text":"n Integer. Number subjects simulate waves Integer. Number measurement waves treatments Character vector. Names treatment variables (currently uses first) interventions Named list intervention functions. function signature function(data, time, trt) return treatment values sampling_weights Weights function create target population apply_censoring Logical. Apply censoring create observed data? use_process_function Logical. Use margot_process_longitudinal? common_params List elements: - params: Parameters margot_simulate - censoring_params: Censoring parameters - verbose: Print progress? ... Additional arguments passed margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_causal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data for causal inference with proper censoring — margot_simulate_causal","text":"Object class \"margot_causal_sim\" containing:   - data: List datasets intervention   - data_true: Complete data shadows (shadows applied)   - data_observed: Data shadows applied (shadows applied)   - effects: True causal effects (multiple interventions)   - effects_true: Effects computed true data   - effects_observed: Effects computed observed data   - censoring_bias: Bias induced censoring (apply_censoring = TRUE)   - metadata: Simulation metadata","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_causal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data for causal inference with proper censoring — margot_simulate_causal","text":"","code":"# Define interventions interventions <- list(   never_treat = function(data, time, trt) {     rep(0, nrow(data))   },   always_treat = function(data, time, trt) {     rep(1, nrow(data))   },   natural = function(data, time, trt) {     data[[trt]]  # return natural treatment   } )  # Simulate with censoring results <- margot_simulate_causal(   n = 1000,   waves = 3,   treatments = \"a\",   interventions = interventions,   apply_censoring = TRUE,   common_params = list(     params = list(a_lag_y_coef = 0.3),     verbose = TRUE   ) ) #> simulating under intervention: never_treat #> simulating under intervention: always_treat #> simulating under intervention: natural"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_flex.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced margot_simulate with flexible distributions — margot_simulate_flex","title":"Enhanced margot_simulate with flexible distributions — margot_simulate_flex","text":"Enhanced margot_simulate flexible distributions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced margot_simulate with flexible distributions — margot_simulate_flex","text":"","code":"margot_simulate_flex(   n,   waves,   distributions = NULL,   ...,   validate_distributions = TRUE )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_flex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced margot_simulate with flexible distributions — margot_simulate_flex","text":"n Integer. Number subjects simulate waves Integer. Number measurement waves (time points) distributions Distribution set list distributions ... Additional arguments passed margot_simulate validate_distributions Logical. Validate distribution specifications? Default: TRUE","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_flex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced margot_simulate with flexible distributions — margot_simulate_flex","text":"Simulated data specified distributions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_transport_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","title":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","text":"demonstrates extend basic transport weights example include realistic observational shadows using margot.sim.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_transport_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","text":"","code":"margot_transport_analysis(   n_sample = 1000,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_z = 2.5,   beta_az = 0.5,   apply_shadows = FALSE,   shadow_config = NULL,   seed = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_transport_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","text":"n_sample Sample size p_z_sample Probability effect modifier sample p_z_population Probability effect modifier population beta_a Treatment effect beta_z Effect modifier coefficient beta_az Treatment--modifier interaction apply_shadows Logical, whether apply observational shadows shadow_config List specifying shadows apply seed Random seed","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_transport_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","text":"list data, weights, shadow bias analysis","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_transport_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","text":"","code":"# Basic usage without shadows result1 <- margot_transport_analysis(   n_sample = 1000,   apply_shadows = FALSE )  # With measurement error and missingness result2 <- margot_transport_analysis(   n_sample = 1000,   apply_shadows = TRUE,   shadow_config = list(     measurement_error = TRUE,     missingness = TRUE   ) ) #> Warning: Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning: Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  print(result2$bias_comparison) #>            Population True_ATE Observed_ATE          Bias Relative_Bias #> 1 Sample (unweighted) 1.095865     1.094968 -0.0008974202   -0.08189146 #> 2   Target (weighted) 1.286757     1.323800  0.0370437146    2.87884399"},{"path":"https://go-bayes.github.io/margot.sim/reference/names.margot_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of shadows in a scenario — names.margot_scenario","title":"Get names of shadows in a scenario — names.margot_scenario","text":"Get names shadows scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/names.margot_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of shadows in a scenario — names.margot_scenario","text":"","code":"# S3 method for class 'margot_scenario' names(x)"},{"path":"https://go-bayes.github.io/margot.sim/reference/names.margot_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of shadows in a scenario — names.margot_scenario","text":"x margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/names.margot_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of shadows in a scenario — names.margot_scenario","text":"Character vector shadow names","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/new_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for margot_scenario objects — new_scenario","title":"Constructor for margot_scenario objects — new_scenario","text":"Low-level constructor scenario objects. Users typically use create_scenario() instead.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/new_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for margot_scenario objects — new_scenario","text":"","code":"new_scenario(   name,   shadows = list(),   description = \"\",   justification = \"\",   references = NULL,   population = NULL,   ... )"},{"path":"https://go-bayes.github.io/margot.sim/reference/new_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for margot_scenario objects — new_scenario","text":"name Character string naming scenario shadows List shadow objects description Character description justification Character justification references Character vector references ... Additional attributes","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/new_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for margot_scenario objects — new_scenario","text":"margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/new_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Methods for margot Objects — new_shadow","title":"S3 Methods for margot Objects — new_shadow","text":"file implements formal S3 object system margot.sim, providing standardised constructors, validators, methods shadows scenarios. Constructor margot_shadow objects Low-level constructor shadow objects. Users typically use create_shadow() instead.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/new_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Methods for margot Objects — new_shadow","text":"","code":"new_shadow(type, params = list(), name = NULL, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/new_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Methods for margot Objects — new_shadow","text":"type Character string specifying shadow type params List parameters shadow name Character string naming shadow ... Additional attributes","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/new_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Methods for margot Objects — new_shadow","text":"margot_shadow object appropriate subclass","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_mc_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Monte Carlo results — plot.margot_mc_results","title":"Plot Monte Carlo results — plot.margot_mc_results","text":"Plot Monte Carlo results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_mc_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Monte Carlo results — plot.margot_mc_results","text":"","code":"# S3 method for class 'margot_mc_results' plot(x, type = c(\"histogram\", \"qq\", \"trace\", \"bias\"), ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_mc_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Monte Carlo results — plot.margot_mc_results","text":"x margot_mc_results object type Character string specifying plot type: \"histogram\", \"qq\", \"trace\", \"bias\" ... Additional arguments passed ggplot2 functions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_mc_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Monte Carlo results — plot.margot_mc_results","text":"ggplot2 plot object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_positivity_diagnostic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot positivity diagnostics — plot.margot_positivity_diagnostic","title":"Plot positivity diagnostics — plot.margot_positivity_diagnostic","text":"Plot positivity diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_positivity_diagnostic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot positivity diagnostics — plot.margot_positivity_diagnostic","text":"","code":"# S3 method for class 'margot_positivity_diagnostic' plot(x, type = \"propensity\", ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_positivity_diagnostic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot positivity diagnostics — plot.margot_positivity_diagnostic","text":"x margot_positivity_diagnostic object type Type plot: \"propensity\", \"overlap\", \"balance\" ... Additional arguments","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_scenario_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scenario comparison — plot.margot_scenario_comparison","title":"Plot scenario comparison — plot.margot_scenario_comparison","text":"Plot scenario comparison","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_scenario_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scenario comparison — plot.margot_scenario_comparison","text":"","code":"# S3 method for class 'margot_scenario_comparison' plot(x, estimand = \"ate\", ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_scenario_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scenario comparison — plot.margot_scenario_comparison","text":"x margot_scenario_comparison object estimand estimand plot (default \"ate\") ... Additional arguments passed plotting functions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_scenario_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scenario comparison — plot.margot_scenario_comparison","text":"ggplot object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for shadow objects — plot.margot_shadow","title":"Plot method for shadow objects — plot.margot_shadow","text":"Plot method shadow objects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for shadow objects — plot.margot_shadow","text":"","code":"plot.margot_shadow(x, data = NULL, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for shadow objects — plot.margot_shadow","text":"x margot_shadow object data Optional data show shadow effects ... Additional arguments","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for shadow objects — plot.margot_shadow","text":"plot (base R ggplot2)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot_shadow_type.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default shadow plot — plot_shadow_type.default","title":"Default shadow plot — plot_shadow_type.default","text":"Default shadow plot","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot_shadow_type.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default shadow plot — plot_shadow_type.default","text":"","code":"# Default S3 method plot_shadow_type(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/plot_shadow_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Default plot for shadows — plot_shadow_type","title":"Default plot for shadows — plot_shadow_type","text":"Default plot shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot_shadow_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default plot for shadows — plot_shadow_type","text":"","code":"plot_shadow_type(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_causal_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for margot_causal_sim — print.margot_causal_sim","title":"Print method for margot_causal_sim — print.margot_causal_sim","text":"Print method margot_causal_sim","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_causal_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for margot_causal_sim — print.margot_causal_sim","text":"","code":"# S3 method for class 'margot_causal_sim' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_causal_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for margot_causal_sim — print.margot_causal_sim","text":"x margot_causal_sim object ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_causal_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for margot_causal_sim — print.margot_causal_sim","text":"Invisibly returns original object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Margot Effects — print.margot_effects","title":"Print Method for Margot Effects — print.margot_effects","text":"Print Method Margot Effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Margot Effects — print.margot_effects","text":"","code":"# S3 method for class 'margot_effects' print(x, digits = 3, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Margot Effects — print.margot_effects","text":"x margot_effects object digits Number digits display ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_mc_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for Monte Carlo results — print.margot_mc_results","title":"Print method for Monte Carlo results — print.margot_mc_results","text":"Print method Monte Carlo results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_mc_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for Monte Carlo results — print.margot_mc_results","text":"","code":"# S3 method for class 'margot_mc_results' print(x, digits = 4, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_mc_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for Monte Carlo results — print.margot_mc_results","text":"x margot_mc_results object digits Integer. Number digits display ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_mc_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for Monte Carlo results — print.margot_mc_results","text":"Invisibly returns original object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_positivity_diagnostic.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for positivity diagnostics — print.margot_positivity_diagnostic","title":"Print method for positivity diagnostics — print.margot_positivity_diagnostic","text":"Print method positivity diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_positivity_diagnostic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for positivity diagnostics — print.margot_positivity_diagnostic","text":"","code":"# S3 method for class 'margot_positivity_diagnostic' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_positivity_diagnostic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for positivity diagnostics — print.margot_positivity_diagnostic","text":"x margot_positivity_diagnostic object ... Additional arguments","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for scenario objects — print.margot_scenario","title":"Print method for scenario objects — print.margot_scenario","text":"Print method scenario objects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for scenario objects — print.margot_scenario","text":"","code":"# S3 method for class 'margot_scenario' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for scenario objects — print.margot_scenario","text":"x margot_scenario object ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_scenario_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for scenario comparisons — print.margot_scenario_comparison","title":"Print method for scenario comparisons — print.margot_scenario_comparison","text":"Print method scenario comparisons","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_scenario_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for scenario comparisons — print.margot_scenario_comparison","text":"","code":"# S3 method for class 'margot_scenario_comparison' print(x, digits = 3, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_scenario_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for scenario comparisons — print.margot_scenario_comparison","text":"x margot_scenario_comparison object digits Number digits rounding ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_scenario_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for scenario results — print.margot_scenario_result","title":"Print method for scenario results — print.margot_scenario_result","text":"Print method scenario results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_scenario_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for scenario results — print.margot_scenario_result","text":"","code":"# S3 method for class 'margot_scenario_result' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_scenario_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for scenario results — print.margot_scenario_result","text":"x margot_scenario_result object ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for shadow objects — print.margot_shadow","title":"Print method for shadow objects — print.margot_shadow","text":"Print method shadow objects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for shadow objects — print.margot_shadow","text":"","code":"# S3 method for class 'margot_shadow' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for shadow objects — print.margot_shadow","text":"x margot_shadow object ... Additional arguments (unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for shadow objects — print.margot_shadow","text":"Invisibly returns object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_shadow_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Shadow Result — print.margot_shadow_result","title":"Print Method for Shadow Result — print.margot_shadow_result","text":"Print Method Shadow Result","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_shadow_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Shadow Result — print.margot_shadow_result","text":"","code":"# S3 method for class 'margot_shadow_result' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_shadow_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Shadow Result — print.margot_shadow_result","text":"x margot_shadow_result object ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.mc_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for MC comparison — print.mc_comparison","title":"Print method for MC comparison — print.mc_comparison","text":"Print method MC comparison","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.mc_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for MC comparison — print.mc_comparison","text":"","code":"# S3 method for class 'mc_comparison' print(x, digits = 4, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.mc_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for MC comparison — print.mc_comparison","text":"x mc_comparison object compare_mc_results() digits Integer. Number digits display ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.mc_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for MC comparison — print.mc_comparison","text":"Invisibly returns original object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_bias_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Shadow Bias Comparison — print.shadow_bias_comparison","title":"Print Method for Shadow Bias Comparison — print.shadow_bias_comparison","text":"Print Method Shadow Bias Comparison","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_bias_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Shadow Bias Comparison — print.shadow_bias_comparison","text":"","code":"# S3 method for class 'shadow_bias_comparison' print(x, digits = 3, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_bias_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Shadow Bias Comparison — print.shadow_bias_comparison","text":"x shadow_bias_comparison object digits Number digits display ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effect_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Shadow Effect Comparison — print.shadow_effect_comparison","title":"Print Method for Shadow Effect Comparison — print.shadow_effect_comparison","text":"Print Method Shadow Effect Comparison","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effect_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Shadow Effect Comparison — print.shadow_effect_comparison","text":"","code":"# S3 method for class 'shadow_effect_comparison' print(x, digits = 3, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effect_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Shadow Effect Comparison — print.shadow_effect_comparison","text":"x shadow_effect_comparison object digits Number digits rounding ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print shadow effects — print.shadow_effects","title":"Print shadow effects — print.shadow_effects","text":"Print shadow effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print shadow effects — print.shadow_effects","text":"","code":"# S3 method for class 'shadow_effects' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print shadow effects — print.shadow_effects","text":"x shadow_effects object analyse_shadow_effects() ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print shadow effects — print.shadow_effects","text":"Invisibly returns original object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for shadow lists — print.shadow_list","title":"Print method for shadow lists — print.shadow_list","text":"Print method shadow lists","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for shadow lists — print.shadow_list","text":"","code":"# S3 method for class 'shadow_list' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/reorder_shadows.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder shadows to respect dependencies — reorder_shadows","title":"Reorder shadows to respect dependencies — reorder_shadows","text":"Reorder shadows respect dependencies","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/reorder_shadows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder shadows to respect dependencies — reorder_shadows","text":"","code":"reorder_shadows(shadows)"},{"path":"https://go-bayes.github.io/margot.sim/reference/reorder_shadows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder shadows to respect dependencies — reorder_shadows","text":"shadows List shadow objects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/reorder_shadows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder shadows to respect dependencies — reorder_shadows","text":"Reordered list shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/resume_monte_carlo.html","id":null,"dir":"Reference","previous_headings":"","what":"Resume Monte Carlo simulation from checkpoint — resume_monte_carlo","title":"Resume Monte Carlo simulation from checkpoint — resume_monte_carlo","text":"Resume Monte Carlo simulation checkpoint","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/resume_monte_carlo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resume Monte Carlo simulation from checkpoint — resume_monte_carlo","text":"","code":"resume_monte_carlo(checkpoint_dir, n_reps, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/resume_monte_carlo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resume Monte Carlo simulation from checkpoint — resume_monte_carlo","text":"checkpoint_dir Directory containing checkpoint files n_reps Total number replications desired ... Additional arguments passed margot_monte_carlo","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/resume_monte_carlo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resume Monte Carlo simulation from checkpoint — resume_monte_carlo","text":"Monte Carlo results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/run_all_examples.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all margot examples — run_all_examples","title":"Run all margot examples — run_all_examples","text":"Runs example functions demonstrate package capabilities.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/run_all_examples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all margot examples — run_all_examples","text":"","code":"run_all_examples(pause = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/run_all_examples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all margot examples — run_all_examples","text":"pause Logical. Pause examples?","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/run_mc_replication.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo wrapper with proper RNG discipline — run_mc_replication","title":"Monte Carlo wrapper with proper RNG discipline — run_mc_replication","text":"Monte Carlo wrapper proper RNG discipline","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/run_mc_replication.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo wrapper with proper RNG discipline — run_mc_replication","text":"","code":"run_mc_replication(rep_id, rng_stream, rep_fn, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/run_mc_replication.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo wrapper with proper RNG discipline — run_mc_replication","text":"rep_id Replication ID rng_stream RNG stream replication rep_fn Function run one replication ... Additional arguments passed rep_fn","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Get standard scenario collection — scenario_collection","title":"Get standard scenario collection — scenario_collection","text":"Returns standard collection scenarios sensitivity analysis, ranging oracle (best case) pessimistic (worst case).","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get standard scenario collection — scenario_collection","text":"","code":"scenario_collection(   include = c(\"oracle\", \"rct\", \"ehr\", \"survey\", \"pessimistic\") )"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get standard scenario collection — scenario_collection","text":"include Character vector scenario types include","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get standard scenario collection — scenario_collection","text":"Named list scenarios","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_collection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get standard scenario collection — scenario_collection","text":"","code":"scenarios <- scenario_collection() names(scenarios) #> [1] \"oracle\"        \"rct_typical\"   \"rct_pragmatic\" \"ehr\"           #> [5] \"survey\"        \"pessimistic\"    # use in sensitivity analysis if (FALSE) { # \\dontrun{ results <- compare_scenarios(   data = my_data,   scenarios = scenarios,   exposure = \"treatment\",   outcome = \"outcome\" ) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_collection_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Get simple scenario collection — scenario_collection_simple","title":"Get simple scenario collection — scenario_collection_simple","text":"Returns simple collection scenarios work standard margot_simulate() output","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_collection_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get simple scenario collection — scenario_collection_simple","text":"","code":"scenario_collection_simple()"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_collection_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get simple scenario collection — scenario_collection_simple","text":"Named list scenarios","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_ehr_typical.html","id":null,"dir":"Reference","previous_headings":"","what":"Create typical EHR scenario — scenario_ehr_typical","title":"Create typical EHR scenario — scenario_ehr_typical","text":"Represents electronic health record data typical limitations including misclassification, missing data, selection issues.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_ehr_typical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create typical EHR scenario — scenario_ehr_typical","text":"","code":"scenario_ehr_typical(name = \"Typical EHR\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_ehr_typical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create typical EHR scenario — scenario_ehr_typical","text":"name Character, name scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_ehr_typical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create typical EHR scenario — scenario_ehr_typical","text":"margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_ehr_typical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create typical EHR scenario — scenario_ehr_typical","text":"","code":"ehr <- scenario_ehr_typical() print(ehr) #> Margot Scenario: Typical EHR #> ============================ #> Description: Electronic health record data with typical limitations #>  #> Justification: EHR data quality varies by healthcare system and data type. Diagnosis codes have known validity issues. Lab values missing not at random (sicker patients tested more). Selection into EHR based on healthcare utilisation. #>  #> References: #>   [1] Hernan MA et al. Using Big Data to Emulate a Target Trial When a Randomized Trial Is Not Available. Am J Epidemiol. 2016;183:758-764. #>   [2] Wells BJ et al. Strategies for handling missing data in electronic health record derived data. EGEMS. 2013;1:1035. #>   [3] Goldstein BA et al. Opportunities and challenges in developing risk prediction models with EHR data: a systematic review. JAMIA. 2017;24:198-208. #>  #> Shadows (5): #>   - diagnosis_misclass: measurement_error shadow (misclassification) #>   - lab_error: measurement_error shadow (classical) #>   - missing_labs: item_missingness shadow (MNAR, rate: 0.35) #>   - lab_truncation: truncation shadow #>   - selection: selection shadow"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_from_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create custom scenario from template — scenario_from_template","title":"Create custom scenario from template — scenario_from_template","text":"Helper function create custom scenario based template, allowing easy modification specific parameters.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_from_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create custom scenario from template — scenario_from_template","text":"","code":"scenario_from_template(template, modifications = list(), name = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_from_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create custom scenario from template — scenario_from_template","text":"template Character, name template scenario modifications List modifications apply name Character, name new scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_from_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create custom scenario from template — scenario_from_template","text":"margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_from_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create custom scenario from template — scenario_from_template","text":"","code":"# create RCT with higher dropout high_dropout_rct <- scenario_from_template(   \"rct_typical\",   modifications = list(dropout_rate = 0.30),   name = \"High Dropout RCT\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_observational_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Create simple observational study scenario — scenario_observational_simple","title":"Create simple observational study scenario — scenario_observational_simple","text":"simplified observational scenario common biases","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_observational_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create simple observational study scenario — scenario_observational_simple","text":"","code":"scenario_observational_simple(name = \"Simple Observational\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_observational_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create simple observational study scenario — scenario_observational_simple","text":"name Character, name scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_observational_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create simple observational study scenario — scenario_observational_simple","text":"margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_oracle.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Pre-built Scenario Library for margot — scenario_oracle","title":"Simple Pre-built Scenario Library for margot — scenario_oracle","text":"file contains simple pre-built scenarios work standard margot_simulate() output without requiring specific variable names. file contains pre-built scenarios representing common research contexts typical observational challenges. Create oracle scenario oracle scenario represents perfect measurement observational distortions. serves theoretical benchmark scenarios can compared.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_oracle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Pre-built Scenario Library for margot — scenario_oracle","text":"","code":"scenario_oracle(name = \"Oracle\")  scenario_oracle(name = \"Oracle\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_oracle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Pre-built Scenario Library for margot — scenario_oracle","text":"name Character, name scenario (default \"Oracle\")","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_oracle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Pre-built Scenario Library for margot — scenario_oracle","text":"margot_scenario object shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_oracle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Pre-built Scenario Library for margot — scenario_oracle","text":"","code":"oracle <- scenario_oracle() print(oracle) #> Margot Scenario: Oracle #> ======================= #> Description: Perfect measurement with no observational distortions #>  #> Justification: Theoretical benchmark assuming perfect information #>  #> References: #>   [1] Pearl J. Causality: Models, Reasoning, and Inference. 2009. #>  #> Shadows (0): #>   (No shadows - represents perfect measurement)"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_pessimistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pessimistic scenario — scenario_pessimistic","title":"Create pessimistic scenario — scenario_pessimistic","text":"Represents worst-case plausible scenario multiple substantial observational challenges.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_pessimistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pessimistic scenario — scenario_pessimistic","text":"","code":"scenario_pessimistic(name = \"Pessimistic\")  scenario_pessimistic(name = \"Pessimistic\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_pessimistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pessimistic scenario — scenario_pessimistic","text":"name Character, name scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_pessimistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pessimistic scenario — scenario_pessimistic","text":"margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_pragmatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pragmatic RCT scenario — scenario_rct_pragmatic","title":"Create pragmatic RCT scenario — scenario_rct_pragmatic","text":"Represents pragmatic trial real-world conditions including higher dropout measurement challenges.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_pragmatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pragmatic RCT scenario — scenario_rct_pragmatic","text":"","code":"scenario_rct_pragmatic(name = \"Pragmatic RCT\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_pragmatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pragmatic RCT scenario — scenario_rct_pragmatic","text":"name Character, name scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_pragmatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pragmatic RCT scenario — scenario_rct_pragmatic","text":"margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Create simple RCT scenario — scenario_rct_simple","title":"Create simple RCT scenario — scenario_rct_simple","text":"simplified RCT scenario works margot_simulate() data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create simple RCT scenario — scenario_rct_simple","text":"","code":"scenario_rct_simple(   measurement_error_sd = 0.1,   dropout_rate = 0.15,   name = \"Simple RCT\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create simple RCT scenario — scenario_rct_simple","text":"measurement_error_sd Numeric, SD measurement error (default 0.1) dropout_rate Numeric, dropout rate (default 0.15) name Character, name scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create simple RCT scenario — scenario_rct_simple","text":"margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_typical.html","id":null,"dir":"Reference","previous_headings":"","what":"Create typical RCT scenario — scenario_rct_typical","title":"Create typical RCT scenario — scenario_rct_typical","text":"Represents well-conducted randomised controlled trial minimal measurement error moderate dropout.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_typical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create typical RCT scenario — scenario_rct_typical","text":"","code":"scenario_rct_typical(   measurement_error_sd = 0.1,   dropout_rate = 0.15,   name = \"Typical RCT\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_typical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create typical RCT scenario — scenario_rct_typical","text":"measurement_error_sd Numeric, SD measurement error (default 0.1) dropout_rate Numeric, dropout rate (default 0.15) name Character, name scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_typical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create typical RCT scenario — scenario_rct_typical","text":"margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_rct_typical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create typical RCT scenario — scenario_rct_typical","text":"","code":"rct <- scenario_rct_typical() print(rct) #> Margot Scenario: Typical RCT #> ============================ #> Description: Well-conducted RCT with protocol-based measurement #>  #> Justification: Based on typical patterns from major clinical trials. Measurement error reflects instrument precision. Dropout rates from trial meta-analyses. #>  #> References: #>   [1] Akl EA et al. Potential impact on estimated treatment effects of information lost to follow-up in randomised controlled trials (LOST-IT): systematic review. BMJ. 2012;344:e2809. #>   [2] Altman DG, Bland JM. Measurement in medicine: the analysis of method comparison studies. The Statistician. 1983;32:307-317. #>  #> Shadows (3): #>   - measurement: measurement_error shadow (classical) #>   - dropout: censoring shadow (rate: 0.15) #>   - missing_items: item_missingness shadow (MCAR, rate: 0.05)"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_registry_typical.html","id":null,"dir":"Reference","previous_headings":"","what":"Create registry data scenario — scenario_registry_typical","title":"Create registry data scenario — scenario_registry_typical","text":"Represents administrative registry data typical limitations including truncation, coarsening, systematic errors.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_registry_typical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create registry data scenario — scenario_registry_typical","text":"","code":"scenario_registry_typical(name = \"Typical Registry\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_registry_typical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create registry data scenario — scenario_registry_typical","text":"name Character, name scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_registry_typical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create registry data scenario — scenario_registry_typical","text":"margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_survey_typical.html","id":null,"dir":"Reference","previous_headings":"","what":"Create survey study scenario — scenario_survey_typical","title":"Create survey study scenario — scenario_survey_typical","text":"Represents survey cohort study data self-report biases, item non-response, selection issues.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_survey_typical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create survey study scenario — scenario_survey_typical","text":"","code":"scenario_survey_typical(response_rate = 0.6, name = \"Typical Survey\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_survey_typical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create survey study scenario — scenario_survey_typical","text":"response_rate Numeric, survey response rate name Character, name scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/scenario_survey_typical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create survey study scenario — scenario_survey_typical","text":"margot_scenario object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/sensitivity_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform sensitivity analysis across scenarios — sensitivity_analysis","title":"Perform sensitivity analysis across scenarios — sensitivity_analysis","text":"Systematically evaluates causal conclusions change across set scenarios representing different assumptions.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/sensitivity_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform sensitivity analysis across scenarios — sensitivity_analysis","text":"","code":"sensitivity_analysis(   data_generator,   scenarios,   intervention,   outcome_var,   n_sim = 100,   parallel = FALSE,   verbose = TRUE )"},{"path":"https://go-bayes.github.io/margot.sim/reference/sensitivity_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform sensitivity analysis across scenarios — sensitivity_analysis","text":"data_generator Function generates data (fixed dataset) scenarios List scenarios evaluate intervention Intervention specification outcome_var Character, name outcome variable n_sim Number simulations per scenario parallel Logical, whether use parallel processing verbose Logical, whether show progress","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/sensitivity_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform sensitivity analysis across scenarios — sensitivity_analysis","text":"sensitivity analysis object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/set_rng_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Set RNG stream for a specific replication — set_rng_stream","title":"Set RNG stream for a specific replication — set_rng_stream","text":"Set RNG stream specific replication","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/set_rng_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set RNG stream for a specific replication — set_rng_stream","text":"","code":"set_rng_stream(stream, kind = \"L'Ecuyer-CMRG\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/set_rng_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set RNG stream for a specific replication — set_rng_stream","text":"stream RNG stream state (create_rng_streams) kind RNG kind use","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/shift-interventions.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift intervention functions for margot.sim — shift-interventions","title":"Shift intervention functions for margot.sim — shift-interventions","text":"Functions creating shift interventions commonly used modified treatment policies (MTPs) longitudinal causal inference.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/simulate_ate_data_with_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","title":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","text":"simplified direct replacement exactly mimics old function's behavior without using full margot.sim machinery.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/simulate_ate_data_with_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","text":"","code":"simulate_ate_data_with_weights(   n_sample = 10000,   n_population = 1e+05,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_z = 2.5,   beta_az = 0.5,   noise_sd = 0.5,   seed = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/simulate_ate_data_with_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","text":"n_sample Sample size n_population Population size p_z_sample Probability effect modifier Z=1 sample p_z_population Probability effect modifier Z=1 population beta_a Treatment effect beta_z Effect modifier coefficient beta_az Treatment--modifier interaction noise_sd Standard deviation outcome noise seed Random seed reproducibility","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/simulate_ate_data_with_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","text":"List containing sample_data population_data appropriate weights","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/simulate_ate_data_with_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","text":"","code":"# Direct replacement usage data <- simulate_ate_data_with_weights(   n_sample = 1000,   n_population = 10000,   p_z_sample = 0.1,   p_z_population = 0.5 )  # Check weighted vs unweighted ATE with(data$sample_data, {   cat(\"Unweighted ATE:\", mean(y_sample[a_sample==1]) - mean(y_sample[a_sample==0]), \"\\n\")   cat(\"Weighted ATE:\",        weighted.mean(y_sample[a_sample==1], weights[a_sample==1]) -        weighted.mean(y_sample[a_sample==0], weights[a_sample==0]), \"\\n\") }) #> Unweighted ATE: 0.9867305  #> Weighted ATE: 1.127091"},{"path":"https://go-bayes.github.io/margot.sim/reference/sub-.margot_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset shadows from a scenario — [.margot_scenario","title":"Subset shadows from a scenario — [.margot_scenario","text":"Subset shadows scenario","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/sub-.margot_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset shadows from a scenario — [.margot_scenario","text":"","code":"# S3 method for class 'margot_scenario' x[i]"},{"path":"https://go-bayes.github.io/margot.sim/reference/sub-.shadow_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract shadow from a list — [.shadow_list","title":"Extract shadow from a list — [.shadow_list","text":"Extract shadow list","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/sub-.shadow_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract shadow from a list — [.shadow_list","text":"","code":"# S3 method for class 'shadow_list' x[i]"},{"path":"https://go-bayes.github.io/margot.sim/reference/summarize_positivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize positivity diagnostics — summarize_positivity","title":"Summarize positivity diagnostics — summarize_positivity","text":"Summarize positivity diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summarize_positivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize positivity diagnostics — summarize_positivity","text":"","code":"summarize_positivity(data, treatment, covariates, treatment_vals)"},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_mc_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for Monte Carlo results — summary.margot_mc_results","title":"Summary method for Monte Carlo results — summary.margot_mc_results","text":"Summary method Monte Carlo results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_mc_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for Monte Carlo results — summary.margot_mc_results","text":"","code":"# S3 method for class 'margot_mc_results' summary(object, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_mc_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for Monte Carlo results — summary.margot_mc_results","text":"object margot_mc_results object ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_mc_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for Monte Carlo results — summary.margot_mc_results","text":"summary object class \"summary.margot_mc_results\"","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_sensitivity_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise sensitivity analysis results — summary.margot_sensitivity_analysis","title":"Summarise sensitivity analysis results — summary.margot_sensitivity_analysis","text":"Summarise sensitivity analysis results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_sensitivity_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise sensitivity analysis results — summary.margot_sensitivity_analysis","text":"","code":"# S3 method for class 'margot_sensitivity_analysis' summary(object, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_sensitivity_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise sensitivity analysis results — summary.margot_sensitivity_analysis","text":"object margot_sensitivity_analysis object ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_sensitivity_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise sensitivity analysis results — summary.margot_sensitivity_analysis","text":"Summary data frame","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for margot objects — summary.margot_shadow","title":"Summary method for margot objects — summary.margot_shadow","text":"Summary method margot objects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for margot objects — summary.margot_shadow","text":"","code":"# S3 method for class 'margot_shadow' summary(object, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for margot objects — summary.margot_shadow","text":"object margot object ... Additional arguments","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for margot objects — summary.margot_shadow","text":"Summary information","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/test_censoring_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Test simple censoring — test_censoring_simple","title":"Test simple censoring — test_censoring_simple","text":"Example function demonstrating basic censoring functionality. Generates data high censoring rate show effect.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/test_censoring_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test simple censoring — test_censoring_simple","text":"","code":"test_censoring_simple()"},{"path":"https://go-bayes.github.io/margot.sim/reference/test_censoring_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test simple censoring — test_censoring_simple","text":"Invisibly returns generated data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/update_shadow_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Update shadow parameters based on dependencies — update_shadow_params","title":"Update shadow parameters based on dependencies — update_shadow_params","text":"Update shadow parameters based dependencies","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/update_shadow_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update shadow parameters based on dependencies — update_shadow_params","text":"","code":"update_shadow_params(shadow, applied_shadows = list())"},{"path":"https://go-bayes.github.io/margot.sim/reference/update_shadow_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update shadow parameters based on dependencies — update_shadow_params","text":"shadow Shadow object update applied_shadows List already applied shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/update_shadow_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update shadow parameters based on dependencies — update_shadow_params","text":"Updated shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_proportions.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that coefficients sum to less than 1 — validate_proportions","title":"Validate that coefficients sum to less than 1 — validate_proportions","text":"Validate coefficients sum less 1","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_proportions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that coefficients sum to less than 1 — validate_proportions","text":"","code":"validate_proportions(coefs, node_name, threshold = 0.95)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_rng_reproducibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate RNG reproducibility — validate_rng_reproducibility","title":"Validate RNG reproducibility — validate_rng_reproducibility","text":"Tests parallel sequential runs produce identical results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_rng_reproducibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate RNG reproducibility — validate_rng_reproducibility","text":"","code":"validate_rng_reproducibility(test_fn, n_reps = 10, seed = 123, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_rng_reproducibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate RNG reproducibility — validate_rng_reproducibility","text":"test_fn Function test (use RNG) n_reps Number replications test seed Seed testing ... Additional arguments test_fn","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_rng_reproducibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate RNG reproducibility — validate_rng_reproducibility","text":"Logical indicating results reproducible","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_rng_reproducibility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate RNG reproducibility — validate_rng_reproducibility","text":"","code":"if (FALSE) { # \\dontrun{ # Test that a simulation is reproducible test_fn <- function(rep_id) {   data <- rnorm(100)   mean(data) }  is_reproducible <- validate_rng_reproducibility(   test_fn = test_fn,   n_reps = 10,   seed = 123 ) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scenario.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default scenario validator — validate_scenario.default","title":"Default scenario validator — validate_scenario.default","text":"Default scenario validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scenario.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default scenario validator — validate_scenario.default","text":"","code":"# Default S3 method validate_scenario(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for margot_scenario objects — validate_scenario","title":"Validator for margot_scenario objects — validate_scenario","text":"Validator margot_scenario objects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for margot_scenario objects — validate_scenario","text":"","code":"validate_scenario(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for margot_scenario objects — validate_scenario","text":"x object validate ... Additional arguments","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for margot_scenario objects — validate_scenario","text":"validated object (invisibly)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scenario.margot_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Base scenario validator — validate_scenario.margot_scenario","title":"Base scenario validator — validate_scenario.margot_scenario","text":"Base scenario validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scenario.margot_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base scenario validator — validate_scenario.margot_scenario","text":"","code":"# S3 method for class 'margot_scenario' validate_scenario(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scm_assumptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate SCM assumptions in simulated data — validate_scm_assumptions","title":"Validate SCM assumptions in simulated data — validate_scm_assumptions","text":"Tests whether simulated data follows expected structural causal model checking independence assumptions, temporal ordering, structural effects.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scm_assumptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate SCM assumptions in simulated data — validate_scm_assumptions","text":"","code":"validate_scm_assumptions(   data,   tests = c(\"independence\", \"temporal\", \"structural\"),   alpha = 0.05,   verbose = TRUE )"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scm_assumptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate SCM assumptions in simulated data — validate_scm_assumptions","text":"data Data frame margot_simulate tests Character vector tests perform alpha Significance level tests verbose Print detailed results?","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scm_assumptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate SCM assumptions in simulated data — validate_scm_assumptions","text":"List test results pass/fail summary","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.censoring_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Censoring shadow validator — validate_shadow.censoring_shadow","title":"Censoring shadow validator — validate_shadow.censoring_shadow","text":"Censoring shadow validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.censoring_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Censoring shadow validator — validate_shadow.censoring_shadow","text":"","code":"# S3 method for class 'censoring_shadow' validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.coarsening_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Coarsening shadow validator — validate_shadow.coarsening_shadow","title":"Coarsening shadow validator — validate_shadow.coarsening_shadow","text":"Coarsening shadow validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.coarsening_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coarsening shadow validator — validate_shadow.coarsening_shadow","text":"","code":"# S3 method for class 'coarsening_shadow' validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default shadow validator — validate_shadow.default","title":"Default shadow validator — validate_shadow.default","text":"Default shadow validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default shadow validator — validate_shadow.default","text":"","code":"# Default S3 method validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Validator for margot_shadow objects — validate_shadow","title":"Validator for margot_shadow objects — validate_shadow","text":"Validates shadow object correct structure valid parameters type.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validator for margot_shadow objects — validate_shadow","text":"","code":"validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validator for margot_shadow objects — validate_shadow","text":"x object validate ... Additional arguments passed specific validators","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validator for margot_shadow objects — validate_shadow","text":"validated object (invisibly)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.item_missingness_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Item missingness shadow validator — validate_shadow.item_missingness_shadow","title":"Item missingness shadow validator — validate_shadow.item_missingness_shadow","text":"Item missingness shadow validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.item_missingness_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Item missingness shadow validator — validate_shadow.item_missingness_shadow","text":"","code":"# S3 method for class 'item_missingness_shadow' validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.margot_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Base shadow validator — validate_shadow.margot_shadow","title":"Base shadow validator — validate_shadow.margot_shadow","text":"Base shadow validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.margot_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base shadow validator — validate_shadow.margot_shadow","text":"","code":"# S3 method for class 'margot_shadow' validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.measurement_error_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Measurement error shadow validator — validate_shadow.measurement_error_shadow","title":"Measurement error shadow validator — validate_shadow.measurement_error_shadow","text":"Measurement error shadow validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.measurement_error_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measurement error shadow validator — validate_shadow.measurement_error_shadow","text":"","code":"# S3 method for class 'measurement_error_shadow' validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.mode_effects_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Mode effects shadow validator — validate_shadow.mode_effects_shadow","title":"Mode effects shadow validator — validate_shadow.mode_effects_shadow","text":"Mode effects shadow validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.mode_effects_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mode effects shadow validator — validate_shadow.mode_effects_shadow","text":"","code":"# S3 method for class 'mode_effects_shadow' validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.positivity_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Positivity shadow validator — validate_shadow.positivity_shadow","title":"Positivity shadow validator — validate_shadow.positivity_shadow","text":"Positivity shadow validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.positivity_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Positivity shadow validator — validate_shadow.positivity_shadow","text":"","code":"# S3 method for class 'positivity_shadow' validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.selection_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Selection shadow validator — validate_shadow.selection_shadow","title":"Selection shadow validator — validate_shadow.selection_shadow","text":"Selection shadow validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.selection_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selection shadow validator — validate_shadow.selection_shadow","text":"","code":"# S3 method for class 'selection_shadow' validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.truncation_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncation shadow validator — validate_shadow.truncation_shadow","title":"Truncation shadow validator — validate_shadow.truncation_shadow","text":"Truncation shadow validator","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow.truncation_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncation shadow validator — validate_shadow.truncation_shadow","text":"","code":"# S3 method for class 'truncation_shadow' validate_shadow(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate shadow parameters — validate_shadow_params","title":"Validate shadow parameters — validate_shadow_params","text":"Validate shadow parameters","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate shadow parameters — validate_shadow_params","text":"","code":"validate_shadow_params(type, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_temporal_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate temporal order of shadow dependencies — validate_temporal_order","title":"Validate temporal order of shadow dependencies — validate_temporal_order","text":"Validate temporal order shadow dependencies","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_temporal_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate temporal order of shadow dependencies — validate_temporal_order","text":"","code":"validate_temporal_order(target_vars, dependency_vars)"},{"path":"https://go-bayes.github.io/margot.sim/reference/visualize_shadow_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize shadow dependencies — visualize_shadow_dependencies","title":"Visualize shadow dependencies — visualize_shadow_dependencies","text":"Visualize shadow dependencies","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/visualize_shadow_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize shadow dependencies — visualize_shadow_dependencies","text":"","code":"visualize_shadow_dependencies(shadows = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/visualize_shadow_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize shadow dependencies — visualize_shadow_dependencies","text":"shadows List shadow objects (optional)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/visualize_shadow_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize shadow dependencies — visualize_shadow_dependencies","text":"Prints dependency graph","code":""},{"path":[]},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"scenario-framework-for-systematic-sensitivity-analysis-0-1-3","dir":"Changelog","previous_headings":"Major New Features","what":"Scenario Framework for Systematic Sensitivity Analysis","title":"margot.sim 0.1.3 (2025-06-12 development version)","text":"create_scenario(): Create scenarios shadows, descriptions, justifications, references apply_scenario(): Apply shadows scenario preserving dual data architecture compare_scenarios(): Compare causal effects across multiple scenarios sensitivity_analysis(): Monte Carlo evaluation across scenarios scenario_oracle(): Perfect measurement benchmark scenario_rct_typical(): Well-conducted RCT minimal biases scenario_rct_pragmatic(): Real-world trial conditions scenario_ehr_typical(): Electronic health records coding errors missingness scenario_survey_typical(): Survey data self-report biases scenario_registry_typical(): Administrative data truncation coarsening scenario_pessimistic(): Worst-case plausible scenario scenario_collection(): Get standard scenario set sensitivity analysis scenario_rct_simple(), scenario_observational_simple(), scenario_collection_simple()","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"extended-shadow-types-0-1-3","dir":"Changelog","previous_headings":"Major New Features","what":"Extended Shadow Types","title":"margot.sim 0.1.3 (2025-06-12 development version)","text":"“simple” type: Values beyond thresholds become NA “boundary” type: Values pile boundaries (e.g., “200k+” income) Handles laboratory equipment limits, survey bounds, privacy top-coding Multiple handling strategies: “midpoint”, “lower”, “upper”, “random”, “heaping” Heaping algorithm models realistic digit preference (e.g., ages ending 0 5) Supports custom breaks automatic binning Define mode-specific transformation functions Model phone vs web vs -person survey differences Preserves relationships adding systematic mode effects","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"vignettes-0-1-3","dir":"Changelog","previous_headings":"New Documentation","what":"Vignettes","title":"margot.sim 0.1.3 (2025-06-12 development version)","text":"Comprehensive guide using scenarios systematic sensitivity analysis Examples creating custom scenarios specific research contexts Threshold analysis find conclusions change Detailed examples truncation vs censoring Impact coarsening causal estimates Realistic heaping patterns self-reported data","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"enhanced-architecture-0-1-3","dir":"Changelog","previous_headings":"Improvements","what":"Enhanced Architecture","title":"margot.sim 0.1.3 (2025-06-12 development version)","text":"new shadows integrate existing apply_shadow() S3 dispatch system Comprehensive input validation error messages Temporal order validation extended new shadow types Print methods scenario objects comparison results Plot methods scenario comparisons using ggplot2","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"testing-and-quality-0-1-3","dir":"Changelog","previous_headings":"Improvements","what":"Testing and Quality","title":"margot.sim 0.1.3 (2025-06-12 development version)","text":"Added 77 new tests scenario framework Added 49 tests extended shadow types new functions comprehensive edge case coverage Updated _pkgdown.yml new function categories","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"examples-0-1-3","dir":"Changelog","previous_headings":"Improvements","what":"Examples","title":"margot.sim 0.1.3 (2025-06-12 development version)","text":"Added examples major scenario functions Created realistic COVID vaccine effectiveness scenario example Demonstrated systematic sensitivity analysis workflows","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"s3-methods-0-1-3","dir":"Changelog","previous_headings":"Technical Details","what":"S3 Methods","title":"margot.sim 0.1.3 (2025-06-12 development version)","text":"apply_shadow.truncation_shadow(): Handles simple boundary truncation apply_shadow.coarsening_shadow(): Implements coarsening strategies apply_shadow.mode_effects_shadow(): Applies mode-specific transformations print.margot_scenario(): Formatted output scenarios print.margot_scenario_result(): Results scenario application print.margot_scenario_comparison(): Comparison table bias calculations plot.margot_scenario_comparison(): Visual comparison effects summary.margot_sensitivity_analysis(): Summary Monte Carlo sensitivity results","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"internal-functions-0-1-3","dir":"Changelog","previous_headings":"Technical Details","what":"Internal Functions","title":"margot.sim 0.1.3 (2025-06-12 development version)","text":"Enhanced apply_shadows_with_truth() work scenario framework Added bracket parsing coarsening shadows Implemented realistic heaping algorithm NA handling","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"bug-fixes-0-1-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"margot.sim 0.1.3 (2025-06-12 development version)","text":"Fixed differential error function signatures match expected interface Improved handling interval parsing coarsening shadows Fixed NA handling heaping algorithm Removed non-implemented selection shadow pessimistic scenario","code":""},{"path":[]},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"shadow-bias-comparison-framework-0-1-2","dir":"Changelog","previous_headings":"New features","what":"Shadow Bias Comparison Framework","title":"margot.sim 0.1.2 (2025-06-11)","text":"compute_causal_effects(): Standardized function computing ATE, ATT, ATU data compute_effects_from_sim(): Wrapper margot simulation data proper time indexing compare_shadow_bias(): Calculates absolute relative bias estimand apply_shadows_with_truth(): Preserves complete data alongside shadowed observations compare_shadow_effects(): Full workflow comparing true vs observed effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"transport-weights-and-generalizability-0-1-2","dir":"Changelog","previous_headings":"New features","what":"Transport Weights and Generalizability","title":"margot.sim 0.1.2 (2025-06-11)","text":"simulate_ate_data_with_weights(): Direct replacement legacy function identical interface margot_transport_analysis(): Enhanced version integrating shadows transport weights Shows observational distortions affect transported estimates differently source vs target populations Handles effect modification differs sample population","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"enhanced-examples-and-documentation-0-1-2","dir":"Changelog","previous_headings":"New features","what":"Enhanced Examples and Documentation","title":"margot.sim 0.1.2 (2025-06-11)","text":"example_shadow_bias_analysis(): Complete workflow demonstrating shadow bias evaluation example_shadow_scenarios(): Compares bias across multiple shadow combinations example_weighted_shadow_analysis(): Shows transport weights interacting shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"new-vignettes-0-1-2","dir":"Changelog","previous_headings":"New features","what":"New Vignettes","title":"margot.sim 0.1.2 (2025-06-11)","text":"“Shift Interventions Sampling Weights”: Demonstrates progressive interventions population weighting “Censoring Effect Modification”: Explores differential censoring severity IPCW correction “Heterogeneous Treatment Effects Simpson’s Paradox”: Shows aggregation can mask subgroup benefits “Advanced Shift Interventions”: Covers threshold, bounded, responsive, combined shift patterns “Misclassification Bias”: Compares plain vs differential misclassification model misspecification “Practical Workflow”: Complete analysis pipeline design reporting “Transport Weights Shadows”: Generalizability observational distortions","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"dual-data-architecture-0-1-2","dir":"Changelog","previous_headings":"Improvements","what":"Dual Data Architecture","title":"margot.sim 0.1.2 (2025-06-11)","text":"Modified margot_simulate_causal() support dual data structure (data_true data_observed) Shadows now preserve original values systematically ground truth comparisons Enhanced print methods shadow results effect comparisons","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"sampling-weights-integration-0-1-2","dir":"Changelog","previous_headings":"Improvements","what":"Sampling Weights Integration","title":"margot.sim 0.1.2 (2025-06-11)","text":"Sampling weights fully integrated throughout effect computation pipeline Weights preserved shadow application process Support comparing weighted (target population) vs unweighted (source population) effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"documentation-0-1-2","dir":"Changelog","previous_headings":"Improvements","what":"Documentation","title":"margot.sim 0.1.2 (2025-06-11)","text":"Added comprehensive design documentation CLAUDE.md Updated README transport weights example Enhanced _pkgdown.yml structure new function categories","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"margot.sim 0.1.2 (2025-06-11)","text":"Fixed wave indexing properly handle margot.sim structure (wave 0: baseline, wave 1: treatment, wave 2: outcome) Improved handling non-binary treatments effect computation (appropriate warnings) Fixed recursive print method issue shadow_bias_comparison","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"margot.sim 0.1.1 (2025-06-10)","text":"Fixed vignette errors applying-shadows.Rmd monte-carlo-simple.Rmd Corrected function signatures create_positivity_shadow() analyse_shadow_effects() Fixed pkgdown accessibility warning adding aria-label GitHub icon","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"margot.sim 0.1.1 (2025-06-10)","text":"Shadows can depend variables time point earlier Prevents future information affecting past measurements Added internal functions get_time_index() validate_temporal_order() Comprehensive tests ensure temporal causality maintained","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"improvements-0-1-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"margot.sim 0.1.1 (2025-06-10)","text":"Added GitHub Actions workflows R CMD check code coverage Added badges lifecycle, license, R CMD check, code coverage, GitHub stars Cleaned internal function documentation","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"new-0-1-0","dir":"Changelog","previous_headings":"","what":"New","title":"margot.sim 0.1.0 (2025-06-10)","text":"Initial release margot.sim package Classical measurement error continuous variables Misclassification bias binary variables (sensitivity/specificity) Differential measurement error Dichotomization thresholds Correlated errors across variables Item-level missingness (MCAR, MAR, MNAR mechanisms) Positivity violations (filtering impossible exposures) Selection bias (baseline post-treatment) Parallel processing support Automatic performance metrics (bias, variance, MSE, coverage) Comparison functions multiple methods Support parametric custom distributions Distribution sets multivariate outcomes Integration margot_simulate() function via shadows parameter Comprehensive unit tests using testthat Package website using pkgdown Examples demonstrating complete workflows","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"improved-0-1-0","dir":"Changelog","previous_headings":"","what":"Improved","title":"margot.sim 0.1.0 (2025-06-10)","text":"Replaced external dependency margot::margot_process_longitudinal_data_wider() internal margot.sim::margot_process_longitudinal() function margot-simulate-core.R - Main simulation function margot-simulate-censoring.R - Censoring functions margot-simulate-causal.R - Causal inference wrapper margot-simulate-utils.R - Utility functions margot-scm-docs.R - SCM documentation margot-simulate-examples.R - Example functions Changed terminology “masks/masking” “shadows/shadowing” better metaphor Added startup message showing package version (can suppressed options(margot.sim.quiet = TRUE))","code":""}]
