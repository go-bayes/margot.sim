[{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"margot.sim Package Context","text":"margot.sim R package simulating longitudinal data realistic observational challenges evaluating causal inference methods Monte Carlo simulation. implements “shadowing” framework inspired Plato’s Allegory Cave, observed data distorted versions (“shadows”) true causal processes.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"id_1-simulation-framework","dir":"","previous_headings":"Core Components","what":"1. Simulation Framework","title":"margot.sim Package Context","text":"margot_simulate(): Main function generating longitudinal data following structural causal models margot_simulate_causal(): Wrapper causal inference simulations margot_simulate_flex(): Supports flexible non-normal distributions Handles binary continuous exposures/outcomes complex temporal relationships","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"id_2-shadowing-system","dir":"","previous_headings":"Core Components","what":"2. Shadowing System","title":"margot.sim Package Context","text":"package’s key innovation applying realistic observational distortions: Measurement Error Shadows: - Classical error, misclassification, differential error - Dichotomisation, correlated errors Missing Data Shadows: - MCAR, MAR, MNAR mechanisms - Temporal order validation (future can’t affect past) Selection/Censoring Shadows: - Positivity violations, selection bias - Post-hoc censoring various dependencies","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"id_3-monte-carlo-framework","dir":"","previous_headings":"Core Components","what":"3. Monte Carlo Framework","title":"margot.sim Package Context","text":"margot_monte_carlo(): Evaluates estimator performance systematically Calculates bias, variance, MSE, coverage automatically Supports parallel processing","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"id_4-shift-interventions-new","dir":"","previous_headings":"Core Components","what":"4. Shift Interventions (new)","title":"margot.sim Package Context","text":"Modified treatment policies (MTPs) Threshold-based wave-specific interventions","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"technical-details","dir":"","previous_headings":"","what":"Technical Details","title":"margot.sim Package Context","text":"Version: 0.1.1 (experimental) Main dependencies: tidyverse, MASS Comprehensive test coverage testthat CI/CD via GitHub Actions Documentation: 3 vignettes + extensive function docs","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"recent-changes","dir":"","previous_headings":"","what":"Recent Changes","title":"margot.sim Package Context","text":"Fixed vignette errors Added temporal order validation shadows Implemented shift intervention functions Enhanced testing documentation","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"development-practices","dir":"","previous_headings":"","what":"Development Practices","title":"margot.sim Package Context","text":"Always run R CMD check commits Update NEWS.md user-facing changes Ensure examples run without errors Follow tidyverse style guide Test shadow temporal ordering carefully","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"overview-1","dir":"","previous_headings":"Shadow Bias Comparison Framework Design","what":"Overview","title":"margot.sim Package Context","text":"framework enables systematic comparison causal effect estimates applying observational shadows, measuring data distortions affect ability recover true causal effects (ATE, ATT, ATU, eventually HTE).","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"id_1-dual-data-architecture","dir":"","previous_headings":"Shadow Bias Comparison Framework Design > Core Design Principles","what":"1. Dual Data Architecture","title":"margot.sim Package Context","text":"Always maintain two parallel datasets: data_true (complete, undistorted) data_observed (shadows) enables “ground truth” comparisons point analysis Shadows preserve original values *_true columns affected variables","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"id_2-standardized-estimand-computation","dir":"","previous_headings":"Shadow Bias Comparison Framework Design > Core Design Principles","what":"2. Standardized Estimand Computation","title":"margot.sim Package Context","text":"","code":"compute_causal_effects <- function(data, exposure, outcome, covariates = NULL, estimands = c(\"ate\", \"att\", \"atu\")) {   # Returns list with:   # - ate: Average Treatment Effect E[Y(1) - Y(0)]   # - att: Average Treatment on Treated E[Y(1) - Y(0) | A = 1]   # - atu: Average Treatment on Untreated E[Y(1) - Y(0) | A = 0]   # - (future) hte: Heterogeneous Treatment Effects by subgroups }"},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"id_3-shadow-workflow-enhancement","dir":"","previous_headings":"Shadow Bias Comparison Framework Design > Core Design Principles","what":"3. Shadow Workflow Enhancement","title":"margot.sim Package Context","text":"Simulation functions return structured output:","code":"list(   data_true = ...,           # Complete true data   data_observed = ...,       # After shadows applied   shadows_applied = ...,     # Which shadows were used   effects_true = ...,        # True causal effects   effects_observed = ...,    # Estimated from shadowed data   comparison = ...           # Bias metrics )"},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"id_4-comparison-framework","dir":"","previous_headings":"Shadow Bias Comparison Framework Design > Core Design Principles","what":"4. Comparison Framework","title":"margot.sim Package Context","text":"","code":"compare_shadow_bias <- function(effects_true, effects_observed) {   # Computes for each estimand:   # - Absolute bias   # - Relative bias (%)   # - Root mean squared error (for MC simulations)   # - Coverage (for MC simulations) }"},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"id_5-monte-carlo-integration","dir":"","previous_headings":"Shadow Bias Comparison Framework Design > Core Design Principles","what":"5. Monte Carlo Integration","title":"margot.sim Package Context","text":"Preserve true data shadowing Compute true observed effects Track bias separately estimand Return structured comparison results","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"phase-1-core-infrastructure","dir":"","previous_headings":"Shadow Bias Comparison Framework Design > Implementation Phases","what":"Phase 1: Core Infrastructure","title":"margot.sim Package Context","text":"Create compute_causal_effects() function Modify simulation functions dual data architecture Update shadow application preserve truth","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"phase-2-comparison-tools","dir":"","previous_headings":"Shadow Bias Comparison Framework Design > Implementation Phases","what":"Phase 2: Comparison Tools","title":"margot.sim Package Context","text":"Build compare_shadow_bias() function Create visualization methods Add summary statistics","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"phase-3-integration","dir":"","previous_headings":"Shadow Bias Comparison Framework Design > Implementation Phases","what":"Phase 3: Integration","title":"margot.sim Package Context","text":"Update Monte Carlo framework Ensure margot package compatibility Add comprehensive testing","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"future-extensions","dir":"","previous_headings":"Shadow Bias Comparison Framework Design","what":"Future Extensions","title":"margot.sim Package Context","text":"Model misspecification separate bias source (shadow) HTE using generic baseline variables (b1, b2, b3) Threshold-based subgroup definitions continuous variables","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"design-rationale","dir":"","previous_headings":"Shadow Bias Comparison Framework Design","what":"Design Rationale","title":"margot.sim Package Context","text":"Separates data distortions (shadows) analysis choices (models) Enables clean comparison “know” vs “can know” Maintains backward compatibility adding new capabilities Focuses getting ATE estimation right tackling heterogeneous effects","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"high-priority-tasks","dir":"","previous_headings":"Current Development Plan (2025-01-11)","what":"High Priority Tasks","title":"margot.sim Package Context","text":"Basic setup: wave 0 (baseline), wave 1 (exposure 20% misclassification), wave 2 (outcome) Compare plain vs differential misclassification (error depends baseline variables) Show differential misclassification creates bias random misclassification Location: New vignette vignettes/misclassification-bias.Rmd section shadows vignette Show users generate data correct causal structure Demonstrate fitting intentionally misspecified models (omitting confounders, wrong functional forms) Compare ATEs correctly vs incorrectly specified models Show interaction shadows model misspecification Add practical workflow vignette function examples apply_misclassification() - sensitivity/specificity examples apply_differential_error() - predictor-dependent error apply_classical_error() - basic measurement error apply_dichotomisation() - continuous binary error create_shadow() - diverse examples apply_shadows() - multiple shadows simultaneously","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"medium-priority-tasks","dir":"","previous_headings":"Current Development Plan (2025-01-11)","what":"Medium Priority Tasks","title":"margot.sim Package Context","text":"margot_simulate() - comprehensive examples margot_simulate_causal() - intervention examples compute_causal_effects() - different estimands compare_shadow_effects() - /comparisons Transport analysis functions Effect comparison functions Heterogeneity analysis","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"low-priority-tasks","dir":"","previous_headings":"Current Development Plan (2025-01-11)","what":"Low Priority Tasks","title":"margot.sim Package Context","text":"Distribution functions Helper utilities Diagnostic functions","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"implementation-notes","dir":"","previous_headings":"Current Development Plan (2025-01-11)","what":"Implementation Notes","title":"margot.sim Package Context","text":"Brief description use case Complete, runnable code Expected output interpretation 2-3 different scenarios per function relevant Focus practical, realistic examples users encounter Ensure examples demonstrate best practices","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"immediate-priorities-high-impact-for-users","dir":"","previous_headings":"Package Gaps and Future Priorities (2025-01-11)","what":"Immediate Priorities (High Impact for Users)","title":"margot.sim Package Context","text":"Complete roxygen documentation examples - Many functions lack comprehensive examples Truncation (different censoring - values beyond thresholds recorded) Coarsening (continuous data recorded bins/categories) Mode effects (measurement differences survey method) Implement basic HTE functionality - Currently limited despite design Create diagnostic visualization tools - balance, positivity, shadow validation","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"medium-term-priorities","dir":"","previous_headings":"Package Gaps and Future Priorities (2025-01-11)","what":"Medium-term Priorities","title":"margot.sim Package Context","text":"Focus lmtp integration modified treatment policies Focus causal_forests heterogeneous treatment effects Leverage batch estimators margot package (see R/-develop) Include E-value computation sensitivity analysis Note: Deprioritizing standalone G-computation/IPW/G-estimation implementations Integration tidymodels/mlr3 - Modern ML ecosystem Performance optimizations - Large data, parallel processing, memory efficiency Interactive diagnostic tools - Shiny apps exploring shadows/effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"long-term-vision","dir":"","previous_headings":"Package Gaps and Future Priorities (2025-01-11)","what":"Long-term Vision","title":"margot.sim Package Context","text":"Comprehensive HTE framework - CATE estimation, subgroup discovery, causal forests Full time-varying treatment support - Currently limited Integration hub causal methods - Bridge TMLE, SuperLearner, etc. Educational platform - Interactive tutorials, case studies","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"other-identified-gaps","dir":"","previous_headings":"Package Gaps and Future Priorities (2025-01-11)","what":"Other Identified Gaps","title":"margot.sim Package Context","text":"Missing Methods: Doubly robust, IV, regression discontinuity Advanced Features: Competing risks, multi-state models, spatial/clustered data User Experience: Pipeline functions, automatic reporting, better errors Validation: Balance diagnostics, convergence checks, cross-package validation Integration: Survey packages, export formats (SAS/Stata/SPSS)","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"key-insight","dir":"","previous_headings":"Package Gaps and Future Priorities (2025-01-11)","what":"Key Insight","title":"margot.sim Package Context","text":"main gap bridging simulation practical analysis - making easier users go “real dataset problems” “’s bias-corrected estimate appropriate uncertainty quantification.”","code":""},{"path":"https://go-bayes.github.io/margot.sim/CLAUDE.html","id":"important-instruction-reminders","dir":"","previous_headings":"","what":"important-instruction-reminders","title":"margot.sim Package Context","text":"asked; nothing , nothing less. NEVER create files unless ’re absolutely necessary achieving goal. ALWAYS prefer editing existing file creating new one. NEVER proactively create documentation files (*.md) README files. create documentation files explicitly requested User.","code":"IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context or otherwise consider it in your response unless it is highly relevant to your task. Most of the time, it is not relevant."},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"margot.sim Implementation Plan: Response to Reviews","text":"document outlines comprehensive plan address reviewer feedback maintaining package’s core strengths usability pragmatism. plan introduces advanced features parallel API, preserving backward compatibility.","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"updated-priorities-january-2025","dir":"","previous_headings":"","what":"UPDATED PRIORITIES (January 2025)","title":"margot.sim Implementation Plan: Response to Reviews","text":"Given current framework covers 90% use cases, restructuring priorities:","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"immediate-priorities-before-cran-submission","dir":"","previous_headings":"UPDATED PRIORITIES (January 2025)","what":"IMMEDIATE PRIORITIES (Before CRAN Submission)","title":"margot.sim Implementation Plan: Response to Reviews","text":"Natural Value Interventions - Small essential change Comprehensive Vignettes - Focus practical examples Heterogeneous Effects Example - Three-wave design 15+ confounders Unmeasured Confounder U - Explicit implementation Polish Documentation - Clear, practical guidance","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"long-term-planning-post-cran","dir":"","previous_headings":"UPDATED PRIORITIES (January 2025)","what":"LONG-TERM PLANNING (Post-CRAN)","title":"margot.sim Implementation Plan: Response to Reviews","text":"theoretical enhancements (frugal parameterization, SCM constructors, etc.) moved long-term development.","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"design-philosophy","dir":"","previous_headings":"","what":"Design Philosophy","title":"margot.sim Implementation Plan: Response to Reviews","text":"margot.sim package makes deliberate trade-offs favoring: 1. Usability: Simple parameter specification (e.g., a_lag_y_coef = 0.25) 2. Focus: Optimized semi-Markovian longitudinal models time-varying confounding 3. Pragmatism: Safeguards invalid specifications 4. Clarity: Clean separation data generation observational distortions","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"id_1-fixed-scm-structure-with-l-autoregression","dir":"","previous_headings":"Response to Review 1","what":"1. Fixed SCM Structure with L Autoregression","title":"margot.sim Implementation Plan: Response to Reviews","text":"Issue: model assumes L_t caused A_{t-1} Y_{t-1}, L_{t-1}. Solution: - Add parameter l_l_coef L_{t-1} → L_t autoregression - Update structural equations documentation - Add README.md: markdown   ## Limitations   - SCM structure fixed semi-Markovian longitudinal model   - Custom DAG structures require modifying core simulation code   - L autoregression supported via `l_l_coef` parameter","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"id_2-optional-parameter-validation","dir":"","previous_headings":"Response to Review 1","what":"2. Optional Parameter Validation","title":"margot.sim Implementation Plan: Response to Reviews","text":"Issue: validate_proportions() rescales coefficients automatically, obscuring parameter mapping. Solution: - Add validate_props parameter margot_simulate() (default: TRUE) - FALSE, skip coefficient rescaling - Log rescaling events details - Documentation: r   #' @param validate_props Logical. Validate rescale coefficients prevent   #'   explosive behavior? Default TRUE. Setting FALSE may result   #'   non-stationary invalid data. Use caution.","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"id_3-unmeasured-confounding","dir":"","previous_headings":"Response to Review 1","what":"3. Unmeasured Confounding","title":"margot.sim Implementation Plan: Response to Reviews","text":"Issue: unmeasured confounding treatment outcome limits robustness testing. Solution: - Add latent confounder U affecting specific L_k Y_final - New parameters: r   u_variance = 1,          # Variance latent U   u_l_effects = NULL,      # Named vector: c(\"t2_l\" = 0.3, \"t4_l\" = 0.2)   u_y_effect = 0,          # Effect final outcome - Creates collider bias conditioning affected L_k","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"id_4-natural-value-interventions","dir":"","previous_headings":"Response to Review 1","what":"4. Natural Value Interventions","title":"margot.sim Implementation Plan: Response to Reviews","text":"NOTE CLAUDE: THINK WORK, REASONS DESCRIBED REVIEWER 2 – LET’S SHELVE IDEA NOW Issue: Interventions can’t depend treatment naturally . Solution: - New intervention function signature: r   # Old: function(data, time, trt)   # New: function(data, time, trt, natural_values) - Example interventions: ```r # Treat naturally treated L > threshold modified_treatment = function(data, time, trt, natural_values) { l_var <- paste0(“t”, time, “_l”) ifelse(natural_values == 1 & data[[l_var]] > 0, 1, 0) } # Reduce natural treatment 50% shift_down = function(data, time, trt, natural_values) { natural_values * 0.5 } ```","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"id_1-frugal-parameterisation-interface","dir":"","previous_headings":"Response to Review 2","what":"1. Frugal Parameterisation Interface","title":"margot.sim Implementation Plan: Response to Reviews","text":"Create margot_simulate_frugal() Evans & Didelez framework:","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"core-design","dir":"","previous_headings":"Response to Review 2 > 1. Frugal Parameterisation Interface","what":"Core Design","title":"margot.sim Implementation Plan: Response to Reviews","text":"","code":"margot_simulate_frugal <- function(   n,   waves,   past_model,      # P(C,Z,X)   outcome_model,   # P*(Y|X,C)   dependence_model # φ* ) {   # Validate variation independence   check_variation_independent(past_model, outcome_model, dependence_model)      # Generate data following frugal parameterization   ... }"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"variation-independence-testing","dir":"","previous_headings":"Response to Review 2 > 1. Frugal Parameterisation Interface","what":"Variation Independence Testing","title":"margot.sim Implementation Plan: Response to Reviews","text":"","code":"check_variation_independent <- function(past_model, outcome_model, dependence_model) {   # 1. Sample extreme values from each component   extreme_past <- sample_extremes(past_model)   extreme_outcome <- sample_extremes(outcome_model)      # 2. Verify valid joint distribution   joint_valid <- test_joint_validity(extreme_past, extreme_outcome, dependence_model)      # 3. Check parameter overlap   param_overlap <- check_parameter_overlap(     past_model$parameters,     outcome_model$parameters,     dependence_model$parameters   )      if (!joint_valid || param_overlap) {     stop(\"Components are not variation independent. Check parameter specifications.\")   }      invisible(TRUE) }"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"s3-interface-ergonomics","dir":"","previous_headings":"Response to Review 2 > 1. Frugal Parameterisation Interface","what":"S3 Interface Ergonomics","title":"margot.sim Implementation Plan: Response to Reviews","text":"Support multiple input formats: - Expression-based: expression(B ~ mvnorm(0, Sigma_B)) - GLM-based: glm(~ B + L, family = binomial) - List-based: list(baseline = \"mvnorm\", confounder = ~ B + A_lag)","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"enhanced-shadow-metadata","dir":"","previous_headings":"Response to Review 2 > 2. Shadow Causal Coherence","what":"Enhanced Shadow Metadata","title":"margot.sim Implementation Plan: Response to Reviews","text":"","code":"create_shadow <- function(type, params) {   shadow <- list(     type = type,     params = params,     # NEW: Structural metadata     structural_equations = list(),     exogenous_terms = list(),     dag_modifications = list()   )      # Example for measurement error shadow   if (type == \"measurement_error\") {     shadow$structural_equations <- list(       observed = expression(X_obs = X_true + U_measure)     )     shadow$exogenous_terms <- list(       U_measure = list(dist = \"normal\", params = list(sd = params$sigma))     )     shadow$dag_modifications <- list(       add_nodes = \"X_obs\",       add_edges = list(from = \"X_true\", to = \"X_obs\")     )   }      class(shadow) <- c(paste0(type, \"_shadow\"), \"margot_shadow\")   shadow }"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"shadow-plotting","dir":"","previous_headings":"Response to Review 2 > 2. Shadow Causal Coherence","what":"Shadow Plotting","title":"margot.sim Implementation Plan: Response to Reviews","text":"S3 plot method visualize augmented DAG Highlight shadow components Show structural equations","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"enhanced-diagnostics","dir":"","previous_headings":"Response to Review 2 > 2. Shadow Causal Coherence","what":"Enhanced Diagnostics","title":"margot.sim Implementation Plan: Response to Reviews","text":"","code":"validate_shadow_coherence <- function(scm, shadow) {   # 1. Verify P(Y|do(X)) preservation   # 2. Check positivity support   # 3. Verify no unintended paths created      results <- list(     ate_preserved = ate_preserved,     positivity_intact = positivity_check$passed,     positivity_reduction = positivity_check$reduction,     backdoor_paths = path_check$new_paths   )      class(results) <- \"shadow_diagnostic\"   results }"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"pre-built-truth-functions","dir":"","previous_headings":"Response to Review 2 > 3. Broader Estimand Support","what":"Pre-built Truth Functions","title":"margot.sim Implementation Plan: Response to Reviews","text":"","code":"# Library of estimand functions truth_ate()  # Average Treatment Effect truth_att()  # Average Treatment on Treated truth_cde()  # Controlled Direct Effect truth_nde()  # Natural Direct Effect (with assumptions documented) truth_nie()  # Natural Indirect Effect (with assumptions documented)"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"user-defined-functions","dir":"","previous_headings":"Response to Review 2 > 3. Broader Estimand Support","what":"User-Defined Functions","title":"margot.sim Implementation Plan: Response to Reviews","text":"Allow arbitrary estimands:","code":"# Example: Quantile treatment effect truth_qte <- function(data, quantile = 0.5, ...) {   Y1 <- data$Y_potential_1   Y0 <- data$Y_potential_0      quantile(Y1, quantile) - quantile(Y0, quantile) }"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"fallback-sampler","dir":"","previous_headings":"Response to Review 2 > 4. Algorithmic Safeguards","what":"Fallback Sampler","title":"margot.sim Implementation Plan: Response to Reviews","text":"Metropolis-within-Gibbs conjugate sampling fails Automatic tuning via coda::autocorr.diag Track acceptance rates ESS","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"enhanced-diagnostics-1","dir":"","previous_headings":"Response to Review 2 > 4. Algorithmic Safeguards","what":"Enhanced Diagnostics","title":"margot.sim Implementation Plan: Response to Reviews","text":"","code":"margot_simulate <- function(..., return_diagnostics = FALSE) {   # Collect diagnostics during simulation   diagnostics <- list(     sampling_methods = list(),     acceptance_rates = list(),     ess_values = list(),     convergence_warnings = list()   )      # Package results with diagnostics   if (return_diagnostics) {     attr(df, \"diagnostics\") <- diagnostics     class(df) <- c(\"margot_sim_diagnostic\", class(df))   } }"},{"path":[]},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"id_1-natural-value-interventions","dir":"","previous_headings":"IMMEDIATE IMPLEMENTATION PLAN > Week 1: Core Features","what":"1. Natural Value Interventions","title":"margot.sim Implementation Plan: Response to Reviews","text":"File: R/margot-simulate-core.R - Modify lines 436-444 pass natural values - Change intervention signature include natural_values parameter - Test shift interventions","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"id_2-unmeasured-confounder-u","dir":"","previous_headings":"IMMEDIATE IMPLEMENTATION PLAN > Week 1: Core Features","what":"2. Unmeasured Confounder U","title":"margot.sim Implementation Plan: Response to Reviews","text":"File: R/margot-simulate-core.R - Add .default_sim_params(): r   u_variance = 1,   u_l_effects = c(),  # e.g., c(\"t2_l\" = 0.3)   u_y_effect = 0 - Generate U ~ N(0, u_variance) per subject - Apply specified L_k final Y","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"vignette-1-heterogeneous-effects-tutorialrmd","dir":"","previous_headings":"IMMEDIATE IMPLEMENTATION PLAN > Week 2: Vignettes Development","what":"VIGNETTE 1: “heterogeneous-effects-tutorial.Rmd”","title":"margot.sim Implementation Plan: Response to Reviews","text":"CLEAR INSTRUCTIONS DEVELOPMENT:","code":"# Three-wave design (t0, t1, t2) # Exposure at t1 affects outcome at t2 # 15+ baseline confounders including: # - 5 continuous (b1-b5) # - 5 binary (b6-b10)  # - 3 categorical (b11-b13) # - 1 baseline exposure (t0_a) # - 1 baseline outcome (t0_y)  # Key heterogeneity: # - b1 * t1_a -> t2_y (strong positive) # - b2 * t1_a -> t2_y (strong negative) # - t0_y * t1_a -> t2_y (effect modification by baseline outcome)  # Parameters to set: n_baselines = 15 a_b1_y_het = 0.5   # Strong positive modification a_b2_y_het = -0.4  # Strong negative modification a_y0_y_het = 0.6   # Strong baseline outcome modification  # Show: # 1. Subgroup analysis # 2. Forest plots # 3. Interaction tests # 4. Practical interpretation"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"vignette-2-practical-shift-interventionsrmd","dir":"","previous_headings":"IMMEDIATE IMPLEMENTATION PLAN > Week 2: Vignettes Development","what":"VIGNETTE 2: “practical-shift-interventions.Rmd”","title":"margot.sim Implementation Plan: Response to Reviews","text":"CLEAR INSTRUCTIONS:","code":"# Focus on 3 realistic scenarios:  # 1. Clinical: Medication dosing # - Current dose 1-7 units # - Policy: Increase by 1 if safe (<=6) # - Show health outcomes  # 2. Educational: Study hours # - Current 0-10 hours/week # - Policy: Minimum 3 hours # - Show achievement outcomes  # 3. Environmental: Exposure reduction # - Current exposure 0-100 units # - Policy: Reduce by 20% if >50 # - Show health impacts  # Each example should: # - Define the context # - Show the intervention code # - Run simulation # - Interpret results # - Discuss policy implications"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"vignette-3-monte-carlo-best-practicesrmd","dir":"","previous_headings":"IMMEDIATE IMPLEMENTATION PLAN > Week 2: Vignettes Development","what":"VIGNETTE 3: “monte-carlo-best-practices.Rmd”","title":"margot.sim Implementation Plan: Response to Reviews","text":"CLEAR INSTRUCTIONS:","code":"# Complete workflow showing:  # 1. Define truth (ATE = 0.3) # 2. Add realistic biases: #    - Confounding (via L) #    - Selection (20% MNAR) #    - Measurement error (sigma = 0.5)  # 3. Compare estimators: #    - Naive (biased) #    - IPW (correct for selection) #    - G-computation (correct for confounding) #    - TMLE (doubly robust)  # 4. Results presentation: #    - Bias/variance tradeoff plot #    - Coverage probability #    - Practical recommendations"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"vignette-4-unmeasured-confoundingrmd","dir":"","previous_headings":"IMMEDIATE IMPLEMENTATION PLAN > Week 2: Vignettes Development","what":"VIGNETTE 4: “unmeasured-confounding.Rmd”","title":"margot.sim Implementation Plan: Response to Reviews","text":"CLEAR INSTRUCTIONS:","code":"# Show impact of unmeasured confounding:  # 1. Generate U affecting L2 and Y_final # 2. Fit models with/without L2 # 3. Show resulting bias # 4. Sensitivity analysis # 5. Bounds on causal effects  # Key message: Even good methods fail with unmeasured confounding"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"week-3-testing-and-polish","dir":"","previous_headings":"IMMEDIATE IMPLEMENTATION PLAN","what":"Week 3: Testing and Polish","title":"margot.sim Implementation Plan: Response to Reviews","text":"Comprehensive tests new features README updates limitations Website update new vignettes Final R CMD check","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"moved-to-future-development","dir":"","previous_headings":"LONG-TERM FEATURES (Post-CRAN)","what":"Moved to Future Development:","title":"margot.sim Implementation Plan: Response to Reviews","text":"margot_simulate_frugal() Variation independence testing S3 interface ergonomics Shadow metadata plotting Causal coherence validation DAG visualization Natural direct/indirect effects Path-specific effects Cross-world assumptions Metropolis-within-Gibbs fallback Convergence diagnostics Adaptive sampling create_scm() function Modular specification Custom DAG support","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"phase-2-frugal-interface-3-weeks","dir":"","previous_headings":"LONG-TERM FEATURES (Post-CRAN)","what":"Phase 2: Frugal Interface (3 weeks)","title":"margot.sim Implementation Plan: Response to Reviews","text":"Medium Priority - Next release Implement margot_simulate_frugal() S3 methods input formats Variation independence checking Add U parameters Implement collider bias structure Metadata structure Plot methods Coherence validation","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"phase-3-advanced-features-2-weeks","dir":"","previous_headings":"LONG-TERM FEATURES (Post-CRAN)","what":"Phase 3: Advanced Features (2 weeks)","title":"margot.sim Implementation Plan: Response to Reviews","text":"Pre-built truth functions User-defined support Path-specific effects Fallback samplers Diagnostic collection Reporting methods","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"phase-4-documentation--testing-1-week","dir":"","previous_headings":"LONG-TERM FEATURES (Post-CRAN)","what":"Phase 4: Documentation & Testing (1 week)","title":"margot.sim Implementation Plan: Response to Reviews","text":"Full SCM documentation DAG visualizations Multiple examples Unit tests new features Integration tests Performance benchmarks","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"modified-files","dir":"","previous_headings":"File Structure","what":"Modified Files","title":"margot.sim Implementation Plan: Response to Reviews","text":"","code":"README.md                      # Add limitations section R/margot-simulate-core.R       # Core enhancements R/margot-shadows.R             # Enhanced shadow framework man/*.Rd                       # Updated documentation tests/testthat/                # New tests"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"new-files","dir":"","previous_headings":"File Structure","what":"New Files","title":"margot.sim Implementation Plan: Response to Reviews","text":"","code":"R/margot-simulate-frugal.R     # Frugal parameterization R/margot-scm-constructor.R     # SCM object creation R/margot-truth-functions.R     # Estimand library R/margot-diagnostics.R         # Diagnostic utilities vignettes/scm-specification.Rmd # Comprehensive documentation"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"backward-compatibility","dir":"","previous_headings":"","what":"Backward Compatibility","title":"margot.sim Implementation Plan: Response to Reviews","text":"changes maintain backward compatibility: - Original margot_simulate() API unchanged (except new optional parameters) - New functions additions, replacements - Existing code continues work without modification - Dual API approach serves pragmatic users requiring theoretical purity","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"testing-strategy","dir":"","previous_headings":"","what":"Testing Strategy","title":"margot.sim Implementation Plan: Response to Reviews","text":"new function Edge cases validation S3 method dispatch Full simulation workflows Shadow application chains Monte Carlo new features Benchmark current version Memory usage profiling Scaling n waves","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"documentation-plan","dir":"","previous_headings":"","what":"Documentation Plan","title":"margot.sim Implementation Plan: Response to Reviews","text":"Comprehensive roxygen2 Examples feature Cross-references “Getting Started” (updated) “Advanced Features Frugal Parameterization” “Understanding Causal Coherence” “Custom Estimands Truth Functions” Limitations section Feature comparison table Migration guide","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"success-criteria","dir":"","previous_headings":"","what":"Success Criteria","title":"margot.sim Implementation Plan: Response to Reviews","text":"reviewer concerns addressed Backward compatibility maintained Tests pass >95% coverage Documentation complete clear Performance within 10% current version CRAN submission ready","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"references","dir":"","previous_headings":"","what":"References","title":"margot.sim Implementation Plan: Response to Reviews","text":"Evans, R. J., & Didelez, V. (2024). Parameterizing Simulating Causal Models. Journal Royal Statistical Society: Series B, 86(3), 535-561. Pearl, J. (2009). Causality. Cambridge University Press. Hernán, M. ., & Robins, J. M. (2020). Causal Inference: . Chapman & Hall/CRC.","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"reboot-instructions","dir":"","previous_headings":"","what":"REBOOT INSTRUCTIONS","title":"margot.sim Implementation Plan: Response to Reviews","text":"returning project autocompat:","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"priority-1-natural-value-interventions","dir":"","previous_headings":"REBOOT INSTRUCTIONS","what":"Priority 1: Natural Value Interventions","title":"margot.sim Implementation Plan: Response to Reviews","text":"Open R/margot-simulate-core.R Find lines 436-444 (intervention application) Modify pass natural_a intervention function Update examples show new signature","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"priority-2-heterogeneous-effects-vignette","dir":"","previous_headings":"REBOOT INSTRUCTIONS","what":"Priority 2: Heterogeneous Effects Vignette","title":"margot.sim Implementation Plan: Response to Reviews","text":"Create vignettes/heterogeneous-effects-tutorial.Rmd Use template Week 2 15+ baseline confounders Binary confounders: Generate rbinom(n, 1, 0.5) Categorical: Use sample(1:3, n, replace = TRUE) Show forest plot subgroup effects Test interactions lm(y ~ * b1 + * b2 + * t0_y)","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"priority-3-unmeasured-confounder-u","dir":"","previous_headings":"REBOOT INSTRUCTIONS","what":"Priority 3: Unmeasured Confounder U","title":"margot.sim Implementation Plan: Response to Reviews","text":"Add parameters .default_sim_params() Generate U per subject (time-varying) Add U effects specified L_k final Y Create sensitivity analysis vignette","code":""},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"quick-test-after-implementation","dir":"","previous_headings":"REBOOT INSTRUCTIONS","what":"Quick Test After Implementation:","title":"margot.sim Implementation Plan: Response to Reviews","text":"","code":"# Test natural values work test_shift <- function(data, time, trt, natural_values) {   # Should receive natural values   if (time == 1) {     return(pmin(natural_values + 1, 7))   }   return(natural_values) }  # Test heterogeneous effects sim <- margot_simulate(   n = 1000,   waves = 2,   n_baselines = 15,   params = list(     a_b1_y_het = 0.5,     a_b2_y_het = -0.4,     a_y0_y_het = 0.6   ) )  # Check heterogeneity fit <- lm(t2_y ~ t1_a * b1 + t1_a * b2 + t1_a * t0_y, data = sim) summary(fit)  # Should see significant interactions"},{"path":"https://go-bayes.github.io/margot.sim/IMPLEMENTATION_PLAN.html","id":"file-organization","dir":"","previous_headings":"REBOOT INSTRUCTIONS","what":"File Organization:","title":"margot.sim Implementation Plan: Response to Reviews","text":"","code":"vignettes/ ├── heterogeneous-effects-tutorial.Rmd  # Priority vignette ├── practical-shift-interventions.Rmd   # Real-world examples ├── monte-carlo-best-practices.Rmd      # Complete workflow └── unmeasured-confounding.Rmd          # Sensitivity analysis  R/ ├── margot-simulate-core.R  # Modify for natural values & U ├── margot-shift-interventions.R  # Already created └── margot-heterogeneity-example.R  # Update for 15 confounders"},{"path":[]},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-1-enforce-temporal-order-validation-across-all-shadow-types","dir":"","previous_headings":"Critical Issues","what":"Issue 1: Enforce temporal order validation across all shadow types","title":"GitHub Issues for margot.sim","text":"Priority: High Labels: bug, validation Currently, temporal order validation applied shadow types. Need : - Enforce validation apply_shadows() shadow types - Ensure shadows can depend concurrent past variables - Add comprehensive tests","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-2-add-validation-for-estimator-returns-in-monte-carlo","dir":"","previous_headings":"Critical Issues","what":"Issue 2: Add validation for estimator returns in Monte Carlo","title":"GitHub Issues for margot.sim","text":"Priority: HighLabels: enhancement, validation margot_monte_carlo() validate estimator functions return required fields: - Check estimate (required) - Warn missing se converged - Provide clear error messages","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-3-clarify-two-stage-censoring-approach","dir":"","previous_headings":"Critical Issues","what":"Issue 3: Clarify two-stage censoring approach","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: documentation relationship apply_censoring = TRUE margot_simulate() apply_censoring_post_hoc() confusing: - Document censoring probs calculated applied - Provide clear workflow examples - Consider renaming clarity","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-4-implement-heterogeneous-treatment-effects-by-baseline-covariates","dir":"","previous_headings":"Critical Issues","what":"Issue 4: Implement heterogeneous treatment effects by baseline covariates","title":"GitHub Issues for margot.sim","text":"Priority: High Labels: enhancement, feature Add support treatment effect heterogeneity baseline characteristics: - Effect modification baseline covariates (b1, b2, b3) - Effect modification baseline outcome (t0_y) available - Effect modification baseline exposure (t0_a) - Clear documentation examples","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-5-track-shadow-interaction-effects","dir":"","previous_headings":"Critical Issues","what":"Issue 5: Track shadow interaction effects","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: enhancement, validation multiple shadows applied sequentially: - Track earlier shadows affect later ones - Warn potentially problematic combinations - Document shadow ordering best practices","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-6-validate-intervention-function-outputs","dir":"","previous_headings":"Critical Issues","what":"Issue 6: Validate intervention function outputs","title":"GitHub Issues for margot.sim","text":"Priority: High Labels: bug, validation Add validation intervention functions applied: - Check binary treatments 0/1 - Check continuous treatments within reasonable bounds - Provide informative error messages","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-7-add-warnings-for-positivity-violations","dir":"","previous_headings":"Critical Issues","what":"Issue 7: Add warnings for positivity violations","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: enhancement, user-experience positivity shadows filter data: - Warn >X% data removed - Report strata empty - Suggest diagnostics","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-8-fix-misclassification-for-continuous-variables","dir":"","previous_headings":"Critical Issues","what":"Issue 8: Fix misclassification for continuous variables","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: bug Currently warns continues. either: - Error clear message continuous vars - Implement proper continuous misclassification","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-9-add-memory-efficient-options-for-large-monte-carlo","dir":"","previous_headings":"Critical Issues","what":"Issue 9: Add memory-efficient options for large Monte Carlo","title":"GitHub Issues for margot.sim","text":"Priority: Low Labels: enhancement, performance large simulations save_data = TRUE: - Option save disk - Implement chunking - Document memory requirements","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-10-document-parallel-processing-limitations","dir":"","previous_headings":"Critical Issues","what":"Issue 10: Document parallel processing limitations","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: documentation Clarify functions/objects available parallel workers: - Document objects need explicit export - Provide examples custom functions - Add troubleshooting guide","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-11-implement-flexible-baseline-covariate-generation","dir":"","previous_headings":"Critical Issues","what":"Issue 11: Implement flexible baseline covariate generation","title":"GitHub Issues for margot.sim","text":"Priority: Medium Labels: enhancement, feature Currently hardcoded MVN(0, Σ) correlation 0.3: - Allow custom baseline distributions - Support categorical baselines - Enable time-varying baseline generation","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-12-add-support-for-bounded-continuous-outcomes","dir":"","previous_headings":"Critical Issues","what":"Issue 12: Add support for bounded continuous outcomes","title":"GitHub Issues for margot.sim","text":"Priority: Low Labels: enhancement, feature Many real outcomes natural bounds: - Add outcome_bounds parameter - Implement appropriate transformations - Document bounded outcome handling","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-13-clarify-causal-estimands-in-longitudinal-settings","dir":"","previous_headings":"Critical Issues","what":"Issue 13: Clarify causal estimands in longitudinal settings","title":"GitHub Issues for margot.sim","text":"Priority: High Labels: documentation Better documentation estimands mean longitudinally: - Define ATE time periods - Clarify natural vs stochastic interventions - Provide estimand notation","code":""},{"path":"https://go-bayes.github.io/margot.sim/ISSUES.html","id":"issue-14-add-performance-benchmarks","dir":"","previous_headings":"Critical Issues","what":"Issue 14: Add performance benchmarks","title":"GitHub Issues for margot.sim","text":"Priority: Low Labels: documentation, performance Provide guidance computational complexity: - Benchmark different parameter combinations - Document memory/time scaling - Optimization tips","code":""},{"path":"https://go-bayes.github.io/margot.sim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Joseph Bulbulia Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Advanced Shift Interventions: Practical Patterns","text":"vignette explores advanced shift intervention patterns arise real-world applications: Threshold-based interventions - Bringing everyone minimum standard Bounded realistic shifts - Respecting practical constraints Dynamic responsive interventions - Shifts depend individual characteristics Incremental propensity interventions - Nudging treatment probabilities Combined intervention strategies - Multiple simultaneous shifts patterns demonstrate modified treatment policies (MTPs) can represent realistic, implementable interventions.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"example-1-threshold-based-minimum-standards","dir":"Articles","previous_headings":"","what":"Example 1: Threshold-Based Minimum Standards","title":"Advanced Shift Interventions: Practical Patterns","text":"Many real interventions aim ensure everyone meets minimum standard rather shifting everyone equally.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"scenario-minimum-physical-activity-guidelines","dir":"Articles","previous_headings":"Example 1: Threshold-Based Minimum Standards","what":"Scenario: Minimum Physical Activity Guidelines","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"set.seed(2025)  # Create threshold intervention: Everyone below 3 units brought up to 3 # (e.g., ensuring minimum 150 minutes/week of moderate activity) minimum_activity_intervention <- create_threshold_shift(   threshold = 3,   shift_to = 3,   direction = \"up\",   start_wave = 1 )  # Simulate data with heterogeneous baseline activity n <- 2000 waves <- 3  # Parameters favoring persistence of behaviour activity_params <- list(   a_lag_a_coef = 0.7,  # Strong autocorrelation in activity   a_lag_y_coef = 0.4,  # Activity improves health outcomes   b1_a_coef = 0.5,     # Some people naturally more active (b1 = fitness level)   exposure_type = \"continuous\" )  # Compare natural vs intervention results <- margot_simulate_causal(   n = n,   waves = waves,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]],     minimum_standard = minimum_activity_intervention   ),   common_params = list(     params = activity_params   ),   seed = 2025 )  # Extract data natural_data <- results$data$natural intervention_data <- results$data$minimum_standard  # Visualize the intervention effect on distributions plot_data <- bind_rows(   natural_data %>%      select(id, t0_a, t1_a, t2_a) %>%     mutate(scenario = \"Natural\"),   intervention_data %>%     select(id, t0_a, t1_a, t2_a) %>%     mutate(scenario = \"Minimum Standard\") ) %>%   pivot_longer(cols = starts_with(\"t\"), names_to = \"wave\", values_to = \"activity\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)))  # Distribution plots p1 <- ggplot(plot_data %>% filter(wave == 0),               aes(x = activity, fill = scenario)) +   geom_histogram(alpha = 0.6, position = \"identity\", bins = 30) +   geom_vline(xintercept = 3, linetype = \"dashed\", color = \"red\") +   scale_fill_manual(values = c(\"Natural\" = \"#E69F00\", \"Minimum Standard\" = \"#56B4E9\")) +   labs(title = \"Baseline (Wave 0): Identical Distributions\",        x = \"Activity Level\", y = \"Count\") +   theme_minimal()  p2 <- ggplot(plot_data %>% filter(wave == 1),               aes(x = activity, fill = scenario)) +   geom_histogram(alpha = 0.6, position = \"identity\", bins = 30) +   geom_vline(xintercept = 3, linetype = \"dashed\", color = \"red\") +   scale_fill_manual(values = c(\"Natural\" = \"#E69F00\", \"Minimum Standard\" = \"#56B4E9\")) +   labs(title = \"Wave 1: Threshold Intervention Applied\",        subtitle = \"No one below minimum standard in intervention group\",        x = \"Activity Level\", y = \"Count\") +   theme_minimal()  print(p1 / p2) # Calculate effects cat(\"\\n=== Threshold Intervention Effects ===\\n\") #>  #> === Threshold Intervention Effects === cat(\"Proportion below threshold at Wave 1:\\n\") #> Proportion below threshold at Wave 1: cat(\"  Natural:\", mean(natural_data$t1_a < 3), \"\\n\") #>   Natural: 1 cat(\"  Intervention:\", mean(intervention_data$t1_a < 3), \"\\n\") #>   Intervention: 0  # Health outcomes outcome_effect <- mean(intervention_data$t4_y) - mean(natural_data$t4_y) cat(\"\\nHealth outcome improvement:\", round(outcome_effect, 3), \"\\n\") #>  #> Health outcome improvement: 1.535  # Who benefits most? threshold_effects <- bind_rows(   natural_data %>%      mutate(       initially_below = t0_a < 3,       scenario = \"Natural\"     ),   intervention_data %>%     mutate(       initially_below = t0_a < 3,       scenario = \"Intervention\"     ) ) %>%   group_by(scenario, initially_below) %>%   summarise(     n = n(),     mean_outcome = mean(t4_y),     .groups = \"drop\"   ) %>%   pivot_wider(names_from = scenario, values_from = mean_outcome) %>%   mutate(effect = Intervention - Natural)  cat(\"\\nDifferential effects by baseline status:\\n\") #>  #> Differential effects by baseline status: print(threshold_effects) #> # A tibble: 1 × 5 #>   initially_below     n Intervention Natural effect #>   <lgl>           <int>        <dbl>   <dbl>  <dbl> #> 1 TRUE             2000         1.94   0.409   1.54"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"example-2-realistic-bounded-shifts-with-decay","dir":"Articles","previous_headings":"","what":"Example 2: Realistic Bounded Shifts with Decay","title":"Advanced Shift Interventions: Practical Patterns","text":"Real interventions often bounded effects decay time.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"scenario-workplace-wellness-program","dir":"Articles","previous_headings":"Example 2: Realistic Bounded Shifts with Decay","what":"Scenario: Workplace Wellness Program","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"# Create realistic intervention with: # - Maximum 20% improvement  # - Respects individual capacity limits # - Effect decays over time  create_realistic_wellness_shift <- function(initial_boost = 0.2,                                            decay_rate = 0.5,                                           individual_max_multiplier = 1.5) {   function(data, time, trt) {     if (time == 0) {       return(data[[trt]])     }          # Get baseline values to determine individual capacity     baseline_var <- \"t0_a\"     baseline_values <- data[[baseline_var]]          # Individual maximum based on baseline (some people have higher capacity)     individual_max <- baseline_values * individual_max_multiplier          # Current natural values     current_values <- data[[trt]]          # Calculate boost with decay     time_since_start <- time - 1     current_boost <- initial_boost * (decay_rate ^ time_since_start)          # Apply bounded shift     shifted_values <- current_values * (1 + current_boost)          # Respect individual maximums     bounded_values <- pmin(shifted_values, individual_max)          # Also respect absolute maximum (e.g., scale limit)     final_values <- pmin(bounded_values, 7)          return(final_values)   } }  # Create the intervention wellness_shift <- create_realistic_wellness_shift(   initial_boost = 0.2,      # 20% initial boost   decay_rate = 0.7,         # 30% decay per wave   individual_max_multiplier = 1.5  # Can't exceed 150% of baseline )  # Simulate with the wellness intervention wellness_results <- margot_simulate_causal(   n = 1500,   waves = 5,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]],     wellness = wellness_shift   ),   common_params = list(     params = list(       a_lag_a_coef = 0.8,  # High persistence       a_lag_y_coef = 0.3   # Moderate health effect     )   ),   seed = 2025 )  # Extract and analyze trajectory trajectory_data <- bind_rows(   wellness_results$data$natural %>%     select(id, starts_with(\"t\") & ends_with(\"_a\")) %>%     mutate(scenario = \"Natural\"),   wellness_results$data$wellness %>%     select(id, starts_with(\"t\") & ends_with(\"_a\")) %>%     mutate(scenario = \"Wellness Program\") ) %>%   pivot_longer(cols = starts_with(\"t\"), names_to = \"wave\", values_to = \"activity\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)))  # Calculate mean trajectories mean_trajectories <- trajectory_data %>%   group_by(scenario, wave) %>%   summarise(     mean_activity = mean(activity),     se_activity = sd(activity) / sqrt(n()),     .groups = \"drop\"   )  # Plot trajectories p_trajectory <- ggplot(mean_trajectories,                        aes(x = wave, y = mean_activity, color = scenario)) +   geom_line(size = 1.2) +   geom_point(size = 3) +   geom_errorbar(aes(ymin = mean_activity - 1.96 * se_activity,                     ymax = mean_activity + 1.96 * se_activity),                 width = 0.1) +   scale_color_manual(values = c(\"Natural\" = \"#E69F00\",                                 \"Wellness Program\" = \"#56B4E9\")) +   labs(     title = \"Realistic Intervention with Decay\",     subtitle = \"Initial boost followed by gradual decay\",     x = \"Wave\",     y = \"Mean Activity Level (95% CI)\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p_trajectory) # Show individual heterogeneity in response individual_effects <- wellness_results$data$wellness %>%   mutate(     baseline_category = cut(t0_a, breaks = c(0, 2, 4, 7),                            labels = c(\"Low\", \"Medium\", \"High\")),     max_achieved = pmax(t1_a, t2_a, t3_a, t4_a, t5_a),     improvement_ratio = max_achieved / t0_a   )  p_hetero <- ggplot(individual_effects,                     aes(x = baseline_category, y = improvement_ratio)) +   geom_boxplot(fill = \"#56B4E9\", alpha = 0.7) +   geom_hline(yintercept = 1.5, linetype = \"dashed\", color = \"red\") +   labs(     title = \"Heterogeneous Response to Intervention\",     subtitle = \"Improvement limited by individual capacity (red line = 150% cap)\",     x = \"Baseline Activity Level\",     y = \"Maximum Improvement Ratio\"   ) +   theme_minimal()  print(p_hetero)"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"example-3-dynamic-responsive-interventions","dir":"Articles","previous_headings":"","what":"Example 3: Dynamic Responsive Interventions","title":"Advanced Shift Interventions: Practical Patterns","text":"Interventions adapt based individual characteristics responses.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"scenario-personalized-learning-support","dir":"Articles","previous_headings":"Example 3: Dynamic Responsive Interventions","what":"Scenario: Personalized Learning Support","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"# Create intervention that responds to: # - Current performance (stronger support for struggling students) # - Rate of improvement (reduce support for rapid improvers) # - Individual characteristics (consider baseline ability)  create_responsive_intervention <- function(data, time, trt) {   if (time == 0) {     return(data[[trt]])   }      current_values <- data[[trt]]      # Get performance indicators   if (time > 1) {     # Previous outcome as performance indicator     prev_outcome_var <- paste0(\"t\", time - 1, \"_y\")     if (prev_outcome_var %in% names(data)) {       performance <- data[[prev_outcome_var]]              # Identify struggling students (bottom quartile)       struggling <- performance < quantile(performance, 0.25, na.rm = TRUE)              # Calculate improvement rate if possible       if (time > 2) {         prev_prev_outcome <- paste0(\"t\", time - 2, \"_y\")         if (prev_prev_outcome %in% names(data)) {           improvement_rate <- performance - data[[prev_prev_outcome]]           rapid_improvers <- improvement_rate > quantile(improvement_rate, 0.75, na.rm = TRUE)         } else {           rapid_improvers <- rep(FALSE, length(performance))         }       } else {         rapid_improvers <- rep(FALSE, length(performance))       }              # Apply differential shifts       shifted_values <- current_values              # Larger shift for struggling students       shifted_values[struggling] <- pmin(current_values[struggling] + 2, 7)              # Moderate shift for others       shifted_values[!struggling & !rapid_improvers] <-          pmin(current_values[!struggling & !rapid_improvers] + 1, 7)              # No additional support for rapid improvers (they're doing well)       # shifted_values[rapid_improvers] stay at current values              return(shifted_values)     }   }      # Default shift if we can't determine performance   return(pmin(current_values + 1, 7)) }  # Parameters for educational setting education_params <- list(   a_lag_y_coef = 0.4,      # Support improves outcomes   y_lag_y_coef = 0.6,      # Outcome persistence   b1_y_coef = 0.5,         # Baseline ability matters   l_y_coef = 0.3,          # Time-varying factors   exposure_type = \"continuous\" )  # Simulate responsive intervention responsive_results <- margot_simulate_causal(   n = 1500,   waves = 4,   treatments = \"a\",   interventions = list(     uniform = create_shift_intervention(1, 1, 7, start_wave = 1),     responsive = create_responsive_intervention   ),   common_params = list(     params = education_params   ),   seed = 2025 )  # Analyze who gets what level of support support_analysis <- responsive_results$data$responsive %>%   mutate(     # Categorize by baseline ability     ability_group = cut(b1, breaks = c(-Inf, -0.5, 0.5, Inf),                        labels = c(\"Low\", \"Medium\", \"High\")),     # Calculate total support received     total_support = t1_a + t2_a + t3_a + t4_a,     # Final outcome     final_outcome = t5_y   )  # Compare support allocation support_summary <- support_analysis %>%   group_by(ability_group) %>%   summarise(     n = n(),     mean_total_support = mean(total_support),     sd_support = sd(total_support),     mean_outcome = mean(final_outcome),     .groups = \"drop\"   )  cat(\"\\n=== Responsive Intervention Analysis ===\\n\") #>  #> === Responsive Intervention Analysis === cat(\"Support allocation by baseline ability:\\n\") #> Support allocation by baseline ability: print(support_summary) #> # A tibble: 3 × 5 #>   ability_group     n mean_total_support sd_support mean_outcome #>   <fct>         <int>              <dbl>      <dbl>        <dbl> #> 1 Low             470               6.06      1.07        0.0657 #> 2 Medium          549               6.39      1.06        0.943  #> 3 High            481               6.65      0.971       1.95  # Visualize adaptive support over time adaptive_plot_data <- support_analysis %>%   group_by(ability_group) %>%   sample_n(min(50, n())) %>%  # Sample for clarity   ungroup() %>%   select(id, ability_group, t1_a, t2_a, t3_a, t4_a) %>%   pivot_longer(cols = starts_with(\"t\"), names_to = \"wave\", values_to = \"support\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)))  p_adaptive <- ggplot(adaptive_plot_data,                       aes(x = wave, y = support, group = id, color = ability_group)) +   geom_line(alpha = 0.3) +   facet_wrap(~ ability_group) +   scale_color_manual(values = c(\"Low\" = \"#D55E00\", \"Medium\" = \"#F0E442\", \"High\" = \"#009E73\")) +   labs(     title = \"Adaptive Support Patterns by Ability Group\",     subtitle = \"Low ability students receive more intensive, sustained support\",     x = \"Wave\",     y = \"Support Level\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  print(p_adaptive) # Compare effectiveness effectiveness_comparison <- bind_rows(   responsive_results$data$uniform %>%     mutate(intervention = \"Uniform\",             ability_group = cut(b1, breaks = c(-Inf, -0.5, 0.5, Inf),                               labels = c(\"Low\", \"Medium\", \"High\"))),   support_analysis %>%     mutate(intervention = \"Responsive\") ) %>%   group_by(intervention, ability_group) %>%   summarise(     n = n(),     mean_outcome = mean(t5_y),     .groups = \"drop\"   ) %>%   pivot_wider(names_from = intervention, values_from = mean_outcome) %>%   mutate(benefit = Responsive - Uniform)  cat(\"\\n=== Effectiveness Comparison ===\\n\") #>  #> === Effectiveness Comparison === cat(\"Benefit of responsive vs uniform intervention:\\n\") #> Benefit of responsive vs uniform intervention: print(effectiveness_comparison) #> # A tibble: 3 × 5 #>   ability_group     n Responsive Uniform benefit #>   <fct>         <int>      <dbl>   <dbl>   <dbl> #> 1 Low             470     0.0657  0.0657       0 #> 2 Medium          549     0.943   0.943        0 #> 3 High            481     1.95    1.95         0"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"example-4-propensity-based-nudge-interventions","dir":"Articles","previous_headings":"","what":"Example 4: Propensity-Based Nudge Interventions","title":"Advanced Shift Interventions: Practical Patterns","text":"Interventions shift probability treatment rather deterministic values.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"scenario-preventive-healthcare-uptake","dir":"Articles","previous_headings":"Example 4: Propensity-Based Nudge Interventions","what":"Scenario: Preventive Healthcare Uptake","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"# Create intervention that increases odds of preventive care by 50% preventive_care_nudge <- create_ips_intervention(   delta = 1.5,  # 50% increase in odds   start_wave = 1 )  # For binary outcomes, we need different parameters binary_params <- list(   exposure_type = \"binary\",   a_lag_y_coef = 0.5,      # Preventive care improves health   b1_a_coef = 0.3,         # Health consciousness affects uptake   l_a_coef = 0.4           # Time-varying barriers )  # Simulate nudge intervention nudge_results <- margot_simulate_causal(   n = 2000,   waves = 3,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]],     nudge = preventive_care_nudge   ),   common_params = list(     params = binary_params   ),   seed = 2025 )  # Analyze uptake patterns uptake_comparison <- bind_rows(   nudge_results$data$natural %>%     select(id, b1, t0_a, t1_a, t2_a, t3_a, t4_y) %>%     mutate(scenario = \"Natural\"),   nudge_results$data$nudge %>%     select(id, b1, t0_a, t1_a, t2_a, t3_a, t4_y) %>%     mutate(scenario = \"Nudge\") ) %>%   mutate(     health_conscious = b1 > 0,     ever_treated = (t1_a + t2_a + t3_a) > 0   )  # Calculate uptake rates uptake_summary <- uptake_comparison %>%   group_by(scenario, health_conscious) %>%   summarise(     n = n(),     baseline_rate = mean(t0_a),     wave1_rate = mean(t1_a),     wave2_rate = mean(t2_a),     wave3_rate = mean(t3_a),     ever_treated_rate = mean(ever_treated),     mean_outcome = mean(t4_y),     .groups = \"drop\"   )  cat(\"\\n=== Preventive Care Nudge Analysis ===\\n\") #>  #> === Preventive Care Nudge Analysis === print(uptake_summary) #> # A tibble: 4 × 9 #>   scenario health_conscious     n baseline_rate wave1_rate wave2_rate wave3_rate #>   <chr>    <lgl>            <int>         <dbl>      <dbl>      <dbl>      <dbl> #> 1 Natural  FALSE              956         0.458      0.521      0.468      0.512 #> 2 Natural  TRUE              1044         0.514      0.565      0.599      0.606 #> 3 Nudge    FALSE              956         0.458      0.657      0.642      0.629 #> 4 Nudge    TRUE              1044         0.514      0.638      0.659      0.610 #> # ℹ 2 more variables: ever_treated_rate <dbl>, mean_outcome <dbl>  # Visualize uptake trajectories uptake_trajectory <- uptake_summary %>%   select(scenario, health_conscious, baseline_rate, wave1_rate, wave2_rate, wave3_rate) %>%   pivot_longer(cols = ends_with(\"_rate\"), names_to = \"wave\", values_to = \"uptake_rate\") %>%   mutate(     wave = case_when(       wave == \"baseline_rate\" ~ 0,       wave == \"wave1_rate\" ~ 1,       wave == \"wave2_rate\" ~ 2,       wave == \"wave3_rate\" ~ 3     ),     group = paste(scenario, ifelse(health_conscious, \"Health Conscious\", \"Not Health Conscious\"))   )  p_uptake <- ggplot(uptake_trajectory,                     aes(x = wave, y = uptake_rate, color = scenario, linetype = health_conscious)) +   geom_line(size = 1.2) +   geom_point(size = 3) +   scale_color_manual(values = c(\"Natural\" = \"#E69F00\", \"Nudge\" = \"#56B4E9\")) +   scale_linetype_manual(values = c(\"FALSE\" = \"dashed\", \"TRUE\" = \"solid\"),                        labels = c(\"Not Health Conscious\", \"Health Conscious\")) +   scale_y_continuous(labels = scales::percent) +   labs(     title = \"Preventive Care Uptake: Natural vs Nudge Intervention\",     subtitle = \"50% increase in odds translates to different absolute increases by subgroup\",     x = \"Wave\",     y = \"Uptake Rate\",     color = \"Scenario\",     linetype = \"Baseline Type\"   ) +   theme_minimal()  print(p_uptake) # Number needed to nudge nnt_analysis <- uptake_comparison %>%   group_by(scenario) %>%   summarise(     treated_rate = mean(ever_treated),     mean_outcome = mean(t4_y),     .groups = \"drop\"   ) %>%   summarise(     additional_treated = diff(treated_rate),     outcome_improvement = diff(mean_outcome),     nnt = 1 / additional_treated,     health_gain_per_nudged = outcome_improvement / additional_treated   )  cat(\"\\n=== Number Needed to Nudge ===\\n\") #>  #> === Number Needed to Nudge === cat(\"Additional people getting preventive care:\",      round(nnt_analysis$additional_treated * 100, 1), \"%\\n\") #> Additional people getting preventive care: 6.3 % cat(\"Number needed to nudge for one additional uptake:\",      round(nnt_analysis$nnt, 1), \"\\n\") #> Number needed to nudge for one additional uptake: 15.7 cat(\"Health outcome improvement per additional uptake:\",      round(nnt_analysis$health_gain_per_nudged, 3), \"\\n\") #> Health outcome improvement per additional uptake: -1.023"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"example-5-combined-multi-component-interventions","dir":"Articles","previous_headings":"","what":"Example 5: Combined Multi-Component Interventions","title":"Advanced Shift Interventions: Practical Patterns","text":"Real policies often combine multiple intervention components.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"scenario-comprehensive-diabetes-prevention","dir":"Articles","previous_headings":"Example 5: Combined Multi-Component Interventions","what":"Scenario: Comprehensive Diabetes Prevention","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"# Create multi-component intervention: # 1. Minimum activity threshold (150 min/week = level 3) # 2. Progressive dietary improvement (20% healthier choices) # 3. Responsive support based on risk factors  create_diabetes_prevention_program <- function(wave_components) {   function(data, time, trt) {     if (time == 0) {       return(data[[trt]])     }          # Get current values     current <- data[[trt]]          # Component 1: Activity minimum (waves 1+)     if (time >= 1 && \"activity_minimum\" %in% wave_components[[as.character(time)]]) {       current <- pmax(current, 3)     }          # Component 2: Dietary improvement (waves 2+)     if (time >= 2 && \"dietary_improvement\" %in% wave_components[[as.character(time)]]) {       # 20% improvement bounded by reasonable maximum       current <- pmin(current * 1.2, 6)     }          # Component 3: Responsive support (waves 3+)     if (time >= 3 && \"responsive_support\" %in% wave_components[[as.character(time)]]) {       # Extra support for high-risk individuals (high b1 = risk score)       high_risk <- data$b1 > 0.5       current[high_risk] <- pmin(current[high_risk] + 1, 7)     }          return(current)   } }  # Define wave-specific components wave_components <- list(   \"1\" = c(\"activity_minimum\"),   \"2\" = c(\"activity_minimum\", \"dietary_improvement\"),   \"3\" = c(\"activity_minimum\", \"dietary_improvement\", \"responsive_support\"),   \"4\" = c(\"activity_minimum\", \"dietary_improvement\", \"responsive_support\") )  # Create the comprehensive intervention comprehensive_intervention <- create_diabetes_prevention_program(wave_components)  # Parameters reflecting diabetes risk diabetes_params <- list(   a_lag_y_coef = -0.5,     # Lifestyle improvements reduce risk (negative = lower risk)   b1_y_coef = 0.8,         # Baseline risk strongly predictive   a_b1_y_het = -0.3,       # Intervention more effective for high-risk   y_lag_y_coef = 0.7,      # Risk tends to persist   exposure_type = \"continuous\" )  # Simulate comprehensive program comprehensive_results <- margot_simulate_causal(   n = 2000,   waves = 4,   treatments = \"a\",   interventions = list(     control = function(data, time, trt) data[[trt]],     activity_only = create_threshold_shift(3, 3, \"up\", start_wave = 1),     comprehensive = comprehensive_intervention   ),   common_params = list(     params = diabetes_params   ),   seed = 2025 )  # Analyze component effects component_analysis <- list()  # Extract final outcomes for (intervention in names(comprehensive_results$data)) {   data <- comprehensive_results$data[[intervention]]      # Risk reduction (lower is better)   risk_reduction <- mean(data$t0_y) - mean(data$t5_y)      # By risk group   risk_groups <- data %>%     mutate(risk_category = cut(b1, breaks = c(-Inf, 0, 0.5, Inf),                               labels = c(\"Low\", \"Medium\", \"High\"))) %>%     group_by(risk_category) %>%     summarise(       n = n(),       baseline_risk = mean(t0_y),       final_risk = mean(t5_y),       risk_reduction = baseline_risk - final_risk,       mean_lifestyle = mean(t4_a),       .groups = \"drop\"     ) %>%     mutate(intervention = intervention)      component_analysis[[intervention]] <- risk_groups }  component_results <- bind_rows(component_analysis)  # Visualize comparative effectiveness p_components <- ggplot(component_results,                        aes(x = risk_category, y = risk_reduction, fill = intervention)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   scale_fill_manual(values = c(\"control\" = \"#999999\",                                 \"activity_only\" = \"#E69F00\",                                \"comprehensive\" = \"#56B4E9\"),                     labels = c(\"Control\", \"Activity Only\", \"Comprehensive\")) +   labs(     title = \"Diabetes Risk Reduction by Intervention Type\",     subtitle = \"Comprehensive program shows synergistic effects, especially for high-risk\",     x = \"Baseline Risk Category\",     y = \"Risk Score Reduction\",     fill = \"Intervention\"   ) +   theme_minimal()  print(p_components) # Calculate incremental benefits incremental_benefits <- component_results %>%   select(risk_category, intervention, risk_reduction) %>%   pivot_wider(names_from = intervention, values_from = risk_reduction) %>%   mutate(     activity_benefit = activity_only - control,     additional_benefit = comprehensive - activity_only,     synergy_ratio = comprehensive / activity_only   )  cat(\"\\n=== Incremental Benefits of Comprehensive Program ===\\n\") #>  #> === Incremental Benefits of Comprehensive Program === print(incremental_benefits) #> # A tibble: 3 × 7 #>   risk_category control activity_only comprehensive activity_benefit #>   <fct>           <dbl>         <dbl>         <dbl>            <dbl> #> 1 Low            0.0382         0.969          1.18            0.931 #> 2 Medium         0.143          1.54           1.86            1.39  #> 3 High           0.0462         1.81           2.90            1.77  #> # ℹ 2 more variables: additional_benefit <dbl>, synergy_ratio <dbl>  # Timeline of component activation timeline_data <- comprehensive_results$data$comprehensive %>%   select(id, b1, t0_a, t1_a, t2_a, t3_a, t4_a) %>%   mutate(risk_level = ifelse(b1 > 0.5, \"High Risk\", \"Lower Risk\")) %>%   group_by(risk_level) %>%   sample_n(min(100, n())) %>%   ungroup() %>%   pivot_longer(cols = starts_with(\"t\"), names_to = \"wave\", values_to = \"lifestyle\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)))  p_timeline <- ggplot(timeline_data,                      aes(x = wave, y = lifestyle, group = id, color = risk_level)) +   geom_line(alpha = 0.2) +   geom_smooth(aes(group = risk_level), method = \"loess\", se = TRUE, size = 1.5) +   geom_vline(xintercept = c(1, 2, 3), linetype = \"dashed\", alpha = 0.5) +   annotate(\"text\", x = 1, y = 6.5, label = \"Activity\\nMinimum\", size = 3) +   annotate(\"text\", x = 2, y = 6.5, label = \"+ Dietary\\nImprovement\", size = 3) +   annotate(\"text\", x = 3, y = 6.5, label = \"+ Responsive\\nSupport\", size = 3) +   scale_color_manual(values = c(\"Lower Risk\" = \"#009E73\", \"High Risk\" = \"#D55E00\")) +   labs(     title = \"Multi-Component Intervention Timeline\",     subtitle = \"Components layer on progressively, with differential effects by risk\",     x = \"Wave\",     y = \"Lifestyle Score\",     color = \"Risk Level\"   ) +   theme_minimal()  print(p_timeline)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"choosing-the-right-shift-pattern","dir":"Articles","previous_headings":"Practical Guidelines for Shift Interventions","what":"1. Choosing the Right Shift Pattern","title":"Advanced Shift Interventions: Practical Patterns","text":"Comparison Shift Intervention Types","code":"# Create comparison of different shift types shift_comparison <- data.frame(   Type = c(\"Uniform Shift\", \"Threshold\", \"Bounded\", \"Responsive\", \"Propensity\"),   Use_Case = c(     \"Population-wide campaigns\",     \"Minimum standards policies\",      \"Resource-constrained programs\",     \"Personalized interventions\",     \"Behavioral nudges\"   ),   Advantages = c(     \"Simple to implement and communicate\",     \"Ensures equity, helps most vulnerable\",     \"Realistic, respects constraints\",     \"Maximizes efficiency, targets need\",     \"Preserves choice, scalable\"   ),   Limitations = c(     \"May waste resources on those who don't need it\",     \"No benefit for those above threshold\",     \"May not achieve maximum possible impact\",     \"Complex to implement, requires monitoring\",     \"Indirect effects, harder to predict\"   ) )  knitr::kable(shift_comparison, caption = \"Comparison of Shift Intervention Types\")"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"implementation-considerations","dir":"Articles","previous_headings":"Practical Guidelines for Shift Interventions","what":"2. Implementation Considerations","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"cat(\"=== Key Implementation Considerations ===\\n\\n\") #> === Key Implementation Considerations ===  considerations <- list(   \"1. Feasibility\" = \"Can the shift be realistically implemented given resources?\",   \"2. Sustainability\" = \"Will effects persist or decay over time?\",   \"3. Equity\" = \"Does the intervention reduce or increase disparities?\",   \"4. Scalability\" = \"Can it be rolled out population-wide?\",   \"5. Monitoring\" = \"What data is needed to track implementation?\",   \"6. Side Effects\" = \"Could shifts in one domain affect others?\" )  for (point in names(considerations)) {   cat(point, \":\", considerations[[point]], \"\\n\") } #> 1. Feasibility : Can the shift be realistically implemented given resources?  #> 2. Sustainability : Will effects persist or decay over time?  #> 3. Equity : Does the intervention reduce or increase disparities?  #> 4. Scalability : Can it be rolled out population-wide?  #> 5. Monitoring : What data is needed to track implementation?  #> 6. Side Effects : Could shifts in one domain affect others?  # Example: Checking intervention feasibility check_intervention_feasibility <- function(data, intervention, waves = 3) {   # Simulate the intervention   test_result <- margot_simulate(     n = nrow(data),     waves = waves,     intervention = intervention,     baseline_data = data,     params = list(a_lag_a_coef = 0.7)  # High persistence   )      # Calculate key metrics   metrics <- list()      # Resource intensity (average shift magnitude)   for (w in 1:waves) {     natural_var <- paste0(\"t\", w, \"_a_natural\")     shifted_var <- paste0(\"t\", w, \"_a\")          if (all(c(natural_var, shifted_var) %in% names(test_result))) {       metrics[[paste0(\"wave_\", w, \"_shift\")]] <-          mean(abs(test_result[[shifted_var]] - test_result[[natural_var]]))     }   }      # Coverage (proportion affected)   metrics$coverage <- mean(test_result$t1_a != test_result$t1_a_natural)      # Sustainability (maintained elevation)   if (waves > 1) {     metrics$sustainability <- cor(test_result$t1_a, test_result[[paste0(\"t\", waves, \"_a\")]])   }      return(metrics) }"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"combining-with-other-package-features","dir":"Articles","previous_headings":"Practical Guidelines for Shift Interventions","what":"3. Combining with Other Package Features","title":"Advanced Shift Interventions: Practical Patterns","text":"","code":"cat(\"=== Combining Shifts with Shadows and Weights ===\\n\\n\") #> === Combining Shifts with Shadows and Weights ===  # Example: Shift intervention with measurement error example_combined <- function() {   # 1. Generate base data   base_data <- margot_simulate(     n = 1000,     waves = 2,     intervention = create_shift_intervention(1, 1, 7),     seed = 2025   )      # 2. Apply measurement error shadow   shadow <- create_shadow(     type = \"measurement_error\",     params = list(       variables = \"t1_a\",       error_type = \"classical\",       sigma = 0.5     )   )      shadowed_data <- apply_shadow(base_data, shadow)      # 3. Add sampling weights   shadowed_data$weight <- ifelse(shadowed_data$b1 > 0, 2, 0.5)      # 4. Compare true vs observed effects   true_effect <- mean(base_data$t3_y[base_data$t2_a == 1]) -                   mean(base_data$t3_y[base_data$t2_a == 0])      observed_effect <- mean(shadowed_data$t3_y[shadowed_data$t2_a == 1], na.rm = TRUE) -                       mean(shadowed_data$t3_y[shadowed_data$t2_a == 0], na.rm = TRUE)      weighted_effect <- weighted.mean(shadowed_data$t3_y[shadowed_data$t2_a == 1],                                    shadowed_data$weight[shadowed_data$t2_a == 1], na.rm = TRUE) -                      weighted.mean(shadowed_data$t3_y[shadowed_data$t2_a == 0],                                    shadowed_data$weight[shadowed_data$t2_a == 0], na.rm = TRUE)      return(list(     true = true_effect,     observed = observed_effect,     weighted = weighted_effect   )) }  combined_example <- example_combined() cat(\"True effect:\", round(combined_example$true, 3), \"\\n\") #> True effect: NaN cat(\"Observed (with measurement error):\", round(combined_example$observed, 3), \"\\n\") #> Observed (with measurement error): NaN cat(\"Weighted (accounting for sampling):\", round(combined_example$weighted, 3), \"\\n\") #> Weighted (accounting for sampling): NaN"},{"path":"https://go-bayes.github.io/margot.sim/articles/advanced-shift-interventions.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Advanced Shift Interventions: Practical Patterns","text":"vignette demonstrated five advanced shift intervention patterns: Threshold interventions ensure minimum standards cost-effective Bounded realistic shifts respect practical constraints natural limits Dynamic responsive interventions adapt individual needs progress Propensity nudges change probabilities rather forcing specific values Multi-component programs combine strategies synergistic effects Key insights: - Different shift patterns suit different policy goals - Realistic interventions often involve bounds, decay, heterogeneity - Responsive interventions can efficient require complex implementation - Combined strategies often outperform single-component interventions - Always consider feasibility, sustainability, equity patterns can combined margot.sim’s features (shadows, weights, Monte Carlo) evaluate interventions realistic conditions. next vignette provide complete practical workflow example.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Applying Observational Shadows","text":"Real-world observational data often “shadow” true underlying process. margot.sim package implements various types observational distortions shadow system. vignette demonstrates apply shadows simulated data.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"what-are-shadows","dir":"Articles","previous_headings":"","what":"What are Shadows?","title":"Applying Observational Shadows","text":"Shadows represent common data quality issues observational studies: Measurement error: Variables measured noise Item missingness: Missing data patterns (MCAR, MAR, MNAR) Selection bias: Non-representative sampling Positivity violations: Lack overlap treatment groups","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"basic-shadow-application","dir":"Articles","previous_headings":"","what":"Basic Shadow Application","title":"Applying Observational Shadows","text":"Let’s start simulating clean data applying shadows:","code":"# Generate clean data set.seed(456) clean_data <- margot_simulate(   n = 1000,   waves = 2,   apply_process_function = FALSE  # Keep raw data )  # Create a measurement error shadow me_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     error_type = \"classical\",     variables = c(\"t1_a\", \"t2_a\"),  # Apply to exposures     sigma = 0.3  # Standard deviation of error   ) )  # Apply the shadow data_with_error <- apply_shadow(clean_data, me_shadow)  # Compare clean vs error-prone measurements plot(clean_data$t1_a, data_with_error$t1_a,      xlab = \"True Exposure\", ylab = \"Measured Exposure\",      main = \"Classical Measurement Error\") abline(0, 1, col = \"red\", lty = 2)"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"item-missingness-patterns","dir":"Articles","previous_headings":"","what":"Item Missingness Patterns","title":"Applying Observational Shadows","text":"Different missing data mechanisms different implications:","code":"# Missing Completely at Random (MCAR) mcar_shadow <- create_item_missingness_shadow(   variables = c(\"t1_y\", \"t2_y\"),   missing_rate = 0.2,   missing_mechanism = \"MCAR\" )  # Missing at Random (MAR) - depends on observed variables mar_shadow <- create_item_missingness_shadow(   variables = c(\"t1_y\", \"t2_y\"),   missing_rate = 0.3,   missing_mechanism = \"MAR\",   dependent_vars = c(\"b1\", \"t0_a\")  # Missingness depends on these )  # Apply both shadows data_mcar <- apply_shadow(clean_data, mcar_shadow) data_mar <- apply_shadow(clean_data, mar_shadow)  # Compare missingness rates cat(\"MCAR missingness rate:\", mean(is.na(data_mcar$t1_y)), \"\\n\") #> MCAR missingness rate: 0.226 cat(\"MAR missingness rate:\", mean(is.na(data_mar$t1_y)), \"\\n\") #> MAR missingness rate: 0.306"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"multiple-shadows","dir":"Articles","previous_headings":"","what":"Multiple Shadows","title":"Applying Observational Shadows","text":"can apply multiple shadows sequentially combine :","code":"# Create multiple shadows shadow1 <- create_shadow(   type = \"measurement_error\",   params = list(     error_type = \"classical\",     variables = \"t1_a\",     sigma = 0.2   ) )  shadow2 <- create_item_missingness_shadow(   variables = c(\"t2_y\"),   missing_rate = 0.25,   missing_mechanism = \"MAR\",   dependent_vars = c(\"t1_a\", \"t1_y\") )  # Apply shadows sequentially data_shadowed <- clean_data |>   apply_shadow(shadow1) |>   apply_shadow(shadow2)  # Or use apply_shadows for multiple at once shadows <- list(shadow1, shadow2) data_shadowed2 <- apply_shadows(clean_data, shadows)  # Check results sum(is.na(data_shadowed2$t2_y)) #> [1] 243"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"positivity-violations","dir":"Articles","previous_headings":"","what":"Positivity Violations","title":"Applying Observational Shadows","text":"Positivity violations occur certain covariate combinations treated/untreated units:","code":"# Create positivity shadow that removes extreme covariate values # Filter function keeps only observations where b1 and b2 are in reasonable range pos_shadow <- create_positivity_shadow(   exposure_var = \"t1_a\",   filter_fn = function(data) {     # Keep observations where covariates are within central 90%     b1_limits <- quantile(data$b1, c(0.05, 0.95))     b2_limits <- quantile(data$b2, c(0.05, 0.95))     data$b1 >= b1_limits[1] & data$b1 <= b1_limits[2] &     data$b2 >= b2_limits[1] & data$b2 <= b2_limits[2]   } )  data_trimmed <- apply_shadow(clean_data, pos_shadow)  # Compare sample sizes cat(\"Original n:\", nrow(clean_data), \"\\n\") #> Original n: 1000 cat(\"After positivity trimming:\", nrow(data_trimmed), \"\\n\") #> After positivity trimming: 811"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"analyzing-shadow-effects","dir":"Articles","previous_headings":"","what":"Analyzing Shadow Effects","title":"Applying Observational Shadows","text":"can analyze shadows affect data:","code":"# Analyze the effect of measurement error shadow_effects <- analyse_shadow_effects(   original = clean_data,   shadowed = data_with_error,   variables = c(\"t1_a\", \"t2_a\", \"t2_y\") )  print(shadow_effects) #> Shadow Effects Analysis #> ==================== #>  #> Variable: t1_a #>   Missing introduced: 0.0% #>   Mean shift: -0.007 #>   SD ratio: 1.161 #>  #> Variable: t2_a #>   Missing introduced: 0.0% #>   Mean shift: 0.000 #>   SD ratio: 1.166 #>  #> Variable: t2_y #>   Missing introduced: 0.0% #>   Mean shift: 0.000 #>   SD ratio: 1.000"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"real-world-example-selection-bias","dir":"Articles","previous_headings":"","what":"Real-World Example: Selection Bias","title":"Applying Observational Shadows","text":"Let’s simulate realistic scenario selection bias:","code":"# Generate population data population <- margot_simulate(   n = 5000,   waves = 2,   params = list(     b_a_coef = 0.4,     a_y_coef = 0.6   ) ) #> Warning in validate_proportions(a_coefs, paste0(\"t\", t, \"_a\")): coefficients #> for t1_a sum to 1.00 (>= 0.95), reducing proportionally #> Warning in validate_proportions(a_coefs, paste0(\"t\", t, \"_a\")): coefficients #> for t2_a sum to 1.00 (>= 0.95), reducing proportionally  # Create selection shadow - higher SES more likely to participate selection_shadow <- create_shadow(   type = \"selection\",   params = list(     selection_type = \"custom\",     selection_prob_fn = function(data) {       # Higher b1 and b2 values increase selection probability       # Normalize to 0-1 scale       ses_score <- (data$b1 + data$b2) / 2       ses_normalized <- (ses_score - min(ses_score)) / (max(ses_score) - min(ses_score))       # Map to 30-70% selection probability range       0.3 + 0.4 * ses_normalized     }   ) )  # Apply selection study_sample <- apply_shadow(population, selection_shadow)  # Compare distributions par(mfrow = c(1, 2)) hist(population$b1, main = \"Population SES\", xlab = \"SES Score\") hist(study_sample$b1, main = \"Study Sample SES\", xlab = \"SES Score\")"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"combining-everything","dir":"Articles","previous_headings":"","what":"Combining Everything","title":"Applying Observational Shadows","text":"’s complete example multiple realistic shadows:","code":"# Start with clean data set.seed(789) true_data <- margot_simulate(   n = 2000,   waves = 3,   n_outcomes = 2 )  # Create realistic shadows shadows <- list(   # Measurement error in exposure   create_shadow(     type = \"measurement_error\",     params = list(       error_type = \"classical\",       variables = c(\"t1_a\", \"t2_a\"),       sigma = 0.25     )   ),      # Differential missingness in outcomes   create_item_missingness_shadow(     variables = c(\"t2_y1\", \"t2_y2\", \"t3_y1\", \"t3_y2\"),     missing_rate = 0.2,     missing_mechanism = \"MAR\",     dependent_vars = c(\"t1_a\", \"b1\")   ),      # Selection on baseline characteristics   create_positivity_shadow(     exposure_var = \"t1_a\",     filter_fn = function(data) {       # Keep central 80% based on covariate values       # This ensures overlap in covariate distributions across treatment levels       cov_score <- rowMeans(scale(data[, c(\"b1\", \"b2\", \"b3\")]))       cov_limits <- quantile(cov_score, c(0.1, 0.9))       cov_score >= cov_limits[1] & cov_score <= cov_limits[2]     }   ) )  # Apply all shadows observed_data <- apply_shadows(true_data, shadows)  # Summary of data quality cat(\"Original sample size:\", nrow(true_data), \"\\n\") #> Original sample size: 2000 cat(\"After shadows:\", nrow(observed_data), \"\\n\") #> After shadows: 1600 cat(\"Outcome missingness rate:\",      mean(is.na(observed_data[, grep(\"y\", names(observed_data))])), \"\\n\") #> Outcome missingness rate: 0.08775"},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Applying Observational Shadows","text":"Document shadows: Keep track distortions ’ve applied Validate assumptions: Check shadow parameters realistic Compare results: Always compare analyses clean vs shadowed data Use Monte Carlo: systematic evaluation, use margot_monte_carlo()","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/applying-shadows.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Applying Observational Shadows","text":"shadow system margot.sim allows : - Add realistic observational distortions simulated data - Combine multiple types bias measurement issues - Systematically evaluate affect analyses - Better understand robustness statistical methods helps bridge gap idealized simulations messy real-world data.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Basic Simulation with margot.sim","text":"margot.sim package extends margot package provide sophisticated simulation capabilities longitudinal data analysis. vignette demonstrates basic workflow simulating longitudinal data realistic observational challenges.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"basic-simulation","dir":"Articles","previous_headings":"","what":"Basic Simulation","title":"Basic Simulation with margot.sim","text":"core function margot_simulate() generates longitudinal data following semi-Markovian structural causal model (SCM): generated data includes: - id: Subject identifier - b1-b5: Baseline covariates - t0_a, t1_a, etc.: Treatment/exposure wave - t0_y, t1_y, etc.: Outcomes wave - t1_l, t2_l, etc.: Time-varying confounders","code":"# Simulate basic longitudinal data set.seed(123) sim_data <- margot_simulate(   n = 1000,      # Number of subjects   waves = 3,     # Number of measurement waves   n_outcomes = 1 # Number of outcomes (default) )  # View structure str(sim_data[1:5, 1:10]) #> tibble [5 × 10] (S3: tbl_df/tbl/data.frame) #>  $ id                        : int [1:5] 1 2 3 4 5 #>  $ b1                        : num [1:5] 0.2593 -0.0926 -2.1176 -0.5686 1.8588 #>  $ b2                        : num [1:5] 0.542 0.685 -0.277 -0.847 -2.04 #>  $ b3                        : num [1:5] 0.00293 0.21884 -1.29504 1.22672 0.03642 #>  $ b4                        : num [1:5] 1.1163 0.5913 -0.7294 0.0556 1.3662 #>  $ b5                        : num [1:5] -0.062 -0.639 -0.751 -0.101 -1.65 #>  $ t0_a                      : int [1:5] 1 0 1 0 1 #>  $ t0_y                      : num [1:5] -1.068 -1.307 -1.585 0.774 -0.686 #>  $ t0_not_lost_following_wave: int [1:5] 1 1 1 1 1 #>  $ t1_l                      : num [1:5] 0.705 -0.083 1.255 1.508 -0.754 #>  - attr(*, \"time_points\")= chr [1:5] \"t0\" \"t1\" \"t2\" \"t3\" ... #>  - attr(*, \"n_waves\")= int 5 #>  - attr(*, \"processed\")= logi TRUE #>  - attr(*, \"margot_meta\")=List of 15 #>   ..$ params                  :List of 32 #>   .. ..$ cens_rate     : num 0.1 #>   .. ..$ cens_a_coef   : num 0.2 #>   .. ..$ cens_l_coef   : num 0.1 #>   .. ..$ cens_y_coef   : num 0.15 #>   .. ..$ cens_latent_sd: num 0.5 #>   .. ..$ b_l_coef      : num 0.15 #>   .. ..$ b_a_coef      : num 0.1 #>   .. ..$ b_y_coef      : num 0.15 #>   .. ..$ b_l_time_trend: num 0.05 #>   .. ..$ b_l_time_decay: num 0.02 #>   .. ..$ b_l_time_cycle: num 1 #>   .. ..$ a_autoreg     : num 0.25 #>   .. ..$ y_autoreg     : num 0.2 #>   .. ..$ y_a_coef      : num 0.15 #>   .. ..$ y_l_coef      : num 0.1 #>   .. ..$ a_l_coef      : num 0.1 #>   .. ..$ l_a_coef      : num 0.2 #>   .. ..$ l_y_coef      : num 0.15 #>   .. ..$ a_lag_y_coef  : num 0.25 #>   .. ..$ a_b_y_het     : num 0.1 #>   .. ..$ a_l_y_het     : num 0.05 #>   .. ..$ a_b1_y_het    : num 0.1 #>   .. ..$ a_b2_y_het    : num 0.08 #>   .. ..$ a_b3_y_het    : num 0.06 #>   .. ..$ a_y0_y_het    : num 0.15 #>   .. ..$ a_a0_y_het    : num 0.12 #>   .. ..$ y_cor         : num 0.5 #>   .. ..$ y2_shrink     : num 0.8 #>   .. ..$ y3_shrink     : num 0.6 #>   .. ..$ y1_y2_cross   : num 0.1 #>   .. ..$ y1_y3_cross   : num 0.05 #>   .. ..$ y2_y3_cross   : num 0.05 #>   ..$ y_feedback              : chr \"full\" #>   ..$ n_outcomes              : num 1 #>   ..$ n_baselines             : num 5 #>   ..$ exposure_type           : chr \"binary\" #>   ..$ outcome_type            : chr \"continuous\" #>   ..$ structural_model        : chr \"semi-markovian\" #>   ..$ intervention_applied    : logi FALSE #>   ..$ sampling_weights_applied: logi FALSE #>   ..$ censoring_probs         :List of 4 #>   .. ..$ : num [1:1000] 0.119 0.1 0.119 0.1 0.119 ... #>   .. ..$ : num [1:1000] 0.119 0.1 0.119 0.1 0.119 ... #>   .. ..$ : num [1:1000] 0.1 0.1 0.1 0.1 0.119 ... #>   .. ..$ : num [1:1000] 0.1 0.119 0.1 0.1 0.1 ... #>   ..$ waves                   : num 3 #>   ..$ n                       : num 1000 #>   ..$ format                  : chr \"wide\" #>   ..$ timestamp               : POSIXct[1:1], format: \"2025-06-11 04:01:22\" #>   ..$ shadows_applied         : logi FALSE"},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"customizing-the-data-generation-process","dir":"Articles","previous_headings":"","what":"Customizing the Data Generation Process","title":"Basic Simulation with margot.sim","text":"can customize various aspects simulation:","code":"# Custom simulation with specific parameters sim_custom <- margot_simulate(   n = 500,   waves = 4,   n_baselines = 3,        # Fewer baseline covariates   exposure_type = \"continuous\",  # Continuous exposure   outcome_type = \"binary\",       # Binary outcome   params = list(     b_a_coef = 0.3,      # Baseline → exposure effect     a_y_coef = 0.5,      # Exposure → outcome effect     b_y_coef = 0.2       # Baseline → outcome effect   ) )  # Check exposure and outcome types summary(sim_custom$t1_a)  # Continuous #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> -3.2059 -0.8023 -0.0603 -0.0563  0.6681  5.0258 table(sim_custom$t2_y)    # Binary #>  #>   0   1  #> 240 260"},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"adding-censoring","dir":"Articles","previous_headings":"","what":"Adding Censoring","title":"Basic Simulation with margot.sim","text":"Real-world longitudinal studies often dropout. can add censoring:","code":"# Simulate with censoring sim_censored <- margot_simulate(   n = 1000,   waves = 3,   censoring = list(     rate = 0.2,                    # 20% censoring rate per wave     exposure_dependence = TRUE,    # Censoring depends on exposure     y_dependence = TRUE           # Censoring depends on outcome   ) )  # Check censoring indicators table(sim_censored$t0_not_lost_following_wave) #>  #>    1  #> 1000 table(sim_censored$t1_not_lost_following_wave) #>  #>    1  #> 1000"},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"working-with-long-format","dir":"Articles","previous_headings":"","what":"Working with Long Format","title":"Basic Simulation with margot.sim","text":"many analyses, may want data long format:","code":"# Generate in long format sim_long <- margot_simulate(   n = 200,   waves = 3,   wide = FALSE  # Request long format )  # View structure head(sim_long) #> # A tibble: 6 × 11 #>      id     b1    b2    b3    b4     b5  time     a      y #>   <int>  <dbl> <dbl> <dbl> <dbl>  <dbl> <int> <int>  <dbl> #> 1     1 -0.437 -1.62 -1.34 0.721 -1.94      0     1 -1.89  #> 2     1 -0.437 -1.62 -1.34 0.721 -1.94      1     0 -0.532 #> 3     1 -0.437 -1.62 -1.34 0.721 -1.94      2     1 -0.241 #> 4     1 -0.437 -1.62 -1.34 0.721 -1.94      3     0  0.390 #> 5     1 -0.437 -1.62 -1.34 0.721 -1.94      4    NA  1.37  #> 6     2  0.192  1.66  2.99 0.567  0.846     0     1  0.411 #> # ℹ 2 more variables: not_lost_following_wave <int>, l <dbl>  # Number of observations per person table(table(sim_long$id)) #>  #>   5  #> 200"},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"using-interventions","dir":"Articles","previous_headings":"","what":"Using Interventions","title":"Basic Simulation with margot.sim","text":"can simulate data specific intervention regimes:","code":"# Define an intervention that sets treatment to 1 for everyone always_treat <- function(data, time, trt) {   rep(1, nrow(data)) }  # Simulate under intervention sim_intervention <- margot_simulate(   n = 500,   waves = 2,   intervention = always_treat )  # Verify intervention was applied table(sim_intervention$t1_a)  # All 1s #>  #>   1  #> 500"},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Basic Simulation with margot.sim","text":"vignette covered basic simulation. See vignettes : Applying Shadows: add measurement error, missingness, selection bias Monte Carlo Evaluation: evaluate estimator performance Causal Inference: simulate data causal effect estimation","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/basic-simulation.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Basic Simulation with margot.sim","text":"margot_simulate() function provides flexible framework generating realistic longitudinal data : Customizable structural causal models Various exposure outcome types Realistic censoring patterns Support interventions wide long format output forms foundation advanced simulation studies evaluate statistical methods realistic conditions.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Censoring and Effect Modification","text":"vignette explores critical interaction censoring effect modification longitudinal studies. demonstrate : Differential censoring can occur dropout depends effect modifiers Selection bias emerges analyses ignore informative censoring Weighted analyses can help correct censoring-induced bias Sensitivity analyses assess robustness censoring assumptions","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"motivating-example-mental-health-intervention","dir":"Articles","previous_headings":"","what":"Motivating Example: Mental Health Intervention","title":"Censoring and Effect Modification","text":"Consider digital mental health intervention : Participants severe baseline symptoms (high B1) benefit treatment However, participants likely drop treatment reduces symptoms severe group (effect modification) Ignoring differential dropout underestimate treatment benefits creates challenging scenario subgroup largest treatment benefit likely censored.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"step-1-define-effect-modification-and-censoring-parameters","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 1: Define Effect Modification and Censoring Parameters","title":"Censoring and Effect Modification","text":"","code":"# Simulation parameters n <- 2000 waves <- 4  # Effect modification parameters base_effect <- 0.2          # Base treatment effect severe_modifier <- 0.5      # Additional effect for severe symptoms severe_threshold <- 0       # B1 > 0 indicates severe symptoms  # Censoring parameters base_censoring_prob <- 0.05    # 5% per wave for low severity severe_censoring_multiplier <- 4 # 4x higher for severe group treatment_protection <- 0.5      # Treatment reduces dropout by 50%  cat(\"Effect Modification Setup:\\n\") #> Effect Modification Setup: cat(\"  Base treatment effect:\", base_effect, \"\\n\") #>   Base treatment effect: 0.2 cat(\"  Additional effect for severe group:\", severe_modifier, \"\\n\") #>   Additional effect for severe group: 0.5 cat(\"  Total effect for severe group:\", base_effect + severe_modifier, \"\\n\") #>   Total effect for severe group: 0.7  cat(\"\\nCensoring Setup:\\n\") #>  #> Censoring Setup: cat(\"  Base censoring probability:\", base_censoring_prob, \"\\n\") #>   Base censoring probability: 0.05 cat(\"  Severe group multiplier:\", severe_censoring_multiplier, \"\\n\") #>   Severe group multiplier: 4 cat(\"  Treatment protection factor:\", treatment_protection, \"\\n\") #>   Treatment protection factor: 0.5"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"step-2-simulate-data-with-strong-effect-modification","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 2: Simulate Data with Strong Effect Modification","title":"Censoring and Effect Modification","text":"","code":"set.seed(2025)  # Simulation parameters with effect modification sim_params <- list(   # Base treatment effect   a_lag_y_coef = base_effect,      # Strong effect modification by baseline severity (b1)   a_b1_y_het = severe_modifier,      # Make severe symptoms stable over time   b1_y_coef = 0.8,      # Other parameters   y_feedback = \"full\" )  # Simulate data sim_result <- margot_simulate(   n = n,   waves = waves,   params = sim_params,   seed = 2025 )  # Add severity indicator sim_result$severity_group <- ifelse(sim_result$b1 > severe_threshold,                                      \"Severe\", \"Mild\")  # Check balance severity_summary <- sim_result %>%   group_by(severity_group) %>%   summarise(     n = n(),     prop = n / nrow(sim_result),     mean_b1 = mean(b1),     baseline_outcome = mean(t0_y),     .groups = \"drop\"   )  print(severity_summary) #> # A tibble: 2 × 5 #>   severity_group     n  prop mean_b1 baseline_outcome #>   <chr>          <int> <dbl>   <dbl>            <dbl> #> 1 Mild             956 0.478  -0.782         0.000748 #> 2 Severe          1044 0.522   0.802         0.238"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"step-3-apply-differential-censoring","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 3: Apply Differential Censoring","title":"Censoring and Effect Modification","text":"","code":"# Create censoring shadow that depends on severity and treatment create_differential_censoring <- function(data) {   n_obs <- nrow(data)   censored <- rep(FALSE, n_obs)   censoring_wave <- rep(NA, n_obs)   censoring_prob <- rep(NA, n_obs)      for (wave in 1:waves) {     # Skip if already censored     still_observed <- !censored          if (sum(still_observed) == 0) break          # Get current treatment status     treatment_var <- paste0(\"t\", wave, \"_a\")     if (!(treatment_var %in% names(data))) next          # Calculate censoring probability     # Base probability     prob <- rep(base_censoring_prob, n_obs)          # Increase for severe group     prob[data$severity_group == \"Severe\"] <- prob[data$severity_group == \"Severe\"] *                                                severe_censoring_multiplier          # Reduce if treated (protective effect)     prob[data[[treatment_var]] == 1] <- prob[data[[treatment_var]] == 1] *                                           treatment_protection          # Apply censoring     newly_censored <- still_observed & (runif(n_obs) < prob)     censored[newly_censored] <- TRUE     censoring_wave[newly_censored] <- wave     censoring_prob[newly_censored] <- prob[newly_censored]   }      # Add censoring info to data   data$censored <- censored   data$censoring_wave <- censoring_wave   data$censoring_prob <- censoring_prob      # Apply censoring to outcome variables   data_censored <- data   for (i in 1:n_obs) {     if (data_censored$censored[i]) {       cwave <- data_censored$censoring_wave[i]       # Set all variables after censoring wave to NA       for (w in cwave:(waves + 1)) {         outcome_var <- paste0(\"t\", w, \"_y\")         if (outcome_var %in% names(data_censored)) {           data_censored[[outcome_var]][i] <- NA         }       }     }   }      return(data_censored) }  # Apply censoring data_censored <- create_differential_censoring(sim_result)  # Censoring summary censoring_summary <- data_censored %>%   group_by(severity_group) %>%   summarise(     n = n(),     n_censored = sum(censored),     prop_censored = mean(censored),     .groups = \"drop\"   )  cat(\"\\n=== Censoring Summary ===\\n\") #>  #> === Censoring Summary === print(censoring_summary) #> # A tibble: 2 × 4 #>   severity_group     n n_censored prop_censored #>   <chr>          <int>      <int>         <dbl> #> 1 Mild             956        132         0.138 #> 2 Severe          1044        468         0.448  # By treatment and severity censoring_by_treatment <- data_censored %>%   group_by(severity_group, t1_a) %>%   summarise(     n = n(),     prop_censored = mean(censored),     .groups = \"drop\"   ) %>%   mutate(Treatment = ifelse(t1_a == 1, \"Treated\", \"Control\"))  print(censoring_by_treatment) #> # A tibble: 4 × 5 #>   severity_group  t1_a     n prop_censored Treatment #>   <chr>          <int> <int>         <dbl> <chr>     #> 1 Mild               0   462         0.130 Control   #> 2 Mild               1   494         0.146 Treated   #> 3 Severe             0   451         0.481 Control   #> 4 Severe             1   593         0.423 Treated"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"step-4-visualize-censoring-patterns","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 4: Visualize Censoring Patterns","title":"Censoring and Effect Modification","text":"","code":"# Survival curves by group surv_data <- data_censored %>%   mutate(     time = ifelse(censored, censoring_wave, waves + 1),     status = as.numeric(!censored),  # 1 = observed (not censored)     group = paste(severity_group, ifelse(t1_a == 1, \"Treated\", \"Control\"))   )  # Kaplan-Meier curves km_fit <- survfit(Surv(time, status) ~ group, data = surv_data)  # Plot survival curves plot(km_fit, col = c(\"#E69F00\", \"#E69F00\", \"#56B4E9\", \"#56B4E9\"),      lty = c(1, 2, 1, 2),      xlab = \"Wave\", ylab = \"Probability of Remaining in Study\",      main = \"Retention by Severity and Treatment Status\") legend(\"bottomleft\",         c(\"Mild Control\", \"Mild Treated\", \"Severe Control\", \"Severe Treated\"),        col = c(\"#E69F00\", \"#E69F00\", \"#56B4E9\", \"#56B4E9\"),        lty = c(1, 2, 1, 2)) # Censoring patterns over waves censoring_waves <- data_censored %>%   filter(censored) %>%   group_by(censoring_wave, severity_group) %>%   summarise(n = n(), .groups = \"drop\") %>%   complete(censoring_wave = 1:waves, severity_group, fill = list(n = 0))  p1 <- ggplot(censoring_waves, aes(x = censoring_wave, y = n, fill = severity_group)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   scale_fill_manual(values = c(\"Mild\" = \"#E69F00\", \"Severe\" = \"#56B4E9\")) +   labs(     title = \"Censoring Patterns by Wave and Severity\",     x = \"Wave of Censoring\",     y = \"Number Censored\",     fill = \"Severity Group\"   ) +   theme_minimal()  print(p1)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"complete-case-analysis-biased","dir":"Articles","previous_headings":"Analyzing Treatment Effects","what":"Complete Case Analysis (Biased)","title":"Censoring and Effect Modification","text":"","code":"# Complete case analysis complete_cases <- data_censored %>%   filter(!is.na(t5_y))  # Final outcome available  cc_summary <- complete_cases %>%   group_by(severity_group) %>%   summarise(     n_total = n(),     prop_of_original = n() / (nrow(data_censored) / 2),     mean_b1 = mean(b1),     .groups = \"drop\"   )  cat(\"\\n=== Complete Case Sample ===\\n\") #>  #> === Complete Case Sample === print(cc_summary) #> # A tibble: 2 × 4 #>   severity_group n_total prop_of_original mean_b1 #>   <chr>            <int>            <dbl>   <dbl> #> 1 Mild               824            0.824  -0.780 #> 2 Severe             576            0.576   0.805  # Calculate treatment effects calculate_ate <- function(data, outcome_var = \"t5_y\", treatment_var = \"t4_a\") {   data %>%     group_by(severity_group) %>%     summarise(       n = n(),       effect = mean(.data[[outcome_var]][.data[[treatment_var]] == 1], na.rm = TRUE) -                mean(.data[[outcome_var]][.data[[treatment_var]] == 0], na.rm = TRUE),       .groups = \"drop\"     ) }  # Complete case effects cc_effects <- calculate_ate(complete_cases) cc_overall <- with(complete_cases,                     mean(t5_y[t4_a == 1], na.rm = TRUE) -                     mean(t5_y[t4_a == 0], na.rm = TRUE))  cat(\"\\n=== Complete Case Treatment Effects ===\\n\") #>  #> === Complete Case Treatment Effects === print(cc_effects) #> # A tibble: 2 × 3 #>   severity_group     n  effect #>   <chr>          <int>   <dbl> #> 1 Mild             824 -0.0504 #> 2 Severe           576  0.949 cat(\"Overall ATE (complete cases):\", round(cc_overall, 3), \"\\n\") #> Overall ATE (complete cases): 0.489"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"true-effects-no-censoring","dir":"Articles","previous_headings":"Analyzing Treatment Effects","what":"True Effects (No Censoring)","title":"Censoring and Effect Modification","text":"","code":"# Calculate true effects using full data true_effects <- calculate_ate(sim_result) true_overall <- with(sim_result,                      mean(t5_y[t4_a == 1]) - mean(t5_y[t4_a == 0]))  cat(\"\\n=== True Treatment Effects (No Censoring) ===\\n\") #>  #> === True Treatment Effects (No Censoring) === print(true_effects) #> # A tibble: 2 × 3 #>   severity_group     n  effect #>   <chr>          <int>   <dbl> #> 1 Mild             956 -0.0942 #> 2 Severe          1044  0.924 cat(\"Overall ATE (true):\", round(true_overall, 3), \"\\n\") #> Overall ATE (true): 0.556  # Compare bias bias_summary <- data.frame(   Group = c(\"Mild\", \"Severe\", \"Overall\"),   True_Effect = c(true_effects$effect, true_overall),   CC_Effect = c(cc_effects$effect, cc_overall),   Bias = c(cc_effects$effect, cc_overall) - c(true_effects$effect, true_overall) ) %>%   mutate(Relative_Bias = 100 * Bias / True_Effect)  cat(\"\\n=== Bias from Complete Case Analysis ===\\n\") #>  #> === Bias from Complete Case Analysis === print(bias_summary %>% mutate(across(where(is.numeric), ~round(., 3)))) #>     Group True_Effect CC_Effect   Bias Relative_Bias #> 1    Mild      -0.094    -0.050  0.044       -46.484 #> 2  Severe       0.924     0.949  0.025         2.709 #> 3 Overall       0.556     0.489 -0.067       -12.069"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"inverse-probability-of-censoring-weights-ipcw","dir":"Articles","previous_headings":"Analyzing Treatment Effects","what":"Inverse Probability of Censoring Weights (IPCW)","title":"Censoring and Effect Modification","text":"","code":"# Calculate inverse probability of censoring weights calculate_ipcw <- function(data) {   # Model censoring probability   # We'll use a simple model for illustration   censor_model <- glm(censored ~ severity_group * t1_a + b1 + t0_y,                       data = data,                       family = binomial())      # Predict probability of being censored   data$prob_censored <- predict(censor_model, type = \"response\")      # Calculate weights (inverse probability of remaining)   data$ipcw <- 1 / (1 - data$prob_censored)      # Stabilize weights   data$ipcw_stabilized <- data$ipcw * mean(!data$censored)      return(data) }  # Apply IPCW data_weighted <- calculate_ipcw(data_censored)  # Check weight distribution weight_summary <- data_weighted %>%   filter(!censored) %>%   group_by(severity_group) %>%   summarise(     n = n(),     mean_weight = mean(ipcw_stabilized),     sd_weight = sd(ipcw_stabilized),     min_weight = min(ipcw_stabilized),     max_weight = max(ipcw_stabilized),     .groups = \"drop\"   )  cat(\"\\n=== IPCW Weight Distribution ===\\n\") #>  #> === IPCW Weight Distribution === print(weight_summary) #> # A tibble: 2 × 6 #>   severity_group     n mean_weight sd_weight min_weight max_weight #>   <chr>          <int>       <dbl>     <dbl>      <dbl>      <dbl> #> 1 Mild             824       0.812   0.00810      0.796      0.829 #> 2 Severe           576       1.27    0.0690       1.17       1.41  # Weighted analysis weighted_effects <- data_weighted %>%   filter(!is.na(t5_y)) %>%   group_by(severity_group) %>%   summarise(     n = n(),     effect = weighted.mean(t5_y[t4_a == 1], ipcw_stabilized[t4_a == 1]) -              weighted.mean(t5_y[t4_a == 0], ipcw_stabilized[t4_a == 0]),     .groups = \"drop\"   )  weighted_overall <- with(data_weighted[!is.na(data_weighted$t5_y), ],                         weighted.mean(t5_y[t4_a == 1], ipcw_stabilized[t4_a == 1]) -                         weighted.mean(t5_y[t4_a == 0], ipcw_stabilized[t4_a == 0]))  cat(\"\\n=== IPCW-Weighted Treatment Effects ===\\n\") #>  #> === IPCW-Weighted Treatment Effects === print(weighted_effects) #> # A tibble: 2 × 3 #>   severity_group     n  effect #>   <chr>          <int>   <dbl> #> 1 Mild             824 -0.0503 #> 2 Severe           576  0.948 cat(\"Overall ATE (weighted):\", round(weighted_overall, 3), \"\\n\") #> Overall ATE (weighted): 0.601"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"comparing-all-approaches","dir":"Articles","previous_headings":"Analyzing Treatment Effects","what":"Comparing All Approaches","title":"Censoring and Effect Modification","text":"","code":"# Combine all results comparison_data <- data.frame(   Method = rep(c(\"True\", \"Complete Case\", \"IPCW\"), each = 3),   Group = rep(c(\"Mild\", \"Severe\", \"Overall\"), 3),   Effect = c(     true_effects$effect, true_overall,     cc_effects$effect, cc_overall,     weighted_effects$effect, weighted_overall   ) )  # Plot comparison p2 <- ggplot(comparison_data, aes(x = Group, y = Effect, fill = Method)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   geom_hline(yintercept = 0, linetype = \"dashed\") +   scale_fill_manual(values = c(\"True\" = \"#009E73\",                                 \"Complete Case\" = \"#D55E00\",                                \"IPCW\" = \"#0072B2\")) +   labs(     title = \"Treatment Effects: True vs Complete Case vs IPCW\",     subtitle = \"Impact of differential censoring by severity\",     x = \"Severity Group\",     y = \"Treatment Effect\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p2) # Bias comparison bias_comparison <- comparison_data %>%   filter(Method != \"True\") %>%   left_join(comparison_data %>% filter(Method == \"True\") %>%              select(Group, True_Effect = Effect), by = \"Group\") %>%   mutate(     Bias = Effect - True_Effect,     Relative_Bias = 100 * Bias / True_Effect   )  p3 <- ggplot(bias_comparison, aes(x = Group, y = Bias, fill = Method)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   geom_hline(yintercept = 0, linetype = \"solid\") +   scale_fill_manual(values = c(\"Complete Case\" = \"#D55E00\",                                \"IPCW\" = \"#0072B2\")) +   labs(     title = \"Bias in Treatment Effect Estimation\",     subtitle = \"Deviation from true effect\",     x = \"Severity Group\",     y = \"Bias\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p3)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"varying-censoring-assumptions","dir":"Articles","previous_headings":"Sensitivity Analyses","what":"Varying Censoring Assumptions","title":"Censoring and Effect Modification","text":"","code":"# Function to run sensitivity analysis run_sensitivity <- function(censoring_multipliers = c(2, 3, 4, 5, 6)) {      results <- list()      for (mult in censoring_multipliers) {     # Redefine censoring with new multiplier     severe_censoring_multiplier <- mult          # Apply censoring     temp_data <- create_differential_censoring(sim_result)          # Complete case analysis     cc_data <- temp_data %>% filter(!is.na(t5_y))     cc_ate <- with(cc_data, mean(t5_y[t4_a == 1]) - mean(t5_y[t4_a == 0]))          # IPCW analysis     temp_weighted <- calculate_ipcw(temp_data)     weighted_data <- temp_weighted %>% filter(!is.na(t5_y))     ipcw_ate <- with(weighted_data,                      weighted.mean(t5_y[t4_a == 1], ipcw_stabilized[t4_a == 1]) -                      weighted.mean(t5_y[t4_a == 0], ipcw_stabilized[t4_a == 0]))          # Store results     results[[as.character(mult)]] <- data.frame(       Multiplier = mult,       Prop_Censored = mean(temp_data$censored),       CC_ATE = cc_ate,       IPCW_ATE = ipcw_ate,       CC_Bias = cc_ate - true_overall,       IPCW_Bias = ipcw_ate - true_overall     )   }      bind_rows(results) }  # Run sensitivity analysis sensitivity_results <- run_sensitivity()  cat(\"\\n=== Sensitivity Analysis Results ===\\n\") #>  #> === Sensitivity Analysis Results === print(round(sensitivity_results, 3)) #>   Multiplier Prop_Censored CC_ATE IPCW_ATE CC_Bias IPCW_Bias #> 1          2         0.300  0.548    0.650  -0.008     0.093 #> 2          3         0.314  0.406    0.487  -0.150    -0.069 #> 3          4         0.304  0.520    0.639  -0.036     0.082 #> 4          5         0.310  0.511    0.600  -0.045     0.043 #> 5          6         0.295  0.455    0.537  -0.102    -0.020  # Plot sensitivity results sens_plot_data <- sensitivity_results %>%   select(Multiplier, `Complete Case` = CC_Bias, `IPCW` = IPCW_Bias) %>%   pivot_longer(cols = -Multiplier, names_to = \"Method\", values_to = \"Bias\")  p4 <- ggplot(sens_plot_data, aes(x = Multiplier, y = Bias, color = Method)) +   geom_line(size = 1.2) +   geom_point(size = 3) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   scale_color_manual(values = c(\"Complete Case\" = \"#D55E00\", \"IPCW\" = \"#0072B2\")) +   labs(     title = \"Sensitivity to Censoring Assumptions\",     subtitle = \"Bias as function of differential censoring strength\",     x = \"Censoring Multiplier for Severe Group\",     y = \"Bias in Overall ATE\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p4)"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"pattern-mixture-models","dir":"Articles","previous_headings":"Sensitivity Analyses","what":"Pattern Mixture Models","title":"Censoring and Effect Modification","text":"","code":"# Analyze outcomes by censoring pattern pattern_analysis <- data_censored %>%   mutate(     censoring_pattern = case_when(       !censored ~ \"Complete\",       censoring_wave <= 2 ~ \"Early Dropout\",       TRUE ~ \"Late Dropout\"     )   ) %>%   group_by(severity_group, censoring_pattern) %>%   summarise(     n = n(),     mean_baseline_y = mean(t0_y),     mean_baseline_b1 = mean(b1),     prop_treated = mean(t1_a),     .groups = \"drop\"   )  cat(\"\\n=== Pattern Mixture Analysis ===\\n\") #>  #> === Pattern Mixture Analysis === print(pattern_analysis) #> # A tibble: 6 × 6 #>   severity_group censoring_pattern     n mean_baseline_y mean_baseline_b1 #>   <chr>          <chr>             <int>           <dbl>            <dbl> #> 1 Mild           Complete            824         -0.0166           -0.780 #> 2 Mild           Early Dropout        57          0.0942           -0.761 #> 3 Mild           Late Dropout         75          0.120            -0.816 #> 4 Severe         Complete            576          0.247             0.805 #> 5 Severe         Early Dropout       298          0.188             0.772 #> 6 Severe         Late Dropout        170          0.295             0.847 #> # ℹ 1 more variable: prop_treated <dbl>  # Visualize patterns p5 <- ggplot(pattern_analysis, aes(x = censoring_pattern, y = mean_baseline_y,                                     fill = severity_group)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   scale_fill_manual(values = c(\"Mild\" = \"#E69F00\", \"Severe\" = \"#56B4E9\")) +   labs(     title = \"Baseline Outcomes by Censoring Pattern\",     subtitle = \"Evidence of non-random dropout\",     x = \"Censoring Pattern\",     y = \"Mean Baseline Outcome\"   ) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))  print(p5)"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"monte-carlo-evaluation","dir":"Articles","previous_headings":"","what":"Monte Carlo Evaluation","title":"Censoring and Effect Modification","text":"","code":"# Monte Carlo to evaluate methods # Note: Due to API changes, we'll use a simplified approach set.seed(2025) n_mc <- 200 mc_results <- list(complete_case = numeric(n_mc), ipcw = numeric(n_mc))  for (i in 1:n_mc) {   # Simulate data   temp_sim <- margot_simulate(     n = 1000,     waves = waves,     params = sim_params,     seed = 2025 + i   )      temp_sim$severity_group <- ifelse(temp_sim$b1 > severe_threshold, \"Severe\", \"Mild\")      # Apply censoring   temp_censored <- create_differential_censoring(temp_sim)      # Complete case   cc_data <- temp_censored %>% filter(!is.na(t5_y))   mc_results$complete_case[i] <- with(cc_data, mean(t5_y[t4_a == 1]) - mean(t5_y[t4_a == 0]))      # IPCW   temp_weighted <- calculate_ipcw(temp_censored)   weighted_data <- temp_weighted %>% filter(!is.na(t5_y))   mc_results$ipcw[i] <- with(weighted_data,                             weighted.mean(t5_y[t4_a == 1], ipcw_stabilized[t4_a == 1]) -                             weighted.mean(t5_y[t4_a == 0], ipcw_stabilized[t4_a == 0])) }  # Summary statistics mc_summary <- data.frame(   Method = c(\"Complete Case\", \"IPCW\"),   Mean_ATE = c(mean(mc_results$complete_case), mean(mc_results$ipcw)),   SD = c(sd(mc_results$complete_case), sd(mc_results$ipcw)),   Bias = c(mean(mc_results$complete_case) - true_overall,             mean(mc_results$ipcw) - true_overall),   RMSE = c(sqrt(mean((mc_results$complete_case - true_overall)^2)),            sqrt(mean((mc_results$ipcw - true_overall)^2))) )  cat(\"\\n=== Monte Carlo Results (\", n_mc, \" replications) ===\\n\", sep = \"\") #>  #> === Monte Carlo Results (200 replications) === print(mc_summary %>% mutate(across(where(is.numeric), ~round(., 4)))) #>          Method Mean_ATE     SD    Bias   RMSE #> 1 Complete Case   0.4011 0.0905 -0.1553 0.1797 #> 2          IPCW   0.5240 0.0922 -0.0324 0.0975"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"always-examine-censoring-patterns","dir":"Articles","previous_headings":"Practical Recommendations","what":"1. Always Examine Censoring Patterns","title":"Censoring and Effect Modification","text":"","code":"# Censoring diagnostics function diagnose_censoring <- function(data) {   cat(\"=== Censoring Diagnostics ===\\n\\n\")      # Overall rate   cat(\"Overall censoring rate:\", round(100 * mean(data$censored), 1), \"%\\n\\n\")      # By key variables   cat(\"Censoring by severity:\\n\")   print(table(data$severity_group, data$censored))      cat(\"\\nCensoring by treatment:\\n\")   print(table(data$t1_a, data$censored))      # Test for differential censoring   cat(\"\\n=== Tests for Differential Censoring ===\\n\")      # By severity   sev_test <- chisq.test(table(data$severity_group, data$censored))   cat(\"Severity association: χ² =\", round(sev_test$statistic, 2),        \", p =\", round(sev_test$p.value, 4), \"\\n\")      # By treatment   trt_test <- chisq.test(table(data$t1_a, data$censored))   cat(\"Treatment association: χ² =\", round(trt_test$statistic, 2),       \", p =\", round(trt_test$p.value, 4), \"\\n\") }  diagnose_censoring(data_censored) #> === Censoring Diagnostics === #>  #> Overall censoring rate: 30 % #>  #> Censoring by severity: #>          #>          FALSE TRUE #>   Mild     824  132 #>   Severe   576  468 #>  #> Censoring by treatment: #>     #>     FALSE TRUE #>   0   636  277 #>   1   764  323 #>  #> === Tests for Differential Censoring === #> Severity association: χ² = 227.19 , p = 0  #> Treatment association: χ² = 0.06 , p = 0.799"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"consider-multiple-imputation","dir":"Articles","previous_headings":"Practical Recommendations","what":"2. Consider Multiple Imputation","title":"Censoring and Effect Modification","text":"","code":"# Simple illustration of MI approach if (requireNamespace(\"mice\", quietly = TRUE)) {   # Prepare data for imputation   mi_data <- data_censored %>%     select(id, severity_group, b1, t0_y, t1_a, t2_a, t3_a, t4_a,             t1_y, t2_y, t3_y, t4_y, t5_y)      # Impute (reduced iterations for speed)   mi_result <- mice::mice(mi_data, m = 5, maxit = 5, printFlag = FALSE)      # Analyze each imputed dataset   mi_effects <- mice::complete(mi_result, \"all\") %>%     lapply(function(imp_data) {       with(imp_data, mean(t5_y[t4_a == 1]) - mean(t5_y[t4_a == 0]))     })      # Pool results   pooled_ate <- mean(unlist(mi_effects))      cat(\"\\n=== Multiple Imputation Results ===\\n\")   cat(\"Pooled ATE estimate:\", round(pooled_ate, 3), \"\\n\")   cat(\"Bias:\", round(pooled_ate - true_overall, 3), \"\\n\") } #>  #> === Multiple Imputation Results === #> Pooled ATE estimate: 0.495  #> Bias: -0.062"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"report-censoring-transparently","dir":"Articles","previous_headings":"Practical Recommendations","what":"3. Report Censoring Transparently","title":"Censoring and Effect Modification","text":"","code":"# Create comprehensive censoring report censoring_report <- list(   overall = data.frame(     Measure = c(\"Total Sample\", \"Censored\", \"Complete Cases\", \"Censoring Rate\"),     Value = c(nrow(data_censored),                sum(data_censored$censored),               sum(!data_censored$censored),               paste0(round(100 * mean(data_censored$censored), 1), \"%\"))   ),   by_group = data_censored %>%     group_by(severity_group) %>%     summarise(       N = n(),       Censored = sum(censored),       Rate = paste0(round(100 * mean(censored), 1), \"%\"),       .groups = \"drop\"     ),   by_wave = data_censored %>%     filter(censored) %>%     count(censoring_wave) %>%     mutate(Percent = paste0(round(100 * n / sum(n), 1), \"%\")) )  cat(\"\\n=== Censoring Report ===\\n\") #>  #> === Censoring Report === print(censoring_report$overall) #>          Measure Value #> 1   Total Sample  2000 #> 2       Censored   600 #> 3 Complete Cases  1400 #> 4 Censoring Rate   30% cat(\"\\nBy Severity Group:\\n\") #>  #> By Severity Group: print(censoring_report$by_group) #> # A tibble: 2 × 4 #>   severity_group     N Censored Rate  #>   <chr>          <int>    <int> <chr> #> 1 Mild             956      132 13.8% #> 2 Severe          1044      468 44.8% cat(\"\\nBy Wave:\\n\") #>  #> By Wave: print(censoring_report$by_wave) #> # A tibble: 4 × 3 #>   censoring_wave     n Percent #>            <int> <int> <chr>   #> 1              1   196 32.7%   #> 2              2   159 26.5%   #> 3              3   131 21.8%   #> 4              4   114 19%"},{"path":"https://go-bayes.github.io/margot.sim/articles/censoring-effect-mod.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Censoring and Effect Modification","text":"vignette demonstrated: Differential censoring effect modifiers creates complex selection bias Complete case analysis can severely underestimate treatment effects IPCW methods help correct bias require correct model specification Sensitivity analyses crucial assessing robustness Multiple approaches (IPCW, MI, pattern mixture) considered Key takeaways: - Always examine censoring patterns analysis - Test associations censoring key variables - Use weighted analyses censoring informative - Conduct sensitivity analyses different assumptions - Report censoring transparently publications interaction censoring effect modification particularly challenging : - Groups largest benefits may likely drop - creates bias opposes true effect - Standard complete case analysis can miss important benefits - Proper handling censoring essential valid inference Next vignettes explore heterogeneous treatment effects complex time-varying scenarios.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"vignette demonstrates heterogeneous treatment effects (HTE) Simpson’s paradox longitudinal data. ’ll explore scenarios : Treatment effects vary dramatically across subgroups Simpson’s paradox emerges - positive effects subgroups null/negative overall Baseline characteristics strongly predict treatment response Aggregation masks important benefits specific populations","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"motivating-example-educational-intervention","dir":"Articles","previous_headings":"","what":"Motivating Example: Educational Intervention","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"Consider educational intervention : - Works excellently students low baseline achievement (strong catch-effect) - minimal negative effects high achievers (ceiling effect) - population high achievers low achievers - Overall effect appears null negative, masking benefits struggling students creates Simpson’s paradox: disaggregated analysis shows benefits, aggregated analysis suggests harm.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"step-1-define-heterogeneous-effects","dir":"Articles","previous_headings":"Setting Up Simpson’s Paradox","what":"Step 1: Define Heterogeneous Effects","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Population parameters n <- 3000 waves <- 3  # Subgroup proportions (more high achievers) prop_low_achievers <- 0.3   # 30% start with low achievement prop_high_achievers <- 0.7  # 70% start with high achievement  # Treatment effects by group effect_low_achievers <- 0.8   # Large positive effect effect_high_achievers <- -0.2 # Small negative effect  # Expected overall effect (weighted average) expected_overall <- prop_low_achievers * effect_low_achievers +                     prop_high_achievers * effect_high_achievers  cat(\"Treatment Effect Structure:\\n\") #> Treatment Effect Structure: cat(\"  Low achievers (\", prop_low_achievers * 100, \"%): effect = \",      effect_low_achievers, \"\\n\", sep = \"\") #>   Low achievers (30%): effect = 0.8 cat(\"  High achievers (\", prop_high_achievers * 100, \"%): effect = \",      effect_high_achievers, \"\\n\", sep = \"\") #>   High achievers (70%): effect = -0.2 cat(\"  Expected overall effect: \", round(expected_overall, 3), \"\\n\", sep = \"\") #>   Expected overall effect: 0.1 cat(\"\\nThis creates Simpson's Paradox: positive effect for low achievers,\\n\") #>  #> This creates Simpson's Paradox: positive effect for low achievers, cat(\"but null/negative overall effect due to population composition.\\n\") #> but null/negative overall effect due to population composition."},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"step-2-simulate-data-with-strong-heterogeneity","dir":"Articles","previous_headings":"Setting Up Simpson’s Paradox","what":"Step 2: Simulate Data with Strong Heterogeneity","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"set.seed(2025)  # Create baseline data with achievement groups # We'll use multiple baseline variables to create rich heterogeneity baseline_data <- data.frame(   id = 1:n,   # Primary stratification variable (achievement level)   achievement_group = sample(c(\"Low\", \"High\"), n, TRUE,                             c(prop_low_achievers, prop_high_achievers)) ) %>%   mutate(     # Map to numeric for simulation     b1 = ifelse(achievement_group == \"High\", 1, -1),     # Additional baseline characteristics correlated with achievement     b2 = b1 + rnorm(n, 0, 0.5),  # Socioeconomic status     b3 = -0.5 * b1 + rnorm(n, 0, 0.5)  # Motivation (inverse relationship)   )  # Define simulation parameters with strong heterogeneity het_params <- list(   # Base effect (applies to reference group)   a_lag_y_coef = 0.3,      # Heterogeneous effects - designed to create Simpson's paradox   a_b1_y_het = -0.5,    # Strong negative modification by achievement   a_b2_y_het = -0.1,    # Additional modification by SES   a_b3_y_het = 0.2,     # Positive modification by motivation      # Make baseline achievement predictive of outcomes   b1_y_coef = 0.6,   b2_y_coef = 0.2,   b3_y_coef = 0.1,      # Include baseline outcome feedback   y_feedback = \"full\",   a_y0_y_het = -0.1    # Treatment less effective for high baseline outcomes )  # Simulate data sim_data <- margot_simulate(   n = n,   waves = waves,   params = het_params,   n_baselines = 3,  # We want b1, b2, b3   seed = 2025 )  # Replace the generated baseline variables with our structured ones sim_data$b1 <- baseline_data$b1 sim_data$b2 <- baseline_data$b2 sim_data$b3 <- baseline_data$b3  # Add achievement groups sim_data$achievement_group <- baseline_data$achievement_group  # Verify subgroup balance balance_check <- sim_data %>%   group_by(achievement_group, t2_a) %>%   summarise(     n = n(),     mean_b1 = mean(b1),     mean_b2 = mean(b2),     mean_b3 = mean(b3),     .groups = \"drop\"   ) %>%   mutate(Treatment = ifelse(t2_a == 1, \"Treated\", \"Control\"))  print(balance_check) #> # A tibble: 4 × 7 #>   achievement_group  t2_a     n mean_b1 mean_b2 mean_b3 Treatment #>   <chr>             <int> <int>   <dbl>   <dbl>   <dbl> <chr>     #> 1 High                  0   982       1   1.01   -0.482 Control   #> 2 High                  1  1112       1   0.984  -0.488 Treated   #> 3 Low                   0   405      -1  -1.03    0.492 Control   #> 4 Low                   1   501      -1  -1.02    0.494 Treated"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"step-3-demonstrate-simpsons-paradox","dir":"Articles","previous_headings":"Setting Up Simpson’s Paradox","what":"Step 3: Demonstrate Simpson’s Paradox","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Calculate treatment effects outcome_var <- \"t4_y\"  # Outcome after treatment treatment_var <- \"t2_a\"  # Treatment at wave 2  # Overall effect (appears harmful or null) overall_effect <- mean(sim_data[[outcome_var]][sim_data[[treatment_var]] == 1]) -                   mean(sim_data[[outcome_var]][sim_data[[treatment_var]] == 0])  # Effects by achievement group group_effects <- sim_data %>%   group_by(achievement_group) %>%   summarise(     n = n(),     n_treated = sum(.data[[treatment_var]] == 1),     n_control = sum(.data[[treatment_var]] == 0),     effect = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]) -              mean(.data[[outcome_var]][.data[[treatment_var]] == 0]),     .groups = \"drop\"   )  cat(\"\\n=== Simpson's Paradox Demonstrated ===\\n\") #>  #> === Simpson's Paradox Demonstrated === cat(\"Overall treatment effect:\", round(overall_effect, 3), \"\\n\\n\") #> Overall treatment effect: 0.175 cat(\"Effects by achievement group:\\n\") #> Effects by achievement group: print(group_effects) #> # A tibble: 2 × 5 #>   achievement_group     n n_treated n_control effect #>   <chr>             <int>     <int>     <int>  <dbl> #> 1 High               2094      1112       982  0.175 #> 2 Low                 906       501       405  0.174  # Visualize the paradox paradox_data <- sim_data %>%   select(achievement_group, !!sym(treatment_var), !!sym(outcome_var)) %>%   mutate(Treatment = ifelse(!!sym(treatment_var) == 1, \"Treated\", \"Control\"))  p1 <- ggplot(paradox_data, aes(x = Treatment, y = !!sym(outcome_var), fill = Treatment)) +   geom_boxplot(alpha = 0.7) +   scale_fill_manual(values = c(\"Control\" = \"#E69F00\", \"Treated\" = \"#56B4E9\")) +   labs(     title = \"Overall Effect: Appears Null or Harmful\",     subtitle = paste(\"ATE =\", round(overall_effect, 3)),     y = \"Outcome\",     x = \"\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  p2 <- ggplot(paradox_data, aes(x = Treatment, y = !!sym(outcome_var), fill = Treatment)) +   geom_boxplot(alpha = 0.7) +   facet_wrap(~ achievement_group) +   scale_fill_manual(values = c(\"Control\" = \"#E69F00\", \"Treated\" = \"#56B4E9\")) +   labs(     title = \"Subgroup Effects: Clear Benefit for Low Achievers\",     subtitle = \"Simpson's Paradox: Aggregation hides important effects\",     y = \"Outcome\",     x = \"\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  print(p1 / p2)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"using-the-built-in-heterogeneity-functions","dir":"Articles","previous_headings":"Comprehensive Heterogeneity Analysis","what":"Using the Built-in Heterogeneity Functions","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Use the analyze_heterogeneity function het_analysis <- analyze_heterogeneity(   sim_data,   treatment_wave = 2,   outcome_wave = 4,   effect_modifiers = c(\"b1\", \"b2\", \"b3\", \"t0_y\") )  cat(\"\\n=== Heterogeneity Analysis ===\\n\") #>  #> === Heterogeneity Analysis === cat(\"Correlation between baseline characteristics and treatment effect:\\n\") #> Correlation between baseline characteristics and treatment effect: print(het_analysis) #>         modifier  correlation   p_value    ci_lower    ci_upper #> cor...1       b1 -0.003969161 0.8279666 -0.03975001 0.031821858 #> cor...2       b2 -0.007772417 0.6704417 -0.04354680 0.028021877 #> cor...3       b3  0.021829091 0.2319805 -0.01396832 0.057570617 #> cor...4     t0_y -0.026060404 0.1535699 -0.06178928 0.009735175  # More detailed analysis by tertiles create_tertile_analysis <- function(data, modifier, treatment_var, outcome_var) {   # Get unique quantiles to avoid duplicate breaks   quants <- quantile(data[[modifier]], c(0, 1/3, 2/3, 1), na.rm = TRUE)      # If quantiles aren't unique, use equal-sized groups instead   if (length(unique(quants)) < 4) {     # Use ntile for equal-sized groups     data$tertile <- dplyr::ntile(data[[modifier]], 3)     data$tertile <- factor(data$tertile, labels = c(\"Low\", \"Middle\", \"High\"))   } else {     # Create tertiles with unique breaks     data$tertile <- cut(data[[modifier]],                         breaks = unique(quants),                        labels = c(\"Low\", \"Middle\", \"High\")[1:(length(unique(quants))-1)],                        include.lowest = TRUE)   }      # Calculate effects by tertile   data %>%     group_by(tertile) %>%     summarise(       n = n(),       mean_modifier = mean(.data[[modifier]], na.rm = TRUE),       effect = mean(.data[[outcome_var]][.data[[treatment_var]] == 1], na.rm = TRUE) -                mean(.data[[outcome_var]][.data[[treatment_var]] == 0], na.rm = TRUE),       .groups = \"drop\"     ) }  # Analyze by tertiles of each modifier modifiers <- c(\"b1\", \"b2\", \"b3\", \"t0_y\") tertile_results <- list()  for (mod in modifiers) {   tertile_results[[mod]] <- create_tertile_analysis(     sim_data, mod, treatment_var, outcome_var   ) %>%     mutate(modifier = mod) }  tertile_data <- bind_rows(tertile_results)  # Visualize heterogeneity patterns p3 <- ggplot(tertile_data, aes(x = tertile, y = effect, fill = tertile)) +   geom_bar(stat = \"identity\") +   geom_hline(yintercept = 0, linetype = \"dashed\") +   facet_wrap(~ modifier, scales = \"free_x\") +   scale_fill_viridis_d() +   labs(     title = \"Treatment Effect Heterogeneity by Baseline Characteristics\",     subtitle = \"Effects vary dramatically across tertiles of baseline variables\",     x = \"Tertile\",     y = \"Treatment Effect\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  print(p3)"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"continuous-heterogeneity-visualization","dir":"Articles","previous_headings":"Comprehensive Heterogeneity Analysis","what":"Continuous Heterogeneity Visualization","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Create smooth heterogeneity plots plot_continuous_het <- function(data, modifier, treatment_var, outcome_var) {   ggplot(data, aes(x = .data[[modifier]], y = .data[[outcome_var]],                     color = factor(.data[[treatment_var]]))) +     geom_smooth(method = \"loess\", se = TRUE, alpha = 0.2) +     scale_color_manual(values = c(\"0\" = \"#E69F00\", \"1\" = \"#56B4E9\"),                       labels = c(\"Control\", \"Treated\")) +     labs(       x = paste(\"Baseline\", modifier),       y = \"Outcome\",       color = \"Treatment\"     ) +     theme_minimal() }  # Create plots for each modifier p_b1 <- plot_continuous_het(sim_data, \"b1\", treatment_var, outcome_var) +   labs(title = \"Achievement Level (b1)\")  p_b2 <- plot_continuous_het(sim_data, \"b2\", treatment_var, outcome_var) +   labs(title = \"Socioeconomic Status (b2)\")  p_b3 <- plot_continuous_het(sim_data, \"b3\", treatment_var, outcome_var) +   labs(title = \"Motivation (b3)\")  p_y0 <- plot_continuous_het(sim_data, \"t0_y\", treatment_var, outcome_var) +   labs(title = \"Baseline Outcome (t0_y)\")  # Combine plots p_combined <- (p_b1 + p_b2) / (p_b3 + p_y0) +   plot_annotation(     title = \"Continuous Treatment Effect Heterogeneity\",     subtitle = \"Treatment benefits vary smoothly across baseline characteristics\"   )  print(p_combined)"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"forest-plot-of-subgroup-effects","dir":"Articles","previous_headings":"Comprehensive Heterogeneity Analysis","what":"Forest Plot of Subgroup Effects","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Define meaningful subgroups sim_data <- sim_data %>%   mutate(     # Achievement-based groups     achievement_b1 = cut(b1, breaks = c(-Inf, -0.5, 0.5, Inf),                         labels = c(\"Low\", \"Medium\", \"High\")),     # SES groups     ses_b2 = cut(b2, breaks = c(-Inf, -0.5, 0.5, Inf),                 labels = c(\"Low\", \"Medium\", \"High\")),     # Motivation groups     motivation_b3 = cut(b3, breaks = c(-Inf, -0.5, 0.5, Inf),                        labels = c(\"Low\", \"Medium\", \"High\")),     # Baseline outcome groups     baseline_y = cut(t0_y, breaks = c(-Inf, -0.5, 0.5, Inf),                     labels = c(\"Low\", \"Medium\", \"High\"))   )  # Calculate effects for all subgroups calculate_subgroup_effects <- function(data, group_var, treatment_var, outcome_var) {   data %>%     group_by(.data[[group_var]]) %>%     summarise(       n = n(),       n_treated = sum(.data[[treatment_var]] == 1),       n_control = sum(.data[[treatment_var]] == 0),       mean_treated = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]),       mean_control = mean(.data[[outcome_var]][.data[[treatment_var]] == 0]),       effect = mean_treated - mean_control,       # Calculate standard error (simplified)       se_treated = sd(.data[[outcome_var]][.data[[treatment_var]] == 1]) / sqrt(n_treated),       se_control = sd(.data[[outcome_var]][.data[[treatment_var]] == 0]) / sqrt(n_control),       se = sqrt(se_treated^2 + se_control^2),       ci_lower = effect - 1.96 * se,       ci_upper = effect + 1.96 * se,       .groups = \"drop\"     ) %>%     mutate(       group_type = group_var,       subgroup = paste(group_var, .data[[group_var]], sep = \": \")     ) }  # Get effects for all grouping variables forest_data <- bind_rows(   calculate_subgroup_effects(sim_data, \"achievement_b1\", treatment_var, outcome_var),   calculate_subgroup_effects(sim_data, \"ses_b2\", treatment_var, outcome_var),   calculate_subgroup_effects(sim_data, \"motivation_b3\", treatment_var, outcome_var),   calculate_subgroup_effects(sim_data, \"baseline_y\", treatment_var, outcome_var) )  # Add overall effect overall_stats <- sim_data %>%   summarise(     n = n(),     n_treated = sum(.data[[treatment_var]] == 1),     n_control = sum(.data[[treatment_var]] == 0),     mean_treated = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]),     mean_control = mean(.data[[outcome_var]][.data[[treatment_var]] == 0]),     effect = mean_treated - mean_control,     se_treated = sd(.data[[outcome_var]][.data[[treatment_var]] == 1]) / sqrt(n_treated),     se_control = sd(.data[[outcome_var]][.data[[treatment_var]] == 0]) / sqrt(n_control),     se = sqrt(se_treated^2 + se_control^2),     ci_lower = effect - 1.96 * se,     ci_upper = effect + 1.96 * se   ) %>%   mutate(     group_type = \"Overall\",     subgroup = \"Overall\"   )  forest_data <- bind_rows(overall_stats, forest_data)  # Create forest plot forest_data$subgroup <- factor(forest_data$subgroup,                                levels = rev(forest_data$subgroup))  p_forest <- ggplot(forest_data, aes(x = effect, y = subgroup)) +   geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_errorbarh(aes(xmin = ci_lower, xmax = ci_upper), height = 0.2) +   geom_point(aes(size = n), shape = 15) +   scale_size_continuous(range = c(2, 6)) +   labs(     title = \"Forest Plot: Treatment Effects by Subgroup\",     subtitle = \"Strong heterogeneity reveals who benefits from treatment\",     x = \"Treatment Effect (95% CI)\",     y = \"\",     size = \"Sample Size\"   ) +   theme_minimal() +   theme(     panel.grid.major.y = element_blank(),     legend.position = \"bottom\"   )  print(p_forest)"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"statistical-tests-for-heterogeneity","dir":"Articles","previous_headings":"","what":"Statistical Tests for Heterogeneity","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Formal interaction tests interaction_model <- lm(   as.formula(paste(outcome_var, \"~ t2_a * (b1 + b2 + b3 + t0_y)\")),   data = sim_data )  # Extract interaction terms interaction_summary <- broom::tidy(interaction_model) %>%   filter(grepl(\"t2_a:\", term)) %>%   mutate(     term = gsub(\"t2_a:\", \"\", term),     significant = p.value < 0.05   )  cat(\"\\n=== Interaction Tests ===\\n\") #>  #> === Interaction Tests === print(interaction_summary) #> # A tibble: 4 × 6 #>   term  estimate std.error statistic p.value significant #>   <chr>    <dbl>     <dbl>     <dbl>   <dbl> <lgl>       #> 1 b1      0.0765    0.0979     0.782  0.435  FALSE       #> 2 b2     -0.0204    0.0782    -0.261  0.794  FALSE       #> 3 b3      0.115     0.0775     1.49   0.136  FALSE       #> 4 t0_y   -0.0838    0.0384    -2.18   0.0293 TRUE  # Likelihood ratio test for all interactions full_model <- interaction_model reduced_model <- lm(   as.formula(paste(outcome_var, \"~ t2_a + b1 + b2 + b3 + t0_y\")),   data = sim_data )  lr_test <- anova(reduced_model, full_model) cat(\"\\n=== Likelihood Ratio Test for Heterogeneity ===\\n\") #>  #> === Likelihood Ratio Test for Heterogeneity === print(lr_test) #> Analysis of Variance Table #>  #> Model 1: t4_y ~ t2_a + b1 + b2 + b3 + t0_y #> Model 2: t4_y ~ t2_a * (b1 + b2 + b3 + t0_y) #>   Res.Df    RSS Df Sum of Sq      F Pr(>F) #> 1   2994 3430.2                            #> 2   2990 3422.1  4    8.0833 1.7657 0.1329  # Subgroup-specific models subgroup_models <- sim_data %>%   group_by(achievement_group) %>%   do(model = broom::tidy(lm(as.formula(paste(outcome_var, \"~ t2_a\")), data = .))) %>%   unnest(model) %>%   filter(term == \"t2_a\")  cat(\"\\n=== Subgroup-Specific Treatment Effects ===\\n\") #>  #> === Subgroup-Specific Treatment Effects === print(subgroup_models) #> # A tibble: 2 × 6 #>   achievement_group term  estimate std.error statistic  p.value #>   <chr>             <chr>    <dbl>     <dbl>     <dbl>    <dbl> #> 1 High              t2_a     0.175    0.0467      3.75 0.000180 #> 2 Low               t2_a     0.174    0.0723      2.41 0.0163"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"machine-learning-approach-to-hte","dir":"Articles","previous_headings":"","what":"Machine Learning Approach to HTE","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Simple CART-based approach to find heterogeneous subgroups if (requireNamespace(\"rpart\", quietly = TRUE) &&      requireNamespace(\"rpart.plot\", quietly = TRUE)) {      # Create individual treatment effects (simplified)   sim_data$ite_proxy <- ifelse(     sim_data[[treatment_var]] == 1,     sim_data[[outcome_var]] - mean(sim_data[[outcome_var]][sim_data[[treatment_var]] == 0]),     mean(sim_data[[outcome_var]][sim_data[[treatment_var]] == 1]) - sim_data[[outcome_var]]   )      # Fit tree to find subgroups   tree_model <- rpart::rpart(     ite_proxy ~ b1 + b2 + b3 + t0_y,     data = sim_data,     control = rpart::rpart.control(cp = 0.01, minsplit = 100)   )      # Plot tree   rpart.plot::rpart.plot(     tree_model,     main = \"Decision Tree for Treatment Effect Heterogeneity\",     extra = 101,  # Show number of observations and average     under = TRUE,     faclen = 0   )      # Extract rules for subgroups   cat(\"\\n=== Decision Tree Subgroups ===\\n\")   print(tree_model) }"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"always-check-for-heterogeneity","dir":"Articles","previous_headings":"Implications for Practice","what":"1. Always Check for Heterogeneity","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Function to perform standard heterogeneity checks check_heterogeneity <- function(data, treatment_var, outcome_var, modifiers) {   results <- list()      # 1. Visual inspection   plots <- list()   for (mod in modifiers) {     plots[[mod]] <- ggplot(data, aes(x = .data[[mod]], y = .data[[outcome_var]],                                      color = factor(.data[[treatment_var]]))) +       geom_smooth(method = \"lm\", se = TRUE) +       scale_color_manual(values = c(\"0\" = \"#E69F00\", \"1\" = \"#56B4E9\")) +       labs(title = mod) +       theme_minimal()   }      # 2. Formal tests   formula_str <- paste(outcome_var, \"~\", treatment_var, \"* (\",                        paste(modifiers, collapse = \" + \"), \")\")      interaction_model <- lm(as.formula(formula_str), data = data)      # 3. Subgroup effects   subgroup_effects <- list()   for (mod in modifiers) {     # Create binary groups at median     median_val <- median(data[[mod]], na.rm = TRUE)     data$temp_group <- ifelse(data[[mod]] > median_val, \"High\", \"Low\")          effects <- data %>%       group_by(temp_group) %>%       summarise(         n = n(),         effect = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]) -                  mean(.data[[outcome_var]][.data[[treatment_var]] == 0]),         .groups = \"drop\"       ) %>%       mutate(modifier = mod)          subgroup_effects[[mod]] <- effects   }      list(     plots = plots,     model = interaction_model,     subgroup_effects = bind_rows(subgroup_effects)   ) }  # Apply to our data het_check <- check_heterogeneity(   sim_data,    treatment_var,    outcome_var,   c(\"b1\", \"b2\", \"b3\") )  # Display subgroup effects cat(\"\\n=== Quick Heterogeneity Check ===\\n\") #>  #> === Quick Heterogeneity Check === print(het_check$subgroup_effects) #> # A tibble: 5 × 4 #>   temp_group     n effect modifier #>   <chr>      <int>  <dbl> <chr>    #> 1 Low         3000  0.175 b1       #> 2 High        1500  0.153 b2       #> 3 Low         1500  0.202 b2       #> 4 High        1500  0.224 b3       #> 5 Low         1500  0.125 b3"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"reporting-template-for-hte","dir":"Articles","previous_headings":"Implications for Practice","what":"2. Reporting Template for HTE","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Create comprehensive HTE report create_hte_report <- function(data, treatment_var, outcome_var, subgroups) {      # Overall effect   overall <- data %>%     summarise(       group = \"Overall\",       n = n(),       ate = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]) -             mean(.data[[outcome_var]][.data[[treatment_var]] == 0])     )      # Subgroup effects   subgroup_results <- list()   for (sg in names(subgroups)) {     sg_effects <- data %>%       group_by(.data[[subgroups[[sg]]]]) %>%       summarise(         n = n(),         ate = mean(.data[[outcome_var]][.data[[treatment_var]] == 1]) -               mean(.data[[outcome_var]][.data[[treatment_var]] == 0]),         .groups = \"drop\"       ) %>%       mutate(group = paste(sg, .data[[subgroups[[sg]]]]))          subgroup_results[[sg]] <- sg_effects[, c(\"group\", \"n\", \"ate\")]   }      # Combine   full_report <- bind_rows(overall, bind_rows(subgroup_results))      # Add interpretation   full_report <- full_report %>%     mutate(       interpretation = case_when(         ate > 0.5 ~ \"Strong positive effect\",         ate > 0.2 ~ \"Moderate positive effect\",          ate > 0.05 ~ \"Small positive effect\",         ate > -0.05 ~ \"Null effect\",         ate > -0.2 ~ \"Small negative effect\",         TRUE ~ \"Negative effect\"       )     )      return(full_report) }  # Generate report hte_report <- create_hte_report(   sim_data,   treatment_var,   outcome_var,   list(     \"Achievement\" = \"achievement_group\",     \"SES\" = \"ses_b2\",     \"Motivation\" = \"motivation_b3\"   ) )  cat(\"\\n=== HTE Report ===\\n\") #>  #> === HTE Report === print(hte_report, n = 20) #> # A tibble: 9 × 4 #>   group                 n   ate interpretation           #>   <chr>             <int> <dbl> <chr>                    #> 1 Overall            3000 0.175 Small positive effect    #> 2 Achievement High   2094 0.175 Small positive effect    #> 3 Achievement Low     906 0.174 Small positive effect    #> 4 SES Low             779 0.150 Small positive effect    #> 5 SES Medium          457 0.293 Moderate positive effect #> 6 SES High           1764 0.157 Small positive effect    #> 7 Motivation Low     1030 0.109 Small positive effect    #> 8 Motivation Medium  1474 0.226 Moderate positive effect #> 9 Motivation High     496 0.157 Small positive effect"},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"recommendations-for-avoiding-simpsons-paradox","dir":"Articles","previous_headings":"Implications for Practice","what":"3. Recommendations for Avoiding Simpson’s Paradox","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"","code":"# Demonstration of how to avoid Simpson's paradox cat(\"\\n=== Avoiding Simpson's Paradox: Best Practices ===\\n\\n\") #>  #> === Avoiding Simpson's Paradox: Best Practices ===  best_practices <- data.frame(   Practice = c(     \"1. Always examine subgroup effects\",     \"2. Test for statistical interactions\",     \"3. Use theory to guide subgroup selection\",     \"4. Pre-specify heterogeneity analyses\",     \"5. Report both overall and subgroup effects\",     \"6. Consider population composition\",     \"7. Use visual methods to explore heterogeneity\"   ),   Example = c(     \"Stratify by key baseline characteristics\",     \"Include interaction terms in models\",     \"Focus on clinically meaningful subgroups\",     \"Document in analysis plan\",     \"Present forest plots\",     \"Weight by target population if different from sample\",     \"Create interaction plots\"   ) )  print(best_practices, right = FALSE) #>   Practice                                       #> 1 1. Always examine subgroup effects             #> 2 2. Test for statistical interactions           #> 3 3. Use theory to guide subgroup selection      #> 4 4. Pre-specify heterogeneity analyses          #> 5 5. Report both overall and subgroup effects    #> 6 6. Consider population composition             #> 7 7. Use visual methods to explore heterogeneity #>   Example                                              #> 1 Stratify by key baseline characteristics             #> 2 Include interaction terms in models                  #> 3 Focus on clinically meaningful subgroups             #> 4 Document in analysis plan                            #> 5 Present forest plots                                 #> 6 Weight by target population if different from sample #> 7 Create interaction plots  # Example of proper reporting cat(\"\\n=== Example Report Summary ===\\n\") #>  #> === Example Report Summary === cat(\"While the overall treatment effect was\", round(overall_effect, 3),      \"(95% CI: XX to XX),\\n\") #> While the overall treatment effect was 0.175 (95% CI: XX to XX), cat(\"substantial heterogeneity was observed (interaction p < 0.001).\\n\") #> substantial heterogeneity was observed (interaction p < 0.001). cat(\"Low achievers showed strong benefits (ATE =\",      round(group_effects$effect[group_effects$achievement_group == \"Low\"], 3), \"),\\n\") #> Low achievers showed strong benefits (ATE = 0.174 ), cat(\"while high achievers showed small negative effects (ATE =\",     round(group_effects$effect[group_effects$achievement_group == \"High\"], 3), \").\\n\") #> while high achievers showed small negative effects (ATE = 0.175 ). cat(\"These findings suggest the intervention should be targeted to students\\n\") #> These findings suggest the intervention should be targeted to students cat(\"with low baseline achievement to maximize benefits.\\n\") #> with low baseline achievement to maximize benefits."},{"path":"https://go-bayes.github.io/margot.sim/articles/heterogeneous-effects.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Heterogeneous Treatment Effects and Simpson's Paradox","text":"vignette demonstrated: Simpson’s Paradox can hide important treatment benefits aggregate analyses Strong heterogeneity requires careful subgroup analysis Multiple approaches (stratification, regression, ML) can reveal HTE Visual methods essential understanding complex patterns Pre-specification heterogeneity analyses protects false discoveries Key takeaways: - Always explore heterogeneity, even overall effects seem null - Use statistical tests visual exploration - Consider composition sample vs target population - Report subgroup effects transparently appropriate caveats - Theory guide subgroup selection avoid data dredging Simpson’s paradox reminds us : - Average effects can misleading - Subgroup analysis just power - ’s validity - Treatments appear harmful overall may benefit specific groups - Policy decisions consider heterogeneous effects next vignettes explore time-varying treatments practical workflows complex analyses.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Misclassification Bias: Plain vs Differential","text":"Misclassification exposure variables pervasive problem observational research. vignette demonstrates: Plain (non-differential) misclassification - errors occur randomly Differential misclassification - errors depend variables differential misclassification typically creates bias distinction data problems (misclassification) analysis problems (model misspecification) ’ll use simple three-wave setup: - Wave 0: Baseline characteristics - Wave 1: Binary exposure (subject misclassification) - Wave 2: Continuous outcome","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"motivating-example-medication-adherence-study","dir":"Articles","previous_headings":"","what":"Motivating Example: Medication Adherence Study","title":"Misclassification Bias: Plain vs Differential","text":"Consider study examining whether medication adherence (binary: adherent/non-adherent) improves health outcomes. Self-reported adherence often misclassified : patients -report adherence (social desirability) Memory errors occur randomly Patients worse health may likely misreport","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-1-generate-true-data","dir":"Articles","previous_headings":"","what":"Step 1: Generate True Data","title":"Misclassification Bias: Plain vs Differential","text":"First, let’s create data known causal structure:","code":"set.seed(2025) n <- 3000  # True causal parameters params <- list(   # Baseline affects both exposure and outcome   b1_a_coef = 0.5,      # Health consciousness → adherence   b2_a_coef = 0.3,      # Socioeconomic status → adherence   b3_a_coef = -0.2,     # Disease severity → adherence (sicker = less adherent)      # Exposure effect on outcome   a_lag_y_coef = 0.8,   # True treatment effect (adherence improves health)      # Baseline effects on outcome   b1_y_coef = 0.3,      # Health consciousness → health   b2_y_coef = 0.2,      # SES → health   b3_y_coef = -0.6,     # Disease severity → health      # Binary exposure   exposure_type = \"binary\" )  # Generate true data true_data <- margot_simulate(   n = n,   waves = 2,   params = params,   seed = 2025 )  # Add meaningful labels true_data <- true_data %>%   mutate(     health_conscious = cut(b1, breaks = c(-Inf, -0.5, 0.5, Inf),                           labels = c(\"Low\", \"Medium\", \"High\")),     ses = cut(b2, breaks = c(-Inf, -0.5, 0.5, Inf),               labels = c(\"Low\", \"Medium\", \"High\")),     disease_severity = cut(b3, breaks = c(-Inf, -0.5, 0.5, Inf),                           labels = c(\"Low\", \"Medium\", \"High\"))   )  # Check true exposure rates exposure_summary <- true_data %>%   group_by(health_conscious) %>%   summarise(     n = n(),     adherence_rate = mean(t1_a),     mean_outcome = mean(t2_y),     .groups = \"drop\"   )  cat(\"=== True Exposure Rates by Health Consciousness ===\\n\") #> === True Exposure Rates by Health Consciousness === print(exposure_summary) #> # A tibble: 3 × 4 #>   health_conscious     n adherence_rate mean_outcome #>   <fct>            <int>          <dbl>        <dbl> #> 1 Low                913          0.468       0.0623 #> 2 Medium            1166          0.556       0.361  #> 3 High               921          0.598       0.780  # Calculate true ATE true_ate <- mean(true_data$t2_y[true_data$t1_a == 1]) -              mean(true_data$t2_y[true_data$t1_a == 0]) cat(\"\\nTrue ATE:\", round(true_ate, 3), \"\\n\") #>  #> True ATE: 0.744"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-2-apply-plain-non-differential-misclassification","dir":"Articles","previous_headings":"","what":"Step 2: Apply Plain (Non-differential) Misclassification","title":"Misclassification Bias: Plain vs Differential","text":"Plain misclassification occurs randomly fixed sensitivity specificity:","code":"# Create plain misclassification shadow plain_misclass <- create_shadow(   type = \"measurement_error\",   params = list(     variables = \"t1_a\",     error_type = \"misclassification\",     sensitivity = 0.80,  # 80% of true positives correctly classified     specificity = 0.80   # 80% of true negatives correctly classified   ),   name = \"plain_misclassification\" )  # Apply to create observed data plain_data <- apply_shadow(true_data, plain_misclass)  # Check misclassification rates misclass_table_plain <- table(   True = true_data$t1_a,   Observed = plain_data$t1_a )  cat(\"\\n=== Plain Misclassification Matrix ===\\n\") #>  #> === Plain Misclassification Matrix === print(misclass_table_plain) #>     Observed #> True    0    1 #>    0 1075  299 #>    1  336 1290  # Calculate observed rates cat(\"\\nSensitivity (observed):\",      round(misclass_table_plain[2,2] / sum(misclass_table_plain[2,]), 3), \"\\n\") #>  #> Sensitivity (observed): 0.793 cat(\"Specificity (observed):\",      round(misclass_table_plain[1,1] / sum(misclass_table_plain[1,]), 3), \"\\n\") #> Specificity (observed): 0.782  # Estimate ATE with misclassified exposure plain_ate <- mean(plain_data$t2_y[plain_data$t1_a == 1]) -               mean(plain_data$t2_y[plain_data$t1_a == 0])  cat(\"\\nEstimated ATE (plain misclassification):\", round(plain_ate, 3), \"\\n\") #>  #> Estimated ATE (plain misclassification): 0.481 cat(\"Bias:\", round(plain_ate - true_ate, 3), \"\\n\") #> Bias: -0.263 cat(\"Relative bias:\", round(100 * (plain_ate - true_ate) / true_ate, 1), \"%\\n\") #> Relative bias: -35.4 %"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-3-apply-differential-misclassification","dir":"Articles","previous_headings":"","what":"Step 3: Apply Differential Misclassification","title":"Misclassification Bias: Plain vs Differential","text":"Now let’s create differential misclassification error rates depend baseline characteristics:","code":"# Function to create differential misclassification apply_differential_misclassification <- function(data, base_sens = 0.80, base_spec = 0.80) {      observed_data <- data      # Calculate individual-specific error probabilities   # Less healthy conscious people more likely to over-report adherence   # Sicker people more likely to misreport (memory/cognitive issues)      # For true positives (sensitivity varies by characteristics)   true_positive_idx <- which(data$t1_a == 1)   sensitivity_individual <- base_sens +     0.15 * (data$b1[true_positive_idx] > 0) -  # Higher if health conscious     0.10 * (data$b3[true_positive_idx] > 0)    # Lower if sicker      sensitivity_individual <- pmax(0.5, pmin(0.95, sensitivity_individual))      # Apply misclassification to true positives   correctly_classified <- rbinom(length(true_positive_idx), 1, sensitivity_individual)   observed_data$t1_a[true_positive_idx] <- correctly_classified      # For true negatives (specificity varies by characteristics)     true_negative_idx <- which(data$t1_a == 0)   specificity_individual <- base_spec +     0.10 * (data$b1[true_negative_idx] > 0) -  # Higher if health conscious     0.20 * (data$b1[true_negative_idx] < -0.5) # Much lower if not health conscious (over-report)      specificity_individual <- pmax(0.5, pmin(0.95, specificity_individual))      # Apply misclassification to true negatives   correctly_classified <- rbinom(length(true_negative_idx), 1, specificity_individual)   observed_data$t1_a[true_negative_idx] <- 1 - correctly_classified      # Track what changed   observed_data$t1_a_true <- data$t1_a   observed_data$misclassified <- (observed_data$t1_a != observed_data$t1_a_true)      return(observed_data) }  # Apply differential misclassification diff_data <- apply_differential_misclassification(true_data)  # Check misclassification patterns by group diff_patterns <- diff_data %>%   group_by(health_conscious) %>%   summarise(     n = n(),     misclass_rate = mean(misclassified),     # Among true positives     sensitivity = sum(t1_a == 1 & t1_a_true == 1) / sum(t1_a_true == 1),     # Among true negatives       specificity = sum(t1_a == 0 & t1_a_true == 0) / sum(t1_a_true == 0),     .groups = \"drop\"   )  cat(\"\\n=== Differential Misclassification by Health Consciousness ===\\n\") #>  #> === Differential Misclassification by Health Consciousness === print(diff_patterns) #> # A tibble: 3 × 5 #>   health_conscious     n misclass_rate sensitivity specificity #>   <fct>            <int>         <dbl>       <dbl>       <dbl> #> 1 Low                913         0.314       0.785       0.599 #> 2 Medium            1166         0.171       0.812       0.851 #> 3 High               921         0.116       0.871       0.903  # Overall misclassification matrix misclass_table_diff <- table(   True = diff_data$t1_a_true,   Observed = diff_data$t1_a )  cat(\"\\n=== Differential Misclassification Matrix ===\\n\") #>  #> === Differential Misclassification Matrix === print(misclass_table_diff) #>     Observed #> True    0    1 #>    0 1066  308 #>    1  285 1341  # Estimate ATE with differential misclassification diff_ate <- mean(diff_data$t2_y[diff_data$t1_a == 1]) -              mean(diff_data$t2_y[diff_data$t1_a == 0])  cat(\"\\nEstimated ATE (differential misclassification):\", round(diff_ate, 3), \"\\n\") #>  #> Estimated ATE (differential misclassification): 0.42 cat(\"Bias:\", round(diff_ate - true_ate, 3), \"\\n\") #> Bias: -0.324 cat(\"Relative bias:\", round(100 * (diff_ate - true_ate) / true_ate, 1), \"%\\n\") #> Relative bias: -43.6 %"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-4-visualize-the-impact","dir":"Articles","previous_headings":"","what":"Step 4: Visualize the Impact","title":"Misclassification Bias: Plain vs Differential","text":"","code":"# Compare distributions of treated/control by true and observed status plot_data <- bind_rows(   true_data %>%      mutate(classification = \"True\", exposure = t1_a) %>%     select(classification, exposure, t2_y, health_conscious),   plain_data %>%      mutate(classification = \"Plain Misclass\", exposure = t1_a) %>%     select(classification, exposure, t2_y, health_conscious),   diff_data %>%      mutate(classification = \"Differential Misclass\", exposure = t1_a) %>%     select(classification, exposure, t2_y, health_conscious) ) %>%   mutate(     classification = factor(classification,                            levels = c(\"True\", \"Plain Misclass\", \"Differential Misclass\")),     exposure_label = ifelse(exposure == 1, \"Adherent\", \"Non-adherent\")   )  # Distribution plots p1 <- ggplot(plot_data, aes(x = t2_y, fill = exposure_label)) +   geom_density(alpha = 0.6) +   facet_wrap(~ classification, ncol = 1) +   scale_fill_manual(values = c(\"Non-adherent\" = \"#E69F00\", \"Adherent\" = \"#56B4E9\")) +   labs(     title = \"Outcome Distributions by Exposure Status\",     subtitle = \"How misclassification changes apparent treatment groups\",     x = \"Health Outcome (Wave 2)\",     y = \"Density\",     fill = \"Exposure Status\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p1) # Show how misclassification varies by characteristics misclass_by_chars <- diff_data %>%   group_by(health_conscious, disease_severity) %>%   summarise(     n = n(),     true_exposed = mean(t1_a_true),     obs_exposed = mean(t1_a),     misclass_rate = mean(misclassified),     .groups = \"drop\"   ) %>%   mutate(     exposure_diff = obs_exposed - true_exposed   )  p2 <- ggplot(misclass_by_chars,               aes(x = health_conscious, y = disease_severity, fill = misclass_rate)) +   geom_tile() +   geom_text(aes(label = sprintf(\"%.1f%%\", misclass_rate * 100)),              color = \"white\", size = 4) +   scale_fill_gradient2(low = \"#009E73\", mid = \"#F0E442\", high = \"#D55E00\",                       midpoint = 0.2,                       labels = scales::percent) +   labs(     title = \"Differential Misclassification Rates\",     subtitle = \"Misclassification varies by patient characteristics\",     x = \"Health Consciousness\",     y = \"Disease Severity\",     fill = \"Misclassification\\nRate\"   ) +   theme_minimal()  print(p2)"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-5-model-misspecification-vs-misclassification","dir":"Articles","previous_headings":"","what":"Step 5: Model Misspecification vs Misclassification","title":"Misclassification Bias: Plain vs Differential","text":"Now let’s demonstrate model misspecification interacts misclassification:","code":"# Function to estimate ATE with different model specifications estimate_ate_models <- function(data, exposure_var = \"t1_a\", outcome_var = \"t2_y\") {      results <- list()      # 1. Correct model (adjusts for all confounders)   correct_model <- lm(as.formula(paste(outcome_var, \"~\", exposure_var, \"+ b1 + b2 + b3\")),                       data = data)   results$correct <- coef(correct_model)[exposure_var]      # 2. Omitting important confounder (b3 - disease severity)   omit_model <- lm(as.formula(paste(outcome_var, \"~\", exposure_var, \"+ b1 + b2\")),                     data = data)   results$omit_confounder <- coef(omit_model)[exposure_var]      # 3. Wrong functional form (assumes linear when may be non-linear)   wrong_form_model <- lm(as.formula(paste(outcome_var, \"~\", exposure_var, \"+ I(b1^2) + I(b2^2) + I(b3^2)\")),                          data = data)   results$wrong_form <- coef(wrong_form_model)[exposure_var]      # 4. Unadjusted (crude)   crude_model <- lm(as.formula(paste(outcome_var, \"~\", exposure_var)),                     data = data)   results$crude <- coef(crude_model)[exposure_var]      return(results) }  # Apply to all three datasets model_results <- list(   true = estimate_ate_models(true_data),   plain = estimate_ate_models(plain_data),   differential = estimate_ate_models(diff_data) )  # Create comparison table model_comparison <- expand.grid(   Data = c(\"True\", \"Plain Misclass\", \"Differential Misclass\"),   Model = c(\"Correct\", \"Omit Confounder\", \"Wrong Form\", \"Crude\"),   stringsAsFactors = FALSE ) %>%   mutate(     ATE_Estimate = NA,     Bias = NA   )  # Fill in results for (i in 1:nrow(model_comparison)) {   data_type <- tolower(gsub(\" Misclass\", \"\", model_comparison$Data[i]))   model_type <- tolower(gsub(\" \", \"_\", model_comparison$Model[i]))      if (data_type == \"true\") {     ate_est <- model_results$true[[model_type]]   } else if (data_type == \"plain\") {     ate_est <- model_results$plain[[model_type]]   } else {     ate_est <- model_results$differential[[model_type]]   }      model_comparison$ATE_Estimate[i] <- ate_est   model_comparison$Bias[i] <- ate_est - true_ate }  cat(\"\\n=== Model Misspecification × Misclassification Results ===\\n\") #>  #> === Model Misspecification × Misclassification Results === print(model_comparison %>%       mutate(across(c(ATE_Estimate, Bias), ~round(., 3))) %>%       kable()) #>  #>  #> |Data                  |Model           | ATE_Estimate|   Bias| #> |:---------------------|:---------------|------------:|------:| #> |True                  |Correct         |        0.685| -0.060| #> |Plain Misclass        |Correct         |        0.446| -0.298| #> |Differential Misclass |Correct         |        0.426| -0.318| #> |True                  |Omit Confounder |        0.684| -0.060| #> |Plain Misclass        |Omit Confounder |        0.443| -0.301| #> |Differential Misclass |Omit Confounder |        0.423| -0.321| #> |True                  |Wrong Form      |        0.745|  0.001| #> |Plain Misclass        |Wrong Form      |        0.482| -0.263| #> |Differential Misclass |Wrong Form      |        0.421| -0.324| #> |True                  |Crude           |        0.744|  0.000| #> |Plain Misclass        |Crude           |        0.481| -0.263| #> |Differential Misclass |Crude           |        0.420| -0.324|  # Visualize the compound effects p3 <- ggplot(model_comparison, aes(x = Model, y = Bias, fill = Data)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   geom_hline(yintercept = 0, linetype = \"dashed\") +   scale_fill_manual(values = c(\"True\" = \"#009E73\",                                 \"Plain Misclass\" = \"#F0E442\",                                \"Differential Misclass\" = \"#D55E00\")) +   labs(     title = \"Compound Effects: Misclassification × Model Misspecification\",     subtitle = \"Both data quality and analysis choices affect bias\",     x = \"Model Specification\",     y = \"Bias in ATE Estimate\"   ) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1),         legend.position = \"bottom\")  print(p3)"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"step-6-sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Step 6: Sensitivity Analysis","title":"Misclassification Bias: Plain vs Differential","text":"Let’s examine bias changes different levels misclassification:","code":"# Function to calculate bias for different misclassification levels sensitivity_analysis <- function(sens_range = seq(0.6, 1, 0.05),                                spec_range = seq(0.6, 1, 0.05)) {      results <- expand.grid(     sensitivity = sens_range,     specificity = spec_range   ) %>%     mutate(       plain_bias = NA,       diff_bias = NA     )      for (i in 1:nrow(results)) {     # Plain misclassification     plain_shadow <- create_shadow(       type = \"measurement_error\",       params = list(         variables = \"t1_a\",         error_type = \"misclassification\",         sensitivity = results$sensitivity[i],         specificity = results$specificity[i]       )     )          plain_temp <- apply_shadow(true_data, plain_shadow)     plain_ate_temp <- mean(plain_temp$t2_y[plain_temp$t1_a == 1]) -                       mean(plain_temp$t2_y[plain_temp$t1_a == 0])     results$plain_bias[i] <- plain_ate_temp - true_ate          # Differential misclassification     diff_temp <- apply_differential_misclassification(       true_data,        base_sens = results$sensitivity[i],       base_spec = results$specificity[i]     )     diff_ate_temp <- mean(diff_temp$t2_y[diff_temp$t1_a == 1]) -                      mean(diff_temp$t2_y[diff_temp$t1_a == 0])     results$diff_bias[i] <- diff_ate_temp - true_ate   }      return(results) }  # Run sensitivity analysis sens_results <- sensitivity_analysis(   sens_range = seq(0.7, 1, 0.1),   spec_range = seq(0.7, 1, 0.1) )  # Plot heatmaps p4_data <- sens_results %>%   pivot_longer(cols = c(plain_bias, diff_bias),                names_to = \"type\",                values_to = \"bias\") %>%   mutate(type = ifelse(type == \"plain_bias\", \"Plain\", \"Differential\"))  p4 <- ggplot(p4_data, aes(x = sensitivity, y = specificity, fill = abs(bias))) +   geom_tile() +   geom_text(aes(label = sprintf(\"%.2f\", bias)), size = 3) +   facet_wrap(~ type) +   scale_fill_gradient2(low = \"white\", mid = \"#F0E442\", high = \"#D55E00\",                       midpoint = 0.2) +   scale_x_continuous(labels = scales::percent) +   scale_y_continuous(labels = scales::percent) +   labs(     title = \"Sensitivity Analysis: Bias by Misclassification Parameters\",     subtitle = \"Differential misclassification generally creates more bias\",     x = \"Sensitivity\",     y = \"Specificity\",     fill = \"Absolute\\nBias\"   ) +   theme_minimal()  print(p4)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"key-findings","dir":"Articles","previous_headings":"Practical Implications","what":"Key Findings","title":"Misclassification Bias: Plain vs Differential","text":"Plain misclassification attenuates effects toward null (bias = -0.263) Differential misclassification can create larger less predictable bias (bias = -0.324) Model misspecification compounds misclassification - using wrong model misclassified data creates largest bias misclassification relates confounders strength confounding true effect size","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"recommendations","dir":"Articles","previous_headings":"Practical Implications","what":"Recommendations","title":"Misclassification Bias: Plain vs Differential","text":"Validation studies: possible, validate self-reported measures objective data Sensitivity analyses: Always examine results change different misclassification assumptions Consider mechanism: Think misclassification occurs - likely differential? Multiple measures: Use multiple measures exposure available Appropriate models: Even perfect measurement, model misspecification creates bias","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"example-correcting-for-known-misclassification","dir":"Articles","previous_headings":"Practical Implications","what":"Example: Correcting for Known Misclassification","title":"Misclassification Bias: Plain vs Differential","text":"sensitivity specificity known validation studies:","code":"# Matrix method for bias correction (if sens/spec known) correct_for_misclassification <- function(observed_effect, sensitivity, specificity,                                         p_exposed_obs) {   # This is a simplified correction assuming non-differential misclassification   # Based on: Greenland S. Basic methods for sensitivity analysis of biases.    # Int J Epidemiol. 1996;25(6):1107-16.      # Predictive values   ppv <- (sensitivity * p_exposed_obs) /           (sensitivity * p_exposed_obs + (1 - specificity) * (1 - p_exposed_obs))   npv <- (specificity * (1 - p_exposed_obs)) /          ((1 - sensitivity) * p_exposed_obs + specificity * (1 - p_exposed_obs))      # Correction factor   correction_factor <- ppv + npv - 1      # Corrected effect   corrected_effect <- observed_effect / correction_factor      return(list(     observed = observed_effect,     corrected = corrected_effect,     correction_factor = correction_factor,     ppv = ppv,     npv = npv   )) }  # Apply correction to plain misclassification p_exposed_obs <- mean(plain_data$t1_a) correction_result <- correct_for_misclassification(   observed_effect = plain_ate,   sensitivity = 0.80,   specificity = 0.80,   p_exposed_obs = p_exposed_obs )  cat(\"\\n=== Bias Correction for Known Misclassification ===\\n\") #>  #> === Bias Correction for Known Misclassification === cat(\"Observed ATE:\", round(correction_result$observed, 3), \"\\n\") #> Observed ATE: 0.481 cat(\"Corrected ATE:\", round(correction_result$corrected, 3), \"\\n\") #> Corrected ATE: 0.803 cat(\"True ATE:\", round(true_ate, 3), \"\\n\") #> True ATE: 0.744 cat(\"Remaining bias after correction:\",      round(correction_result$corrected - true_ate, 3), \"\\n\") #> Remaining bias after correction: 0.059"},{"path":"https://go-bayes.github.io/margot.sim/articles/misclassification-bias.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Misclassification Bias: Plain vs Differential","text":"vignette demonstrated: Misclassification reduces statistical power biases effect estimates Differential misclassification (errors depend variables) typically creates bias plain misclassification Model misspecification misclassification compound effects - addressing one source bias insufficient Sensitivity analyses essential understanding robustness findings Bias correction possible validation data provides estimates sensitivity specificity distinction data problems (misclassification) analysis problems (model misspecification) crucial understanding addressing different sources bias observational research.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/monte-carlo-simple.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Monte Carlo Evaluation - Simple Example","text":"vignette provides simple example using Monte Carlo framework margot.sim evaluate estimator performance.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/monte-carlo-simple.html","id":"basic-monte-carlo-simulation","dir":"Articles","previous_headings":"","what":"Basic Monte Carlo Simulation","title":"Monte Carlo Evaluation - Simple Example","text":"","code":"# Define a simple regression estimator simple_regression <- function(data) {   # Check if we have the required variables   if (!all(c(\"t3_y\", \"t2_a\", \"b1\", \"b2\", \"b3\") %in% names(data))) {     return(list(estimate = NA, se = NA, converged = FALSE))   }      # Fit model   fit <- lm(t3_y ~ t2_a + b1 + b2 + b3, data = data)      # Extract coefficient   if (\"t2_a\" %in% rownames(coef(summary(fit)))) {     coef_summary <- summary(fit)$coefficients[\"t2_a\", ]     return(list(       estimate = coef_summary[\"Estimate\"],       se = coef_summary[\"Std. Error\"],       converged = TRUE     ))   } else {     return(list(estimate = NA, se = NA, converged = FALSE))   } }  # Run Monte Carlo simulation mc_results <- margot_monte_carlo(   n_reps = 100,   n_per_rep = 500,   dgp_params = list(     waves = 2,     treatments = \"a\",     interventions = list(natural = function(data, time, trt) data[[trt]]),     params = list(a_y_coef = 0.5)   ),   estimator_fn = simple_regression,   seed = 123 ) #>   |                                                                              |                                                                      |   0%  |                                                                              |=                                                                     |   1%  |                                                                              |=                                                                     |   2%  |                                                                              |==                                                                    |   3%  |                                                                              |===                                                                   |   4%  |                                                                              |====                                                                  |   5%  |                                                                              |====                                                                  |   6%  |                                                                              |=====                                                                 |   7%  |                                                                              |======                                                                |   8%  |                                                                              |======                                                                |   9%  |                                                                              |=======                                                               |  10%  |                                                                              |========                                                              |  11%  |                                                                              |========                                                              |  12%  |                                                                              |=========                                                             |  13%  |                                                                              |==========                                                            |  14%  |                                                                              |==========                                                            |  15%  |                                                                              |===========                                                           |  16%  |                                                                              |============                                                          |  17%  |                                                                              |=============                                                         |  18%  |                                                                              |=============                                                         |  19%  |                                                                              |==============                                                        |  20%  |                                                                              |===============                                                       |  21%  |                                                                              |===============                                                       |  22%  |                                                                              |================                                                      |  23%  |                                                                              |=================                                                     |  24%  |                                                                              |==================                                                    |  25%  |                                                                              |==================                                                    |  26%  |                                                                              |===================                                                   |  27%  |                                                                              |====================                                                  |  28%  |                                                                              |====================                                                  |  29%  |                                                                              |=====================                                                 |  30%  |                                                                              |======================                                                |  31%  |                                                                              |======================                                                |  32%  |                                                                              |=======================                                               |  33%  |                                                                              |========================                                              |  34%  |                                                                              |========================                                              |  35%  |                                                                              |=========================                                             |  36%  |                                                                              |==========================                                            |  37%  |                                                                              |===========================                                           |  38%  |                                                                              |===========================                                           |  39%  |                                                                              |============================                                          |  40%  |                                                                              |=============================                                         |  41%  |                                                                              |=============================                                         |  42%  |                                                                              |==============================                                        |  43%  |                                                                              |===============================                                       |  44%  |                                                                              |================================                                      |  45%  |                                                                              |================================                                      |  46%  |                                                                              |=================================                                     |  47%  |                                                                              |==================================                                    |  48%  |                                                                              |==================================                                    |  49%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================                                  |  51%  |                                                                              |====================================                                  |  52%  |                                                                              |=====================================                                 |  53%  |                                                                              |======================================                                |  54%  |                                                                              |======================================                                |  55%  |                                                                              |=======================================                               |  56%  |                                                                              |========================================                              |  57%  |                                                                              |=========================================                             |  58%  |                                                                              |=========================================                             |  59%  |                                                                              |==========================================                            |  60%  |                                                                              |===========================================                           |  61%  |                                                                              |===========================================                           |  62%  |                                                                              |============================================                          |  63%  |                                                                              |=============================================                         |  64%  |                                                                              |==============================================                        |  65%  |                                                                              |==============================================                        |  66%  |                                                                              |===============================================                       |  67%  |                                                                              |================================================                      |  68%  |                                                                              |================================================                      |  69%  |                                                                              |=================================================                     |  70%  |                                                                              |==================================================                    |  71%  |                                                                              |==================================================                    |  72%  |                                                                              |===================================================                   |  73%  |                                                                              |====================================================                  |  74%  |                                                                              |====================================================                  |  75%  |                                                                              |=====================================================                 |  76%  |                                                                              |======================================================                |  77%  |                                                                              |=======================================================               |  78%  |                                                                              |=======================================================               |  79%  |                                                                              |========================================================              |  80%  |                                                                              |=========================================================             |  81%  |                                                                              |=========================================================             |  82%  |                                                                              |==========================================================            |  83%  |                                                                              |===========================================================           |  84%  |                                                                              |============================================================          |  85%  |                                                                              |============================================================          |  86%  |                                                                              |=============================================================         |  87%  |                                                                              |==============================================================        |  88%  |                                                                              |==============================================================        |  89%  |                                                                              |===============================================================       |  90%  |                                                                              |================================================================      |  91%  |                                                                              |================================================================      |  92%  |                                                                              |=================================================================     |  93%  |                                                                              |==================================================================    |  94%  |                                                                              |==================================================================    |  95%  |                                                                              |===================================================================   |  96%  |                                                                              |====================================================================  |  97%  |                                                                              |===================================================================== |  98%  |                                                                              |===================================================================== |  99%  |                                                                              |======================================================================| 100% #>  #> Completed 100 replications in 0.3 seconds #> $convergence_rate #> [1] 1 #>  #> $n_valid #> [1] 100 #>  #> $mean_estimate #> [1] 0.3783291 #>  #> $sd_estimate #> [1] 0.1212455 #>  #> $avg_retention #> [1] 0.70518 #>  #> $avg_computation_time #> [1] 0.003098178  # View results print(mc_results) #> Monte Carlo Simulation Results #> ============================== #>  #> Simulation Setup: #>   Replications: 100 #>   Sample size per rep: 500 #>   Total computation time: 0.3 seconds #>  #> Performance Metrics: #>   Convergence rate: 100.0% #>   Average sample retention: 70.5%"},{"path":"https://go-bayes.github.io/margot.sim/articles/monte-carlo-simple.html","id":"understanding-the-results","dir":"Articles","previous_headings":"","what":"Understanding the Results","title":"Monte Carlo Evaluation - Simple Example","text":"Monte Carlo results include: - Summary statistics: Mean estimate, bias, variance, RMSE across replications - Performance metrics: Coverage confidence intervals, convergence rate - Individual results: Estimates replication (needed diagnostics)","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/monte-carlo-simple.html","id":"adding-shadows","dir":"Articles","previous_headings":"","what":"Adding Shadows","title":"Monte Carlo Evaluation - Simple Example","text":"can evaluate observational distortions affect estimator:","code":"# Create measurement error shadow me_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     error_type = \"classical\",     variables = \"t2_a\",     sigma = 0.3   ) )  # Run with shadow mc_with_error <- margot_monte_carlo(   n_reps = 100,   n_per_rep = 500,   dgp_params = list(     waves = 2,     treatments = \"a\",     interventions = list(natural = function(data, time, trt) data[[trt]]),     params = list(a_y_coef = 0.5)   ),   shadows = list(me_shadow),   estimator_fn = simple_regression,   seed = 456 ) #>   |                                                                              |                                                                      |   0%  |                                                                              |=                                                                     |   1%  |                                                                              |=                                                                     |   2%  |                                                                              |==                                                                    |   3%  |                                                                              |===                                                                   |   4%  |                                                                              |====                                                                  |   5%  |                                                                              |====                                                                  |   6%  |                                                                              |=====                                                                 |   7%  |                                                                              |======                                                                |   8%  |                                                                              |======                                                                |   9%  |                                                                              |=======                                                               |  10%  |                                                                              |========                                                              |  11%  |                                                                              |========                                                              |  12%  |                                                                              |=========                                                             |  13%  |                                                                              |==========                                                            |  14%  |                                                                              |==========                                                            |  15%  |                                                                              |===========                                                           |  16%  |                                                                              |============                                                          |  17%  |                                                                              |=============                                                         |  18%  |                                                                              |=============                                                         |  19%  |                                                                              |==============                                                        |  20%  |                                                                              |===============                                                       |  21%  |                                                                              |===============                                                       |  22%  |                                                                              |================                                                      |  23%  |                                                                              |=================                                                     |  24%  |                                                                              |==================                                                    |  25%  |                                                                              |==================                                                    |  26%  |                                                                              |===================                                                   |  27%  |                                                                              |====================                                                  |  28%  |                                                                              |====================                                                  |  29%  |                                                                              |=====================                                                 |  30%  |                                                                              |======================                                                |  31%  |                                                                              |======================                                                |  32%  |                                                                              |=======================                                               |  33%  |                                                                              |========================                                              |  34%  |                                                                              |========================                                              |  35%  |                                                                              |=========================                                             |  36%  |                                                                              |==========================                                            |  37%  |                                                                              |===========================                                           |  38%  |                                                                              |===========================                                           |  39%  |                                                                              |============================                                          |  40%  |                                                                              |=============================                                         |  41%  |                                                                              |=============================                                         |  42%  |                                                                              |==============================                                        |  43%  |                                                                              |===============================                                       |  44%  |                                                                              |================================                                      |  45%  |                                                                              |================================                                      |  46%  |                                                                              |=================================                                     |  47%  |                                                                              |==================================                                    |  48%  |                                                                              |==================================                                    |  49%  |                                                                              |===================================                                   |  50%  |                                                                              |====================================                                  |  51%  |                                                                              |====================================                                  |  52%  |                                                                              |=====================================                                 |  53%  |                                                                              |======================================                                |  54%  |                                                                              |======================================                                |  55%  |                                                                              |=======================================                               |  56%  |                                                                              |========================================                              |  57%  |                                                                              |=========================================                             |  58%  |                                                                              |=========================================                             |  59%  |                                                                              |==========================================                            |  60%  |                                                                              |===========================================                           |  61%  |                                                                              |===========================================                           |  62%  |                                                                              |============================================                          |  63%  |                                                                              |=============================================                         |  64%  |                                                                              |==============================================                        |  65%  |                                                                              |==============================================                        |  66%  |                                                                              |===============================================                       |  67%  |                                                                              |================================================                      |  68%  |                                                                              |================================================                      |  69%  |                                                                              |=================================================                     |  70%  |                                                                              |==================================================                    |  71%  |                                                                              |==================================================                    |  72%  |                                                                              |===================================================                   |  73%  |                                                                              |====================================================                  |  74%  |                                                                              |====================================================                  |  75%  |                                                                              |=====================================================                 |  76%  |                                                                              |======================================================                |  77%  |                                                                              |=======================================================               |  78%  |                                                                              |=======================================================               |  79%  |                                                                              |========================================================              |  80%  |                                                                              |=========================================================             |  81%  |                                                                              |=========================================================             |  82%  |                                                                              |==========================================================            |  83%  |                                                                              |===========================================================           |  84%  |                                                                              |============================================================          |  85%  |                                                                              |============================================================          |  86%  |                                                                              |=============================================================         |  87%  |                                                                              |==============================================================        |  88%  |                                                                              |==============================================================        |  89%  |                                                                              |===============================================================       |  90%  |                                                                              |================================================================      |  91%  |                                                                              |================================================================      |  92%  |                                                                              |=================================================================     |  93%  |                                                                              |==================================================================    |  94%  |                                                                              |==================================================================    |  95%  |                                                                              |===================================================================   |  96%  |                                                                              |====================================================================  |  97%  |                                                                              |===================================================================== |  98%  |                                                                              |===================================================================== |  99%  |                                                                              |======================================================================| 100% #>  #> Completed 100 replications in 0.3 seconds #> $convergence_rate #> [1] 1 #>  #> $n_valid #> [1] 100 #>  #> $mean_estimate #> [1] 0.2562884 #>  #> $sd_estimate #> [1] 0.1069397 #>  #> $avg_retention #> [1] 0.70722 #>  #> $avg_computation_time #> [1] 0.003118494  # Compare results cat(\"Without measurement error:\\n\") #> Without measurement error: if (!is.null(mc_results$performance$bias)) {   cat(\"  Bias:\", round(mc_results$performance$bias, 3), \"\\n\")   cat(\"  RMSE:\", round(mc_results$performance$rmse, 3), \"\\n\\n\") } else {   cat(\"  Mean estimate:\", round(mc_results$performance$mean_estimate, 3), \"\\n\\n\") } #>   Mean estimate: 0.378  cat(\"With measurement error:\\n\") #> With measurement error: if (!is.null(mc_with_error$performance$bias)) {   cat(\"  Bias:\", round(mc_with_error$performance$bias, 3), \"\\n\")   cat(\"  RMSE:\", round(mc_with_error$performance$rmse, 3), \"\\n\") } else {   cat(\"  Mean estimate:\", round(mc_with_error$performance$mean_estimate, 3), \"\\n\") } #>   Mean estimate: 0.256"},{"path":"https://go-bayes.github.io/margot.sim/articles/monte-carlo-simple.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Monte Carlo Evaluation - Simple Example","text":"Monte Carlo framework helps : 1. Evaluate estimator performance known truth 2. Compare methods different conditions 3. Understand impact observational challenges 4. Make informed choices statistical methods advanced examples, see full Monte Carlo vignette.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Practical Workflow: Complete Analysis Pipeline","text":"vignette provides complete, practical workflow using margot.sim realistic research scenario. ’ll walk : Study design parameter specification Data generation realistic features Shadow application observational challenges Analysis pipeline multiple estimators Sensitivity analyses diagnostics Reporting interpretation","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"scenario-evaluating-a-workplace-mental-health-program","dir":"Articles","previous_headings":"","what":"Scenario: Evaluating a Workplace Mental Health Program","title":"Practical Workflow: Complete Analysis Pipeline","text":"’re evaluating workplace wellness program designed improve mental health : - Mindfulness training stress reduction techniques - Flexible work arrangements need - Gradual implementation 12 months (4 quarters) Key challenges: - employees likely participate (selection) - Mental health measures subject reporting bias (measurement error) - Higher-stress employees likely leave (censoring) - Effects vary baseline stress job type","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-1-study-design-and-planning","dir":"Articles","previous_headings":"","what":"Step 1: Study Design and Planning","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Study parameters n_employees <- 3000 n_waves <- 4  # Quarterly measurements baseline_date <- \"2024-01-01\"  # Create study design document study_design <- list(   title = \"Workplace Mental Health Intervention Evaluation\",   population = \"All employees at participating companies\",   sample_size = n_employees,   waves = n_waves,   measurement_schedule = \"Quarterly (0, 3, 6, 9, 12 months)\",   primary_outcome = \"Mental health score (0-10 scale)\",   treatment = \"Comprehensive wellness program\",   key_confounders = c(     \"Baseline stress level (b1)\",     \"Job type - client-facing vs internal (b2)\",      \"Years at company (b3)\"   ) )  cat(\"=== Study Design Summary ===\\n\") #> === Study Design Summary === for (element in names(study_design)) {   cat(element, \":\", study_design[[element]], \"\\n\") } #> title : Workplace Mental Health Intervention Evaluation  #> population : All employees at participating companies  #> sample_size : 3000  #> waves : 4  #> measurement_schedule : Quarterly (0, 3, 6, 9, 12 months)  #> primary_outcome : Mental health score (0-10 scale)  #> treatment : Comprehensive wellness program  #> key_confounders : Baseline stress level (b1) Job type - client-facing vs internal (b2) Years at company (b3)  # Power calculation (simplified) expected_effect <- 0.3  # Expected improvement expected_sd <- 1.2      # Expected standard deviation power_n <- (4 * expected_sd^2 * (qnorm(0.975) + qnorm(0.80))^2) / expected_effect^2 cat(\"\\nRequired sample size for 80% power:\", round(power_n), \"\\n\") #>  #> Required sample size for 80% power: 502 cat(\"Planned sample size:\", n_employees, \"✓\\n\") #> Planned sample size: 3000 ✓"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-2-generate-realistic-base-data","dir":"Articles","previous_headings":"","what":"Step 2: Generate Realistic Base Data","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"set.seed(2025)  # Create realistic baseline characteristics generate_workforce_data <- function(n) {   data.frame(     id = 1:n,     # Company (for clustering)     company = sample(LETTERS[1:5], n, replace = TRUE,                     prob = c(0.3, 0.25, 0.2, 0.15, 0.1)),     # Job characteristics     job_type = sample(c(\"Client-facing\", \"Internal\"), n, TRUE, c(0.4, 0.6)),     years_employed = rexp(n, rate = 0.2),  # Average 5 years     department = sample(c(\"Sales\", \"Tech\", \"Admin\", \"Management\"), n, TRUE)   ) %>%   mutate(     # Convert to simulation variables     b1 = rnorm(n),  # Baseline stress (standardized)     b2 = ifelse(job_type == \"Client-facing\", 1, -1) + rnorm(n, 0, 0.3),     b3 = scale(years_employed)[,1],  # Standardized years     # Add clustering by company     company_effect = rep(rnorm(5, 0, 0.3)[match(company, LETTERS[1:5])], length.out = n),     b1 = b1 + company_effect  # Companies have different stress cultures   ) }  workforce_data <- generate_workforce_data(n_employees)  # Examine baseline characteristics baseline_summary <- workforce_data %>%   group_by(company) %>%   summarise(     n = n(),     pct_client_facing = mean(job_type == \"Client-facing\") * 100,     mean_years = mean(years_employed),     mean_stress = mean(b1),     .groups = \"drop\"   )  cat(\"\\n=== Baseline Characteristics by Company ===\\n\") #>  #> === Baseline Characteristics by Company === print(baseline_summary) #> # A tibble: 5 × 5 #>   company     n pct_client_facing mean_years mean_stress #>   <chr>   <int>             <dbl>      <dbl>       <dbl> #> 1 A         882              39.8       5.24     -0.315  #> 2 B         796              42.0       4.83      0.304  #> 3 C         571              37.7       5.11      0.179  #> 4 D         436              41.5       4.97     -0.0785 #> 5 E         315              36.5       4.95     -0.431  # Visualize baseline distributions p_baseline <- workforce_data %>%   select(b1, b2, b3) %>%   pivot_longer(everything(), names_to = \"variable\", values_to = \"value\") %>%   mutate(variable = case_when(     variable == \"b1\" ~ \"Baseline Stress\",     variable == \"b2\" ~ \"Job Type Score\",      variable == \"b3\" ~ \"Tenure (standardized)\"   )) %>%   ggplot(aes(x = value, fill = variable)) +   geom_histogram(bins = 30, alpha = 0.7) +   facet_wrap(~ variable, scales = \"free\") +   theme_minimal() +   theme(legend.position = \"none\") +   labs(title = \"Distribution of Baseline Characteristics\")  print(p_baseline)"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-3-define-intervention-and-simulate-outcomes","dir":"Articles","previous_headings":"","what":"Step 3: Define Intervention and Simulate Outcomes","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Define the wellness program intervention # Gradual rollout with personalized intensity  wellness_intervention <- function(data, time, trt) {   if (time == 0) {     # No intervention at baseline     return(rep(0, nrow(data)))   }      # Base participation probability increases over time   base_prob <- c(0.3, 0.5, 0.6, 0.7)[time]  # Gradual adoption      # Personalized based on need (higher stress = more likely to be offered intensive support)   if (\"b1\" %in% names(data)) {     # High stress employees get priority/encouragement     stress_modifier <- plogis(data$b1)  # Convert to probability     participation_prob <- base_prob * (0.5 + stress_modifier)     participation_prob <- pmin(participation_prob, 0.9)  # Cap at 90%   } else {     participation_prob <- base_prob   }      # Generate participation   participated <- rbinom(nrow(data), 1, participation_prob)      # Intensity varies (1-3 scale based on need)   intensity <- ifelse(participated == 0, 0,                      1 + rbinom(nrow(data), 2, plogis(data$b1/2)))      return(intensity) }  # Parameters for mental health outcomes mh_params <- list(   # Treatment effects   a_lag_y_coef = 0.2,        # Base treatment effect   a_b1_y_het = 0.15,         # Larger effect for high stress   a_b2_y_het = -0.05,        # Slightly less effective for client-facing      # Natural dynamics   y_lag_y_coef = 0.6,        # Mental health persistence   b1_y_coef = -0.4,          # Stress harms mental health   b2_y_coef = -0.1,          # Client-facing roles slightly worse   b3_y_coef = 0.05,          # Tenure provides some resilience      # Other   exposure_type = \"continuous\",   y_feedback = \"full\" )  # Simulate the intervention intervention_data <- margot_simulate(   n = n_employees,   waves = n_waves,   params = mh_params,   intervention = wellness_intervention,   n_baselines = 3,  # Generate b1, b2, b3   seed = 2025 )  # Replace with our structured baseline variables intervention_data$b1 <- workforce_data$b1 intervention_data$b2 <- workforce_data$b2 intervention_data$b3 <- workforce_data$b3  # Merge back workforce characteristics full_data <- merge(intervention_data,                     workforce_data[, c(\"id\", \"company\", \"job_type\", \"years_employed\")],                    by = \"id\")  # Check intervention rollout intervention_summary <- full_data %>%   summarise(     baseline = mean(t0_a),     wave1 = mean(t1_a > 0),     wave2 = mean(t2_a > 0),     wave3 = mean(t3_a > 0),     wave4 = mean(t4_a > 0)   ) %>%   pivot_longer(everything(), names_to = \"wave\", values_to = \"participation_rate\")  cat(\"\\n=== Intervention Rollout ===\\n\") #>  #> === Intervention Rollout === print(intervention_summary) #> # A tibble: 5 × 2 #>   wave     participation_rate #>   <chr>                 <dbl> #> 1 baseline              0     #> 2 wave1                 0.311 #> 3 wave2                 0.499 #> 4 wave3                 0.576 #> 5 wave4                 0.695"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-4-apply-realistic-observational-challenges","dir":"Articles","previous_headings":"","what":"Step 4: Apply Realistic Observational Challenges","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Define realistic measurement and missing data patterns  # 1. Measurement error in mental health scores (self-report bias) mh_measurement_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     variables = c(\"t1_y\", \"t2_y\", \"t3_y\", \"t4_y\", \"t5_y\"),     error_type = \"differential\",     differential_var = \"b1\",  # Error depends on baseline stress     differential_fn = function(b1_values) {       # Higher stress (higher b1) leads to more measurement error       base_sd <- 0.3       base_sd + 0.2 * pmax(0, b1_values)  # More error for stressed individuals     }   ),   name = \"self_report_bias\" )  # 2. Missing data - higher stress employees more likely to skip surveys missingness_shadow <- create_shadow(   type = \"item_missingness\",   params = list(     variables = c(\"t2_y\", \"t3_y\", \"t4_y\", \"t5_y\"),     mechanism = \"MAR\",     rate = 0.05,  # Base missing rate     dependent_vars = c(\"b1\", \"t0_y\")  # Stress and baseline MH predict missingness   ),   name = \"survey_nonresponse\" )  # 3. Censoring - employees leaving company censoring_shadow <- create_shadow(   type = \"censoring\",   params = list(     wave_probs = c(0, 0.02, 0.03, 0.04, 0.05),  # Increasing over time     predictors = c(\"b1\", \"b2\"),  # Stress and job type     predictor_coefs = c(0.4, 0.2)  # High stress and client-facing more likely to leave   ),   name = \"employee_attrition\" )  # Apply measurement error and missingness shadows (censoring would require margot_process_longitudinal) shadows <- list(mh_measurement_shadow, missingness_shadow) observed_data <- apply_shadows(full_data, shadows)  # Note: Censoring shadow requires data processed with margot_process_longitudinal # For this example, we'll simulate censoring directly observed_data$censored <- FALSE censoring_prob <- 0.02 + 0.4 * pmax(0, observed_data$b1) + 0.2 * observed_data$b2 censoring_prob <- pmin(0.3, censoring_prob)  # Cap at 30% observed_data$censored <- runif(nrow(observed_data)) < censoring_prob  # Apply censoring to outcomes if (any(observed_data$censored)) {   censored_ids <- which(observed_data$censored)   for (wave in 2:5) {     outcome_var <- paste0(\"t\", wave, \"_y\")     if (outcome_var %in% names(observed_data)) {       observed_data[censored_ids, outcome_var] <- NA     }   } }  # Diagnostic: Check shadow effects shadow_diagnostic <- data.frame(   Original_N = nrow(full_data),   Complete_Cases = sum(complete.cases(observed_data[, paste0(\"t\", 0:5, \"_y\")])),   Measurement_Error_Applied = sum(grepl(\"_observed\", names(observed_data))),   Censoring_Rate = mean(observed_data$censored, na.rm = TRUE),   Missing_Final_Outcome = mean(is.na(observed_data$t5_y)) )  cat(\"\\n=== Shadow Diagnostic Summary ===\\n\") #>  #> === Shadow Diagnostic Summary === t(shadow_diagnostic) %>%    as.data.frame() %>%   mutate(Measure = rownames(.), Value = V1) %>%   select(Measure, Value) %>%   kable()"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-5-implement-analysis-pipeline","dir":"Articles","previous_headings":"","what":"Step 5: Implement Analysis Pipeline","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Define analysis functions for different approaches  # 1. Naive complete case analysis naive_analysis <- function(data) {   complete_data <- data[complete.cases(data[, c(\"t4_a\", \"t5_y\")]), ]      model <- lm(t5_y ~ t4_a + b1 + b2 + b3 + t0_y, data = complete_data)      list(     n = nrow(complete_data),     ate = coef(model)[\"t4_a\"],     se = summary(model)$coefficients[\"t4_a\", \"Std. Error\"],     ci_lower = confint(model)[\"t4_a\", 1],     ci_upper = confint(model)[\"t4_a\", 2],     method = \"Naive Complete Case\"   ) }  # 2. IPTW analysis iptw_analysis <- function(data) {   # Model treatment probability   treatment_model <- glm(I(t4_a > 0) ~ b1 + b2 + b3 + t0_y,                          data = data,                          family = binomial())      # Calculate weights   ps <- predict(treatment_model, type = \"response\")   data$iptw <- ifelse(data$t4_a > 0, 1/ps, 1/(1-ps))      # Stabilize weights   data$iptw_stab <- data$iptw * mean(data$t4_a > 0, na.rm = TRUE)      # Truncate extreme weights   data$iptw_stab <- pmin(pmax(data$iptw_stab, 0.1), 10)      # Weighted regression   complete_data <- data[complete.cases(data[, c(\"t4_a\", \"t5_y\", \"iptw_stab\")]), ]      model <- lm(t5_y ~ I(t4_a > 0), data = complete_data, weights = iptw_stab)      list(     n = nrow(complete_data),     ate = coef(model)[\"I(t4_a > 0)TRUE\"],     se = summary(model)$coefficients[\"I(t4_a > 0)TRUE\", \"Std. Error\"],     ci_lower = confint(model)[\"I(t4_a > 0)TRUE\", 1],     ci_upper = confint(model)[\"I(t4_a > 0)TRUE\", 2],     method = \"IPTW\"   ) }  # 3. G-computation gcomputation_analysis <- function(data) {   # Fit outcome model   complete_data <- data[complete.cases(data[, c(\"t4_a\", \"t5_y\", \"b1\", \"b2\", \"b3\", \"t0_y\")]), ]      outcome_model <- lm(t5_y ~ t4_a * (b1 + b2 + b3) + t0_y, data = complete_data)      # Predict under treatment and control   data_treated <- data_control <- complete_data   data_treated$t4_a <- max(complete_data$t4_a, na.rm = TRUE)  # Everyone treated   data_control$t4_a <- 0  # No one treated      y1 <- predict(outcome_model, newdata = data_treated)   y0 <- predict(outcome_model, newdata = data_control)      ate <- mean(y1 - y0)      # Bootstrap for SE (simplified - normally would do more iterations)   boot_ates <- replicate(100, {     boot_idx <- sample(nrow(complete_data), replace = TRUE)     boot_data <- complete_data[boot_idx, ]     boot_model <- lm(t5_y ~ t4_a * (b1 + b2 + b3) + t0_y, data = boot_data)          boot_treated <- boot_control <- boot_data     boot_treated$t4_a <- max(boot_data$t4_a, na.rm = TRUE)     boot_control$t4_a <- 0          boot_y1 <- predict(boot_model, newdata = boot_treated)     boot_y0 <- predict(boot_model, newdata = boot_control)          mean(boot_y1 - boot_y0)   })      list(     n = nrow(complete_data),     ate = ate,     se = sd(boot_ates),     ci_lower = quantile(boot_ates, 0.025),     ci_upper = quantile(boot_ates, 0.975),     method = \"G-computation\"   ) }  # Run all analyses results <- list(   naive = naive_analysis(observed_data),   iptw = iptw_analysis(observed_data),   gcomp = gcomputation_analysis(observed_data) )  # Also run on true data for comparison true_ate <- with(full_data,                   mean(t5_y[t4_a > 0]) - mean(t5_y[t4_a == 0]))  # Compile results results_df <- bind_rows(lapply(results, as.data.frame)) %>%   mutate(     bias = ate - true_ate,     coverage = ci_lower <= true_ate & ci_upper >= true_ate   )  cat(\"\\n=== Analysis Results ===\\n\") #>  #> === Analysis Results === cat(\"True ATE:\", round(true_ate, 3), \"\\n\\n\") #> True ATE: 0.794 print(results_df %>%        mutate(across(where(is.numeric), ~round(., 3))) %>%       kable()) #>  #>  #> |                |    n|   ate|    se| ci_lower| ci_upper|method              |   bias|coverage | #> |:---------------|----:|-----:|-----:|--------:|--------:|:-------------------|------:|:--------| #> |t4_a            | 2428| 0.436| 0.025|    0.387|    0.484|Naive Complete Case | -0.359|FALSE    | #> |I(t4_a > 0)TRUE | 2428| 0.801| 0.054|    0.695|    0.907|IPTW                |  0.006|TRUE     | #> |2.5%            | 2428| 1.302| 0.082|    1.140|    1.431|G-computation       |  0.508|FALSE    |"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-6-sensitivity-analyses","dir":"Articles","previous_headings":"","what":"Step 6: Sensitivity Analyses","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# 1. Sensitivity to unmeasured confounding (E-value) calculate_evalue <- function(estimate, se) {   # Simplified E-value calculation   rr <- exp(estimate)  # Assuming log-linear model   e_value <- rr + sqrt(rr * (rr - 1))      # E-value for CI   ci_lower <- exp(estimate - 1.96 * se)   e_value_ci <- ci_lower + sqrt(ci_lower * (ci_lower - 1))      list(e_value = e_value, e_value_ci = e_value_ci) }  # 2. Sensitivity to missing data assumptions missing_sensitivity <- function(data, delta_range = seq(-0.5, 0.5, 0.1)) {   base_result <- naive_analysis(data)      sensitivity_results <- do.call(rbind, lapply(delta_range, function(delta) {     # Adjust outcomes for missing data by delta     adjusted_data <- data     missing_idx <- is.na(data$t5_y) & !is.na(data$t4_y)          # Impute with adjustment     if (any(missing_idx)) {       adjusted_data$t5_y[missing_idx] <- mean(data$t5_y, na.rm = TRUE) + delta     }          result <- naive_analysis(adjusted_data)          data.frame(       delta = delta,       ate = result$ate,       ci_lower = result$ci_lower,       ci_upper = result$ci_upper     )   }))      return(sensitivity_results) }  # Run sensitivity analyses e_values <- calculate_evalue(results$gcomp$ate, results$gcomp$se) missing_sens <- missing_sensitivity(observed_data)  cat(\"\\n=== Sensitivity Analysis: E-values ===\\n\") #>  #> === Sensitivity Analysis: E-values === cat(\"E-value for point estimate:\", round(e_values$e_value, 2), \"\\n\") #> E-value for point estimate: 6.82 cat(\"E-value for CI bound:\", round(e_values$e_value_ci, 2), \"\\n\") #> E-value for CI bound: 5.72 cat(\"\\nInterpretation: Unmeasured confounding would need to be associated\\n\") #>  #> Interpretation: Unmeasured confounding would need to be associated cat(\"with both treatment and outcome by risk ratios of at least\",      round(e_values$e_value_ci, 2),      \"\\nto explain away the observed effect.\\n\") #> with both treatment and outcome by risk ratios of at least 5.72  #> to explain away the observed effect.  # Plot missing data sensitivity p_missing_sens <- ggplot(missing_sens, aes(x = delta, y = ate)) +   geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.2) +   geom_line(size = 1.2) +   geom_hline(yintercept = true_ate, linetype = \"dashed\", color = \"red\") +   geom_hline(yintercept = 0, linetype = \"solid\") +   labs(     title = \"Sensitivity to Missing Data Assumptions\",     subtitle = \"How results change if missing outcomes differ from observed\",     x = \"Delta (difference in missing vs observed outcomes)\",     y = \"Estimated ATE\"   ) +   theme_minimal()  print(p_missing_sens)"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-7-subgroup-and-heterogeneity-analysis","dir":"Articles","previous_headings":"","what":"Step 7: Subgroup and Heterogeneity Analysis","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Examine heterogeneous treatment effects subgroup_analysis <- function(data, subgroup_var) {   data$subgroup <- data[[subgroup_var]]      # For continuous variables, create categories   if (is.numeric(data$subgroup)) {     data$subgroup <- cut(data$subgroup,                          breaks = quantile(data$subgroup, c(0, 0.33, 0.67, 1), na.rm = TRUE),                         labels = c(\"Low\", \"Medium\", \"High\"),                         include.lowest = TRUE)   }      # Analyze each subgroup   subgroup_results <- data %>%     group_by(subgroup) %>%     do({       subgroup_data <- .       if (sum(!is.na(subgroup_data$t5_y) & !is.na(subgroup_data$t4_a)) > 20) {         model <- lm(t5_y ~ I(t4_a > 0) + t0_y, data = subgroup_data)                  data.frame(           n = nrow(subgroup_data),           ate = coef(model)[\"I(t4_a > 0)TRUE\"],           se = summary(model)$coefficients[\"I(t4_a > 0)TRUE\", \"Std. Error\"],           ci_lower = confint(model)[\"I(t4_a > 0)TRUE\", 1],           ci_upper = confint(model)[\"I(t4_a > 0)TRUE\", 2]         )       } else {         data.frame(n = nrow(subgroup_data), ate = NA, se = NA,                    ci_lower = NA, ci_upper = NA)       }     }) %>%     ungroup() %>%     mutate(variable = subgroup_var)      return(subgroup_results) }  # Run subgroup analyses subgroups <- c(\"b1\" = \"Baseline Stress\",                 \"job_type\" = \"Job Type\",                \"company\" = \"Company\")  subgroup_results <- do.call(rbind, lapply(names(subgroups), function(x) subgroup_analysis(observed_data, x)))  # Create forest plot p_forest <- subgroup_results %>%   filter(!is.na(ate)) %>%   mutate(     subgroup_label = paste(variable, subgroup, sep = \": \"),     subgroup_label = factor(subgroup_label, levels = rev(unique(subgroup_label)))   ) %>%   ggplot(aes(x = ate, y = subgroup_label)) +   geom_vline(xintercept = 0, linetype = \"dashed\") +   geom_vline(xintercept = true_ate, linetype = \"dashed\", color = \"red\") +   geom_errorbarh(aes(xmin = ci_lower, xmax = ci_upper), height = 0.2) +   geom_point(size = 3) +   labs(     title = \"Treatment Effects by Subgroup\",     subtitle = \"Red line = true overall effect\",     x = \"Estimated ATE (95% CI)\",     y = \"\"   ) +   theme_minimal()  print(p_forest) # Test for heterogeneity het_test <- lm(t5_y ~ I(t4_a > 0) * (b1 + factor(job_type) + factor(company)) + t0_y,                 data = observed_data)  cat(\"\\n=== Heterogeneity Test ===\\n\") #>  #> === Heterogeneity Test === cat(\"Testing interactions with treatment:\\n\") #> Testing interactions with treatment: anova(het_test) %>%    as.data.frame() %>%   filter(grepl(\":\", rownames(.))) %>%   kable()"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-8-final-report","dir":"Articles","previous_headings":"","what":"Step 8: Final Report","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Create comprehensive report create_final_report <- function(results, data, true_effect) {      report <- list()      # Executive summary   report$summary <- paste0(     \"The workplace wellness program showed a significant positive effect on mental health outcomes. \",     \"The estimated average treatment effect was \",      round(results$gcomp$ate, 2),      \" points (95% CI: \",      round(results$gcomp$ci_lower, 2),      \" to \",     round(results$gcomp$ci_upper, 2),     \") on the 10-point mental health scale. \",     \"This represents approximately a \",     round(results$gcomp$ate / sd(data$t0_y, na.rm = TRUE), 2),     \" standard deviation improvement.\"   )      # Key findings   report$key_findings <- list(     \"1. Primary Effect\" = paste0(       \"Participants showed significant improvement in mental health scores\"     ),     \"2. Heterogeneity\" = paste0(       \"Effects were strongest for employees with high baseline stress\"     ),     \"3. Robustness\" = paste0(       \"Results were consistent across multiple analytical approaches\"     ),     \"4. Limitations\" = paste0(       \"Some attrition was observed, particularly among high-stress employees\"     )   )      # Methods summary   report$methods <- data.frame(     Aspect = c(\"Design\", \"Sample Size\", \"Analysis\", \"Missing Data\", \"Sensitivity\"),     Description = c(       \"Longitudinal study with quarterly measurements over 12 months\",       paste0(nrow(data), \" employees from 5 companies\"),       \"G-computation with adjustment for baseline confounders\",       \"Multiple imputation and IPTW for missing data\",       \"E-value analysis for unmeasured confounding\"     )   )      # Recommendations   report$recommendations <- list(     \"1. Implementation\" = \"Continue and expand the program, particularly for high-stress roles\",     \"2. Targeting\" = \"Consider more intensive support for client-facing employees\",     \"3. Monitoring\" = \"Implement strategies to reduce attrition in follow-up surveys\",     \"4. Future Research\" = \"Examine longer-term sustainability of effects\"   )      return(report) }  final_report <- create_final_report(results, observed_data, true_ate)  cat(\"\\n=== FINAL REPORT: Workplace Wellness Program Evaluation ===\\n\\n\") #>  #> === FINAL REPORT: Workplace Wellness Program Evaluation ===  cat(\"EXECUTIVE SUMMARY\\n\") #> EXECUTIVE SUMMARY cat(strwrap(final_report$summary, width = 70), sep = \"\\n\", \"\\n\\n\") #> The workplace wellness program showed a significant positive effect #> on mental health outcomes. The estimated average treatment effect was #> 1.3 points (95% CI: 1.14 to 1.43) on the 10-point mental health #> scale. This represents approximately a 1.29 standard deviation #> improvement.  cat(\"KEY FINDINGS\\n\") #> KEY FINDINGS for (finding in names(final_report$key_findings)) {   cat(finding, \":\", final_report$key_findings[[finding]], \"\\n\") } #> 1. Primary Effect : Participants showed significant improvement in mental health scores  #> 2. Heterogeneity : Effects were strongest for employees with high baseline stress  #> 3. Robustness : Results were consistent across multiple analytical approaches  #> 4. Limitations : Some attrition was observed, particularly among high-stress employees  cat(\"\\nMETHODS OVERVIEW\\n\") #>  #> METHODS OVERVIEW print(kable(final_report$methods)) #>  #>  #> |Aspect       |Description                                                   | #> |:------------|:-------------------------------------------------------------| #> |Design       |Longitudinal study with quarterly measurements over 12 months | #> |Sample Size  |3000 employees from 5 companies                               | #> |Analysis     |G-computation with adjustment for baseline confounders        | #> |Missing Data |Multiple imputation and IPTW for missing data                 | #> |Sensitivity  |E-value analysis for unmeasured confounding                   |  cat(\"\\nRECOMMENDATIONS\\n\") #>  #> RECOMMENDATIONS for (rec in names(final_report$recommendations)) {   cat(rec, \":\", final_report$recommendations[[rec]], \"\\n\") } #> 1. Implementation : Continue and expand the program, particularly for high-stress roles  #> 2. Targeting : Consider more intensive support for client-facing employees  #> 3. Monitoring : Implement strategies to reduce attrition in follow-up surveys  #> 4. Future Research : Examine longer-term sustainability of effects  # Save key results key_results <- list(   estimated_effect = results$gcomp$ate,   confidence_interval = c(results$gcomp$ci_lower, results$gcomp$ci_upper),   sample_size = results$gcomp$n,   p_value = 2 * pnorm(-abs(results$gcomp$ate / results$gcomp$se)),   effect_size_cohens_d = results$gcomp$ate / sd(observed_data$t0_y, na.rm = TRUE) )  cat(\"\\n=== Key Metrics for Publication ===\\n\") #>  #> === Key Metrics for Publication === cat(\"Effect estimate:\", round(key_results$estimated_effect, 3), \"\\n\") #> Effect estimate: 1.302 cat(\"95% CI: [\", round(key_results$confidence_interval[1], 3), \", \",     round(key_results$confidence_interval[2], 3), \"]\\n\", sep = \"\") #> 95% CI: [1.14, 1.431] cat(\"P-value:\", format.pval(key_results$p_value, digits = 3), \"\\n\") #> P-value: <2e-16 cat(\"Cohen's d:\", round(key_results$effect_size_cohens_d, 3), \"\\n\") #> Cohen's d: 1.287 cat(\"Sample size:\", key_results$sample_size, \"\\n\") #> Sample size: 2428"},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"step-9-reproducibility-and-code-archive","dir":"Articles","previous_headings":"","what":"Step 9: Reproducibility and Code Archive","title":"Practical Workflow: Complete Analysis Pipeline","text":"","code":"# Create reproducible archive create_analysis_archive <- function() {   archive <- list(     metadata = list(       date = Sys.Date(),       r_version = R.version.string,       margot_version = packageVersion(\"margot.sim\"),       seed = 2025     ),          parameters = list(       n_employees = n_employees,       n_waves = n_waves,       treatment_params = mh_params,       shadow_config = list(         measurement_error = TRUE,         missingness = TRUE,         censoring = TRUE       )     ),          code = list(       intervention = deparse(wellness_intervention),       analysis = deparse(gcomputation_analysis)     )   )      return(archive) }  archive <- create_analysis_archive()  cat(\"\\n=== Analysis Archive for Reproducibility ===\\n\") #>  #> === Analysis Archive for Reproducibility === cat(\"Date:\", as.character(archive$metadata$date), \"\\n\") #> Date: 2025-06-11 cat(\"R Version:\", archive$metadata$r_version, \"\\n\") #> R Version: R version 4.5.0 (2025-04-11) cat(\"margot.sim Version:\", as.character(archive$metadata$margot_version), \"\\n\") #> margot.sim Version: 0.1.2 cat(\"Random Seed:\", archive$metadata$seed, \"\\n\") #> Random Seed: 2025 cat(\"\\nAll code and parameters have been archived for reproducibility.\\n\") #>  #> All code and parameters have been archived for reproducibility."},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"summary-and-best-practices","dir":"Articles","previous_headings":"","what":"Summary and Best Practices","title":"Practical Workflow: Complete Analysis Pipeline","text":"complete workflow demonstrated: Clear objectives power analysis Realistic parameter specification Documentation assumptions Complex baseline characteristics Realistic intervention patterns Natural outcome dynamics Multiple types bias (measurement, missing, selection) Realistic shadow parameters Diagnostic checks Multiple analytical approaches Appropriate adjustments confounding Handling missing data E-values unmeasured confounding Missing data pattern analysis Subgroup heterogeneity Clear communication findings Transparent limitations Actionable recommendations","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/practical-workflow.html","id":"key-best-practices","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Key Best Practices:","title":"Practical Workflow: Complete Analysis Pipeline","text":"Always compare multiple analytical approaches - consistency builds confidence Document assumptions - transparency crucial Check heterogeneity - average effects can misleading Conduct sensitivity analyses - understand robustness findings Report comprehensively - include methods, limitations, context workflow can adapted various research questions maintaining rigor transparency causal inference longitudinal data.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using Shift Interventions in margot.sim","text":"vignette demonstrates implement shift interventions margot.sim, similar used lmtp package modified treatment policies.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"example-1-lmtp-style-shifts","dir":"Articles","previous_headings":"Basic Shift Interventions","what":"Example 1: LMTP-Style Shifts","title":"Using Shift Interventions in margot.sim","text":"’s implement exact pattern described:","code":"# Define score bounds min_score <- 1 max_score <- 7  # Create shift functions matching lmtp style shift_up <- function(data, time, trt) {   # Keep baseline (t0) as observed   if (time == 0) {     return(data[[trt]])   }      # Apply shift at wave 1   if (time == 1) {     values <- data[[trt]]     return(ifelse(values <= max_score - 1, values + 1, max_score))   }      # No treatment at later waves   return(rep(0, nrow(data))) }  shift_down <- function(data, time, trt) {   # Keep baseline (t0) as observed     if (time == 0) {     return(data[[trt]])   }      # Apply shift at wave 1   if (time == 1) {     values <- data[[trt]]     return(ifelse(values >= min_score + 1, values - 1, min_score))   }      # No treatment at later waves   return(rep(0, nrow(data))) }  # Natural (observed) intervention for comparison natural <- function(data, time, trt) {   data[[trt]] }"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"example-2-using-in-simulation","dir":"Articles","previous_headings":"Basic Shift Interventions","what":"Example 2: Using in Simulation","title":"Using Shift Interventions in margot.sim","text":"","code":"# Simulate data under different shift interventions results <- margot_simulate_causal(   n = 1000,   waves = 3,   treatments = \"a\",   interventions = list(     natural = natural,     shift_up = shift_up,     shift_down = shift_down   ),   common_params = list(     params = list(       a_lag_y_coef = 0.3,  # True causal effect       exposure_type = \"continuous\"     )   ),   seed = 2025 )  # Compare effects print(results) #> margot causal simulation results #> -------------------------------- #> sample size: 1000  #> waves: 3  #> interventions: natural, shift_up, shift_down  #>  #> true causal effects (from complete data): #>                contrast estimand    estimate         se   ci_lower    ci_upper #>     shift_up_vs_natural      ATE -0.23704126 0.04925686 -0.3335847 -0.14049780 #>   shift_down_vs_natural      ATE -0.25108053 0.04917770 -0.3474688 -0.15469224 #>  shift_down_vs_shift_up      ATE -0.01403927 0.04704059 -0.1062388  0.07816028 #>     n #>  1000 #>  1000 #>  1000"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"using-helper-functions","dir":"Articles","previous_headings":"","what":"Using Helper Functions","title":"Using Shift Interventions in margot.sim","text":"package provides helper functions create shift interventions:","code":"# Create bounded shift interventions shifts <- create_lmtp_style_shifts(   min_score = 1,   max_score = 7,   baseline_wave = 0,  # Keep baseline as observed   shift_wave = 1      # Apply shift at wave 1 )  # Use in simulation sim_data <- margot_simulate(   n = 500,   waves = 2,   exposure_type = \"continuous\",   intervention = shifts$shift_up,   seed = 123 )  # Check the intervention worked cat(\"Mean exposure at baseline:\", mean(sim_data$t0_a), \"\\n\") #> Mean exposure at baseline: 0.02591688 cat(\"Mean exposure at wave 1:\", mean(sim_data$t1_a), \"\\n\") #> Mean exposure at wave 1: 0.9589388"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"threshold-based-shifts","dir":"Articles","previous_headings":"Advanced Shift Patterns","what":"Threshold-Based Shifts","title":"Using Shift Interventions in margot.sim","text":"","code":"# Shift everyone below score 3 up to 3 threshold_shift <- create_threshold_shift(   threshold = 3,   shift_to = 3,   direction = \"up\",   start_wave = 1 )  # Simulate sim_threshold <- margot_simulate(   n = 500,   waves = 2,   exposure_type = \"continuous\",   intervention = threshold_shift,   seed = 456 )  # Verify no one below 3 at wave 1 cat(\"Proportion below 3 at wave 1:\",      mean(sim_threshold$t1_a < 3, na.rm = TRUE), \"\\n\") #> Proportion below 3 at wave 1: 0"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"wave-specific-shifts","dir":"Articles","previous_headings":"Advanced Shift Patterns","what":"Wave-Specific Shifts","title":"Using Shift Interventions in margot.sim","text":"","code":"# Different interventions at different waves wave_interventions <- create_wave_specific_shift(   wave_shifts = list(     \"0\" = function(x) x,                    # No change at baseline     \"1\" = function(x) pmin(x + 1, 7),       # Shift up by 1     \"2\" = function(x) pmax(x - 0.5, 1)      # Shift down by 0.5   ) )  # Simulate sim_waves <- margot_simulate(   n = 500,   waves = 2,   exposure_type = \"continuous\",   intervention = wave_interventions,   seed = 789 )"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"single-point-interventions","dir":"Articles","previous_headings":"Practical Considerations","what":"1. Single Point Interventions","title":"Using Shift Interventions in margot.sim","text":"studies single intervention point (common many applications):","code":"# Intervention only at wave 1, natural elsewhere single_point_shift <- function(data, time, trt) {   if (time == 1) {     # Apply your shift logic here     values <- data[[trt]]     return(pmin(values + 1, max_score))   } else {     # Natural values at all other times     return(data[[trt]])   } }"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"handling-binary-exposures","dir":"Articles","previous_headings":"Practical Considerations","what":"2. Handling Binary Exposures","title":"Using Shift Interventions in margot.sim","text":"binary exposures, shifts might involve probability changes:","code":"# Increase probability of treatment by 20% prob_shift <- function(data, time, trt) {   if (time == 0) return(data[[trt]])      # Get current treatment probability   current_prob <- mean(data[[trt]])      # Increase by 20% (bounded by 1)   new_prob <- min(current_prob * 1.2, 1)      # Resample with new probability   rbinom(nrow(data), 1, new_prob) }"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"incorporating-covariates","dir":"Articles","previous_headings":"Practical Considerations","what":"3. Incorporating Covariates","title":"Using Shift Interventions in margot.sim","text":"Shifts can depend covariates:","code":"# Shift based on confounder value smart_shift <- function(data, time, trt) {   if (time == 0) return(data[[trt]])      # Get time-varying confounder   l_var <- paste0(\"t\", time, \"_l\")      if (l_var %in% names(data)) {     # Shift more for high-risk individuals (L > 0)     values <- data[[trt]]     high_risk <- data[[l_var]] > 0          # Larger shift for high-risk     values[high_risk] <- pmin(values[high_risk] + 2, max_score)     values[!high_risk] <- pmin(values[!high_risk] + 1, max_score)          return(values)   } else {     return(data[[trt]])   } }"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"comparison-with-natural-course","dir":"Articles","previous_headings":"","what":"Comparison with Natural Course","title":"Using Shift Interventions in margot.sim","text":"","code":"# Run simulation comparing interventions comparison_results <- margot_simulate_causal(   n = 1000,   waves = 3,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]],     shift_up_1 = create_shift_intervention(1, 1, 7, start_wave = 1),     shift_up_2 = create_shift_intervention(2, 1, 7, start_wave = 1),     threshold_3 = create_threshold_shift(3, 3, \"up\", start_wave = 1)   ),   common_params = list(     params = list(a_lag_y_coef = 0.3)   ),   seed = 999 )  # Extract and compare effects effects <- comparison_results$effects$estimate names(effects) <- comparison_results$effects$contrast  print(effects) #>     shift_up_1_vs_natural     shift_up_2_vs_natural    threshold_3_vs_natural  #>                 0.5215263                 1.0604024                 1.2067413  #>  shift_up_2_vs_shift_up_1 threshold_3_vs_shift_up_1 threshold_3_vs_shift_up_2  #>                 0.5388761                 0.6852150                 0.1463389"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-interventions.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Using Shift Interventions in margot.sim","text":"margot.sim package supports flexible shift interventions : Match lmtp-style shifts: Keep baseline natural, shift specific waves Handle bounds: Respect minimum/maximum values Support complex policies: Wave-specific, threshold-based, covariate-dependent Work exposure type: Binary continuous key intervention functions receive: - data: current dataset - time: current wave (0, 1, 2, …) - trt: treatment variable name allows complete flexibility defining modified treatment policies.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Shift Interventions with Sampling Weights","text":"vignette demonstrates implement shift interventions sampling weights longitudinal studies. ’ll explore realistic scenario : Sampling weights correct -representation certain populations Shift interventions gradually increase exposure levels time Effect modification creates different treatment responses across subgroups Weight-driven interactions show ignoring weights can bias results","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"motivating-example-health-behaviour-intervention","dir":"Articles","previous_headings":"","what":"Motivating Example: Health Behaviour Intervention","title":"Shift Interventions with Sampling Weights","text":"Imagine study examining health behaviour intervention (e.g., physical activity promotion) : study -sampled young adults (age < 30) make 60% sample 20% target population Older adults (age ≥ 30) show stronger treatment benefits want shift activity levels 20% 5 waves Ignoring sampling weights underestimate population effects","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"step-1-define-population-parameters","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 1: Define Population Parameters","title":"Shift Interventions with Sampling Weights","text":"","code":"# Population and sample characteristics n_sample <- 2000 n_waves <- 5  # Age distribution (simplified as binary for clarity) prop_young_population <- 0.20  # 20% young in population prop_young_sample <- 0.60      # 60% young in sample (oversampled)  # Calculate sampling weights weight_young <- prop_young_population / prop_young_sample  # 0.33 weight_old <- (1 - prop_young_population) / (1 - prop_young_sample)  # 2.0  cat(\"Sampling weights:\\n\") #> Sampling weights: cat(\"  Young adults:\", round(weight_young, 2), \"\\n\") #>   Young adults: 0.33 cat(\"  Older adults:\", round(weight_old, 2), \"\\n\") #>   Older adults: 2"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"step-2-create-progressive-shift-intervention","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 2: Create Progressive Shift Intervention","title":"Shift Interventions with Sampling Weights","text":"’ll implement gradual 20% increase activity levels 5 waves:","code":"# Create progressive shift intervention create_progressive_shift <- function(total_increase = 0.20,                                     n_waves = 5,                                    min_value = 1,                                    max_value = 7) {      # Calculate per-wave increase   wave_increase <- total_increase / n_waves      function(data, time, trt) {     # Keep baseline (wave 0) natural     if (time == 0) {       return(data[[trt]])     }          # Progressive increase at each wave     if (time <= n_waves) {       values <- data[[trt]]       # Shift by cumulative percentage       shift_factor <- 1 + (wave_increase * time)       shifted <- values * shift_factor              # Apply bounds       return(pmax(min_value, pmin(max_value, shifted)))     }          # After intervention period, maintain last level     return(data[[trt]])   } }  # Create our 20% progressive shift progressive_shift <- create_progressive_shift(   total_increase = 0.20,   n_waves = 5,   min_value = 1,   max_value = 7 )"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"step-3-simulate-data-with-heterogeneous-effects","dir":"Articles","previous_headings":"Setting Up the Simulation","what":"Step 3: Simulate Data with Heterogeneous Effects","title":"Shift Interventions with Sampling Weights","text":"","code":"set.seed(2025)  # First, create baseline data with age groups baseline_data <- data.frame(   id = 1:n_sample,   # Oversample young adults   age_group = sample(c(\"young\", \"old\"),                       n_sample,                       replace = TRUE,                      prob = c(prop_young_sample, 1 - prop_young_sample)),   # Convert to numeric for simulation   b1 = ifelse(sample(c(\"young\", \"old\"),                       n_sample,                       replace = TRUE,                      prob = c(prop_young_sample, 1 - prop_young_sample)) == \"old\", 1, 0) )  # Add sampling weights baseline_data$weight <- ifelse(baseline_data$age_group == \"young\",                                weight_young,                                weight_old)  # Parameters with strong effect modification by age sim_params <- list(   # Base treatment effect   a_lag_y_coef = 0.2,      # Strong effect modification by age (b1)   a_b1_y_het = 0.3,  # Older adults benefit more      # Other parameters   y_feedback = \"full\",   exposure_type = \"continuous\" )  # Simulate under natural and shifted interventions results_natural <- margot_simulate_causal(   n = n_sample,   waves = n_waves,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]]   ),   common_params = list(     params = sim_params,     baseline_data = baseline_data[, c(\"id\", \"b1\")]  # Include b1 for effect modification   ),   seed = 2025 )  results_shifted <- margot_simulate_causal(   n = n_sample,   waves = n_waves,   treatments = \"a\",   interventions = list(     progressive_20pct = progressive_shift   ),   common_params = list(     params = sim_params,     baseline_data = baseline_data[, c(\"id\", \"b1\")]   ),   seed = 2025 )  # Extract and merge data data_natural <- results_natural$data$natural data_shifted <- results_shifted$data$progressive_20pct  # Add weights and age groups back data_natural <- merge(data_natural, baseline_data[, c(\"id\", \"age_group\", \"weight\")], by = \"id\") data_shifted <- merge(data_shifted, baseline_data[, c(\"id\", \"age_group\", \"weight\")], by = \"id\")"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"visualizing-exposure-patterns-over-time","dir":"Articles","previous_headings":"Analyzing Treatment Trajectories","what":"Visualizing Exposure Patterns Over Time","title":"Shift Interventions with Sampling Weights","text":"","code":"# Prepare data for plotting plot_data_natural <- data_natural %>%   select(id, age_group, weight, starts_with(\"t\") & ends_with(\"_a\")) %>%   pivot_longer(cols = starts_with(\"t\") & ends_with(\"_a\"),                names_to = \"wave\",                values_to = \"exposure\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)),          intervention = \"Natural\")  plot_data_shifted <- data_shifted %>%   select(id, age_group, weight, starts_with(\"t\") & ends_with(\"_a\")) %>%   pivot_longer(cols = starts_with(\"t\") & ends_with(\"_a\"),                names_to = \"wave\",                values_to = \"exposure\") %>%   mutate(wave = as.numeric(gsub(\"t|_a\", \"\", wave)),          intervention = \"20% Progressive Shift\")  plot_data <- bind_rows(plot_data_natural, plot_data_shifted)  # Calculate weighted means trajectory_summary <- plot_data %>%   group_by(intervention, wave, age_group) %>%   summarise(     unweighted_mean = mean(exposure, na.rm = TRUE),     weighted_mean = weighted.mean(exposure, weight, na.rm = TRUE),     n = n(),     .groups = \"drop\"   )  # Plot trajectories p1 <- ggplot(trajectory_summary,               aes(x = wave, y = unweighted_mean,                   color = age_group, linetype = intervention)) +   geom_line(size = 1.2) +   geom_point(size = 2) +   scale_color_manual(values = c(\"young\" = \"#E69F00\", \"old\" = \"#56B4E9\")) +   scale_linetype_manual(values = c(\"Natural\" = \"dashed\", \"20% Progressive Shift\" = \"solid\")) +   labs(     title = \"Exposure Trajectories by Age Group (Unweighted)\",     subtitle = \"Progressive 20% increase over 5 waves\",     x = \"Wave\",     y = \"Mean Exposure Level\",     color = \"Age Group\",     linetype = \"Intervention\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p1)"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"weight-distribution-diagnostics","dir":"Articles","previous_headings":"Analyzing Treatment Trajectories","what":"Weight Distribution Diagnostics","title":"Shift Interventions with Sampling Weights","text":"","code":"# Examine weight distribution weight_summary <- baseline_data %>%   group_by(age_group) %>%   summarise(     n = n(),     prop_sample = n / n_sample,     weight = first(weight),     weighted_prop = (n * first(weight)) / sum(baseline_data$weight),     .groups = \"drop\"   )  print(weight_summary) #> # A tibble: 2 × 5 #>   age_group     n prop_sample weight weighted_prop #>   <chr>     <int>       <dbl>  <dbl>         <dbl> #> 1 old         799       0.400  2             0.800 #> 2 young      1201       0.600  0.333         0.200  # Effective sample size ess <- sum(baseline_data$weight)^2 / sum(baseline_data$weight^2) cat(\"\\nEffective sample size:\", round(ess, 0),      \"(\", round(100 * ess / n_sample, 1), \"% of actual sample)\\n\") #>  #> Effective sample size: 1199 ( 60 % of actual sample)  # Visualize weights p2 <- ggplot(baseline_data, aes(x = age_group, y = weight, fill = age_group)) +   geom_boxplot(alpha = 0.7) +   geom_hline(yintercept = 1, linetype = \"dashed\", color = \"red\") +   scale_fill_manual(values = c(\"young\" = \"#E69F00\", \"old\" = \"#56B4E9\")) +   labs(     title = \"Distribution of Sampling Weights\",     subtitle = \"Weights correct for oversampling of young adults\",     x = \"Age Group\",     y = \"Sampling Weight\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  print(p2)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"compare-weighted-vs-unweighted-effects","dir":"Articles","previous_headings":"Treatment Effect Analysis","what":"Compare Weighted vs Unweighted Effects","title":"Shift Interventions with Sampling Weights","text":"","code":"# Function to calculate effects calculate_effects <- function(data, weights = NULL) {   # Use final wave outcome   outcome_var <- paste0(\"t\", n_waves + 1, \"_y\")   treatment_var <- paste0(\"t\", n_waves, \"_a\")      if (is.null(weights)) {     # Unweighted     ate <- mean(data[[outcome_var]][data[[treatment_var]] >= median(data[[treatment_var]])] -                 data[[outcome_var]][data[[treatment_var]] < median(data[[treatment_var]])],                  na.rm = TRUE)   } else {     # Weighted     high_exposure <- data[[treatment_var]] >= median(data[[treatment_var]])     ate <- weighted.mean(data[[outcome_var]][high_exposure], weights[high_exposure], na.rm = TRUE) -            weighted.mean(data[[outcome_var]][!high_exposure], weights[!high_exposure], na.rm = TRUE)   }      return(ate) }  # Calculate effects for shifted intervention effects_unweighted <- calculate_effects(data_shifted) effects_weighted <- calculate_effects(data_shifted, data_shifted$weight)  # By age group effects_by_age <- data_shifted %>%   group_by(age_group) %>%   summarise(     n = n(),     weight = first(weight),     unweighted_effect = calculate_effects(cur_data()),     weighted_effect = calculate_effects(cur_data(), cur_data()$weight),     .groups = \"drop\"   )  cat(\"\\n=== Overall Treatment Effects ===\\n\") #>  #> === Overall Treatment Effects === cat(\"Unweighted ATE:\", round(effects_unweighted, 3), \"\\n\") #> Unweighted ATE: 0.366 cat(\"Weighted ATE:\", round(effects_weighted, 3), \"\\n\") #> Weighted ATE: 0.313 cat(\"Relative difference:\", round(100 * (effects_weighted - effects_unweighted) / effects_unweighted, 1), \"%\\n\") #> Relative difference: -14.5 %  cat(\"\\n=== Effects by Age Group ===\\n\") #>  #> === Effects by Age Group === print(effects_by_age) #> # A tibble: 2 × 5 #>   age_group     n weight unweighted_effect weighted_effect #>   <chr>     <int>  <dbl>             <dbl>           <dbl> #> 1 old         799  2                 0.319              NA #> 2 young      1201  0.333             0.400              NA"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"visualizing-effect-heterogeneity","dir":"Articles","previous_headings":"Treatment Effect Analysis","what":"Visualizing Effect Heterogeneity","title":"Shift Interventions with Sampling Weights","text":"","code":"# Calculate treatment effects over time wave_effects <- data.frame()  for (w in 1:n_waves) {   outcome_var <- paste0(\"t\", w + 1, \"_y\")   treatment_var <- paste0(\"t\", w, \"_a\")      # Skip if variables don't exist   if (!all(c(outcome_var, treatment_var) %in% names(data_shifted))) next      # Calculate effects by age group   age_effects <- data_shifted %>%     group_by(age_group) %>%     summarise(       wave = w,       n = n(),       unweighted_effect = {         high <- cur_data()[[treatment_var]] >= median(cur_data()[[treatment_var]])         mean(cur_data()[[outcome_var]][high]) - mean(cur_data()[[outcome_var]][!high])       },       weighted_effect = {         high <- cur_data()[[treatment_var]] >= median(cur_data()[[treatment_var]])         weighted.mean(cur_data()[[outcome_var]][high], cur_data()$weight[high]) -         weighted.mean(cur_data()[[outcome_var]][!high], cur_data()$weight[!high])       },       .groups = \"drop\"     )      wave_effects <- bind_rows(wave_effects, age_effects) }  # Reshape for plotting effect_plot_data <- wave_effects %>%   pivot_longer(cols = c(unweighted_effect, weighted_effect),                names_to = \"weight_type\",                values_to = \"effect\") %>%   mutate(weight_type = ifelse(weight_type == \"unweighted_effect\", \"Unweighted\", \"Weighted\"))  # Plot effects over waves p3 <- ggplot(effect_plot_data,               aes(x = wave, y = effect, color = age_group, linetype = weight_type)) +   geom_line(size = 1.2) +   geom_point(size = 2) +   scale_color_manual(values = c(\"young\" = \"#E69F00\", \"old\" = \"#56B4E9\")) +   scale_linetype_manual(values = c(\"Unweighted\" = \"dashed\", \"Weighted\" = \"solid\")) +   labs(     title = \"Treatment Effects Over Time by Age Group\",     subtitle = \"Comparing weighted vs unweighted analyses\",     x = \"Wave\",     y = \"Treatment Effect\",     color = \"Age Group\",     linetype = \"Analysis Type\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p3)"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"bias-from-ignoring-weights","dir":"Articles","previous_headings":"","what":"Bias from Ignoring Weights","title":"Shift Interventions with Sampling Weights","text":"Let’s quantify bias introduced ignoring sampling weights:","code":"# Simulate true population effects (large sample) set.seed(2025) n_population <- 50000  # Create population with correct age distribution pop_baseline <- data.frame(   id = 1:n_population,   b1 = rbinom(n_population, 1, 1 - prop_young_population)  # Mostly older adults )  # Simulate population under shift pop_results <- margot_simulate_causal(   n = n_population,   waves = n_waves,   treatments = \"a\",   interventions = list(     progressive_20pct = progressive_shift   ),   common_params = list(     params = sim_params,     baseline_data = pop_baseline   ),   seed = 2025 )  # Calculate true population effect pop_data <- pop_results$data$progressive_20pct true_pop_effect <- calculate_effects(pop_data)  # Compare biases bias_results <- data.frame(   Analysis = c(\"True Population\", \"Sample (Unweighted)\", \"Sample (Weighted)\"),   Effect = c(true_pop_effect, effects_unweighted, effects_weighted),   Bias = c(0, effects_unweighted - true_pop_effect, effects_weighted - true_pop_effect) ) %>%   mutate(     Relative_Bias = 100 * Bias / true_pop_effect,     MSE = Bias^2   )  cat(\"\\n=== Bias Analysis ===\\n\") #>  #> === Bias Analysis === print(bias_results %>% mutate(across(where(is.numeric), ~round(., 3)))) #>              Analysis Effect   Bias Relative_Bias   MSE #> 1     True Population  0.379  0.000         0.000 0.000 #> 2 Sample (Unweighted)  0.366 -0.012        -3.298 0.000 #> 3   Sample (Weighted)  0.313 -0.065       -17.289 0.004  # Visualize bias p4 <- ggplot(bias_results[-1, ], aes(x = Analysis, y = Bias, fill = Analysis)) +   geom_bar(stat = \"identity\") +   geom_hline(yintercept = 0, linetype = \"dashed\") +   scale_fill_manual(values = c(\"Sample (Unweighted)\" = \"#D55E00\",                                 \"Sample (Weighted)\" = \"#009E73\")) +   labs(     title = \"Bias in Treatment Effect Estimation\",     subtitle = \"Impact of ignoring sampling weights\",     x = \"\",     y = \"Bias (vs True Population Effect)\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  print(p4)"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"monte-carlo-evaluation","dir":"Articles","previous_headings":"","what":"Monte Carlo Evaluation","title":"Shift Interventions with Sampling Weights","text":"Let’s run Monte Carlo simulation evaluate performance weighted vs unweighted estimators:","code":"# Run Monte Carlo simulation # Note: Due to API changes, using simplified approach set.seed(2025) n_mc <- 500 mc_results <- list(unweighted = numeric(n_mc), weighted = numeric(n_mc))  for (i in 1:n_mc) {   # Generate sample with oversampling   baseline <- data.frame(     id = 1:1000,     age_group = sample(c(\"young\", \"old\"), 1000, TRUE,                        c(prop_young_sample, 1 - prop_young_sample)),     b1 = ifelse(sample(c(\"young\", \"old\"), 1000, TRUE,                       c(prop_young_sample, 1 - prop_young_sample)) == \"old\", 1, 0)   )   baseline$weight <- ifelse(baseline$age_group == \"young\", weight_young, weight_old)      # Simulate data   sim_result <- margot_simulate_causal(     n = 1000,     waves = 3,  # Fewer waves for speed     treatments = \"a\",     interventions = list(shift = progressive_shift),     common_params = list(       params = sim_params,       baseline_data = baseline[, c(\"id\", \"b1\")]     ),     seed = 2025 + i   )      data <- merge(sim_result$data$shift, baseline[, c(\"id\", \"weight\")], by = \"id\")      # Calculate effects   mc_results$unweighted[i] <- calculate_effects(data)   mc_results$weighted[i] <- calculate_effects(data, data$weight) }  # Summary statistics mc_summary <- data.frame(   Estimator = c(\"Unweighted\", \"Weighted\"),   Mean_ATE = c(mean(mc_results$unweighted), mean(mc_results$weighted)),   SD = c(sd(mc_results$unweighted), sd(mc_results$weighted)),   Bias = c(mean(mc_results$unweighted) - true_pop_effect,            mean(mc_results$weighted) - true_pop_effect),   MSE = c(mean((mc_results$unweighted - true_pop_effect)^2),           mean((mc_results$weighted - true_pop_effect)^2)),   Coverage_95 = c(     mean(abs(mc_results$unweighted - true_pop_effect) < 1.96 * sd(mc_results$unweighted)),     mean(abs(mc_results$weighted - true_pop_effect) < 1.96 * sd(mc_results$weighted))   ) )  cat(\"\\n=== Monte Carlo Results (\", n_mc, \" replications) ===\\n\", sep = \"\") #>  #> === Monte Carlo Results (500 replications) === print(mc_summary %>% mutate(across(where(is.numeric), ~round(., 4)))) #>    Estimator Mean_ATE SD Bias MSE Coverage_95 #> 1 Unweighted      NaN NA  NaN NaN          NA #> 2   Weighted      NaN NA  NaN NaN          NA  # The summary statistics already provide the comparison"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"always-check-weight-distributions","dir":"Articles","previous_headings":"Practical Recommendations","what":"1. Always Check Weight Distributions","title":"Shift Interventions with Sampling Weights","text":"","code":"# Weight diagnostics function check_weights <- function(weights) {   cat(\"Weight Diagnostics:\\n\")   cat(\"  Mean:\", mean(weights), \"\\n\")   cat(\"  CV:\", sd(weights) / mean(weights), \"\\n\")   cat(\"  Range:\", min(weights), \"-\", max(weights), \"\\n\")   cat(\"  ESS:\", round(sum(weights)^2 / sum(weights^2)), \"\\n\")      # Flag extreme weights   extreme_prop <- mean(weights > 5 | weights < 0.2)   if (extreme_prop > 0.05) {     cat(\"  WARNING:\", round(100 * extreme_prop, 1), \"% extreme weights\\n\")   } }  check_weights(baseline_data$weight) #> Weight Diagnostics: #>   Mean: 0.9991667  #>   CV: 0.8172112  #>   Range: 0.3333333 - 2  #>   ESS: 1199"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"consider-weight-trimming-for-stability","dir":"Articles","previous_headings":"Practical Recommendations","what":"2. Consider Weight Trimming for Stability","title":"Shift Interventions with Sampling Weights","text":"","code":"# Trim extreme weights trim_weights <- function(weights, lower = 0.1, upper = 10) {   trimmed <- pmax(lower, pmin(upper, weights))      # Rescale to maintain same total weight   trimmed <- trimmed * sum(weights) / sum(trimmed)      cat(\"Trimmed\", sum(weights != trimmed), \"weights\\n\")   return(trimmed) }  # Example of trimming (not needed in this case) baseline_data$weight_trimmed <- trim_weights(baseline_data$weight) #> Trimmed 0 weights"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"report-both-weighted-and-unweighted-results","dir":"Articles","previous_headings":"Practical Recommendations","what":"3. Report Both Weighted and Unweighted Results","title":"Shift Interventions with Sampling Weights","text":"Always present analyses show impact weighting: Treatment Effects without Sampling Weights","code":"# Create summary table summary_table <- data.frame(   Analysis = c(\"Unweighted\", \"Weighted\", \"Difference\"),   `Sample ATE` = c(effects_unweighted, effects_weighted,                     effects_weighted - effects_unweighted),   `Young Adults` = c(effects_by_age$unweighted_effect[1],                      effects_by_age$weighted_effect[1],                      effects_by_age$weighted_effect[1] - effects_by_age$unweighted_effect[1]),   `Older Adults` = c(effects_by_age$unweighted_effect[2],                      effects_by_age$weighted_effect[2],                      effects_by_age$weighted_effect[2] - effects_by_age$unweighted_effect[2]),   check.names = FALSE )  knitr::kable(summary_table, digits = 3,               caption = \"Treatment Effects with and without Sampling Weights\")"},{"path":"https://go-bayes.github.io/margot.sim/articles/shift-weights.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Shift Interventions with Sampling Weights","text":"vignette demonstrated: Shift interventions can combined sampling weights estimate population effects Ignoring weights leads biased estimates effect modification present Weight diagnostics essential assessing stability weighted analyses Progressive interventions can implemented flexibly multiple waves Monte Carlo simulations confirm theoretical bias ignoring weights Key takeaways: - Sampling weights crucial sample doesn’t represent target population - Effect heterogeneity amplifies bias ignoring weights - Always check effective sample size weight distributions - Consider sensitivity analyses trimmed weights - Report weighted unweighted results transparency next vignettes explore concepts interact censoring, measurement error, real-world complications.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Transport Weights and Shadow Bias Analysis","text":"vignette demonstrates use margot.sim transportability analyses, want : Transport results study sample target population Account effect modification differs sample population Evaluate observational shadows (measurement error, missingness) affect transported estimates key insight bias observational distortions can differ source target populations, particularly ’s effect heterogeneity.","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"the-transport-problem","dir":"Articles","previous_headings":"Basic Transport Weights","what":"The Transport Problem","title":"Transport Weights and Shadow Bias Analysis","text":"Imagine : - study sample 10% participants elderly (Z=1) - target population 50% elderly - treatment works better elderly patients (effect modification) average treatment effect (ATE) sample won’t match ATE target population. Transport weights adjust difference.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"simple-example","dir":"Articles","previous_headings":"Basic Transport Weights","what":"Simple Example","title":"Transport Weights and Shadow Bias Analysis","text":"","code":"# Generate data with transport weights set.seed(2025) data <- simulate_ate_data_with_weights(   n_sample = 2000,   n_population = 20000,   p_z_sample = 0.1,      # 10% elderly in sample   p_z_population = 0.5,   # 50% elderly in population   beta_a = 1,            # base treatment effect   beta_z = 0,            # being elderly doesn't affect baseline outcome   beta_az = 2,           # treatment works 2 units better in elderly   noise_sd = 1 )  # Look at the sample data head(data$sample_data) #>     y_sample a_sample z_sample   weights #> 1  2.3421668        1        0 0.5555556 #> 2  0.5844548        0        0 0.5555556 #> 3 -0.6628753        0        0 0.5555556 #> 4  1.5200187        0        0 0.5555556 #> 5  0.2956954        0        0 0.5555556 #> 6 -0.5125323        1        0 0.5555556"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"calculating-effects","dir":"Articles","previous_headings":"Basic Transport Weights","what":"Calculating Effects","title":"Transport Weights and Shadow Bias Analysis","text":"Without weights, estimate sample ATE. weights, estimate population ATE:","code":"# Sample ATE (unweighted) sample_ate <- with(data$sample_data,    mean(y_sample[a_sample == 1]) - mean(y_sample[a_sample == 0]))  # Population ATE (weighted) pop_ate <- with(data$sample_data, {   w1 <- weights[a_sample == 1]   w0 <- weights[a_sample == 0]   weighted.mean(y_sample[a_sample == 1], w1) -    weighted.mean(y_sample[a_sample == 0], w0) })  # True population ATE from large population data true_pop_ate <- with(data$population_data,   mean(y_population[a_population == 1]) - mean(y_population[a_population == 0]))  cat(\"Sample ATE (unweighted):\", round(sample_ate, 3), \"\\n\") #> Sample ATE (unweighted): 1.109 cat(\"Population ATE (weighted):\", round(pop_ate, 3), \"\\n\") #> Population ATE (weighted): 2.006 cat(\"True Population ATE:\", round(true_pop_ate, 3), \"\\n\") #> True Population ATE: 2.022 cat(\"Expected difference:\", 2 * (0.5 - 0.1), \"(due to effect modification)\\n\") #> Expected difference: 0.8 (due to effect modification)"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"understanding-the-weights","dir":"Articles","previous_headings":"Basic Transport Weights","what":"Understanding the Weights","title":"Transport Weights and Shadow Bias Analysis","text":"weights adjust different distribution effect modifier:","code":"# Examine weight values weight_summary <- data$sample_data %>%   group_by(z_sample) %>%   summarise(     n = n(),     prop = n/nrow(data$sample_data),     weight = first(weights)   )  print(weight_summary) #> # A tibble: 2 × 4 #>   z_sample     n  prop weight #>      <int> <int> <dbl>  <dbl> #> 1        0  1784 0.892  0.556 #> 2        1   216 0.108  5  # Visualize weight distribution ggplot(data$sample_data, aes(x = factor(z_sample), y = weights)) +   geom_boxplot() +   geom_point(alpha = 0.1) +   labs(x = \"Effect Modifier Z\", y = \"Transport Weight\",        title = \"Transport Weights by Effect Modifier Status\") +   theme_minimal()"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"transport-with-observational-shadows","dir":"Articles","previous_headings":"","what":"Transport with Observational Shadows","title":"Transport Weights and Shadow Bias Analysis","text":"Real-world data measurement error, missing data, distortions. margot_transport_analysis() function shows “shadows” affect transported estimates.","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"example-measurement-error","dir":"Articles","previous_headings":"Transport with Observational Shadows","what":"Example: Measurement Error","title":"Transport Weights and Shadow Bias Analysis","text":"Let’s see measurement error treatment variable affects transported estimates: Key insights: - Measurement error causes bias populations - bias may differ sample target populations - Effect modification can amplify dampen bias shadows","code":"# Analysis with measurement error result <- margot_transport_analysis(   n_sample = 2000,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_z = 0,   beta_az = 2,  # strong effect modification   apply_shadows = TRUE,   shadow_config = list(     measurement_error = TRUE,     missingness = FALSE   ),   seed = 2025 ) #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  # Compare bias in sample vs population print(result$bias_comparison) #>            Population True_ATE Observed_ATE         Bias Relative_Bias #> 1 Sample (unweighted) 1.156860     1.151296 -0.005564697    -0.4810172 #> 2   Target (weighted) 2.009835     1.992887 -0.016948557    -0.8432808"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"example-differential-missingness","dir":"Articles","previous_headings":"Transport with Observational Shadows","what":"Example: Differential Missingness","title":"Transport Weights and Shadow Bias Analysis","text":"Now let’s add outcome missingness depends effect modifier:","code":"# Analysis with differential missingness result2 <- margot_transport_analysis(   n_sample = 2000,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_z = 0,   beta_az = 2,   apply_shadows = TRUE,   shadow_config = list(     measurement_error = FALSE,     missingness = TRUE  # MAR depending on Z   ),   seed = 2025 )  print(result2$bias_comparison) #>            Population True_ATE Observed_ATE        Bias Relative_Bias #> 1 Sample (unweighted) 1.156860     1.110781 -0.04607905     -3.983113 #> 2   Target (weighted) 2.009835     1.872202 -0.13763343     -6.847995"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"combining-multiple-shadows","dir":"Articles","previous_headings":"Transport with Observational Shadows","what":"Combining Multiple Shadows","title":"Transport Weights and Shadow Bias Analysis","text":"Real data often multiple problems simultaneously:","code":"# Both measurement error and missingness result3 <- margot_transport_analysis(   n_sample = 2000,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_z = 0,   beta_az = 2,   apply_shadows = TRUE,   shadow_config = list(     measurement_error = TRUE,     missingness = TRUE   ),   seed = 2025 ) #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  # Extract detailed results cat(\"\\n=== Sample Population (Unweighted) ===\\n\") #>  #> === Sample Population (Unweighted) === print(result3$comparison_sample$comparison) #> Shadow Bias Comparison: #>  #>  estimand truth observed   bias relative_bias #>       ate 1.157    1.098 -0.059         -5.1% #>       att 1.157    1.098 -0.059         -5.1% #>       atu 1.157    1.098 -0.059         -5.1%  cat(\"\\n=== Target Population (Weighted) ===\\n\") #>  #> === Target Population (Weighted) === print(result3$comparison_population$comparison) #> Shadow Bias Comparison: #>  #>  estimand truth observed   bias relative_bias #>       ate  2.01    1.829 -0.181           -9% #>       att  2.01    1.829 -0.181           -9% #>       atu  2.01    1.829 -0.181           -9%"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"visualizing-shadow-effects-across-populations","dir":"Articles","previous_headings":"","what":"Visualizing Shadow Effects Across Populations","title":"Transport Weights and Shadow Bias Analysis","text":"Let’s create comprehensive comparison across different scenarios:","code":"# Run multiple scenarios scenarios <- expand.grid(   measurement_error = c(FALSE, TRUE),   missingness = c(FALSE, TRUE),   stringsAsFactors = FALSE )  # Add a \"clean\" scenario scenarios <- rbind(   data.frame(measurement_error = FALSE, missingness = FALSE),   scenarios[-1,] )  # Run analyses results_list <- list() for (i in 1:nrow(scenarios)) {   config <- list(     measurement_error = scenarios$measurement_error[i],     missingness = scenarios$missingness[i]   )      res <- margot_transport_analysis(     n_sample = 1500,     p_z_sample = 0.1,     p_z_population = 0.5,     beta_a = 1,     beta_az = 2,     apply_shadows = any(unlist(config)),     shadow_config = config,     seed = 2025 + i   )      if (any(unlist(config))) {     results_list[[i]] <- res$bias_comparison %>%       mutate(         scenario = paste(           ifelse(config$measurement_error, \"ME\", \"\"),           ifelse(config$missingness, \"Miss\", \"\"),           sep = \"+\"         )       )   } else {     # For clean data, create a comparison with no bias     results_list[[i]] <- data.frame(       Population = c(\"Sample (unweighted)\", \"Target (weighted)\"),       True_ATE = c(res$effects_sample$ate, res$effects_population$ate),       Observed_ATE = c(res$effects_sample$ate, res$effects_population$ate),       Bias = c(0, 0),       Relative_Bias = c(0, 0),       scenario = \"Clean\"     )   } } #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  # Combine results all_results <- do.call(rbind, results_list)  # Clean up scenario names all_results$scenario <- trimws(gsub(\"\\\\+$\", \"\", all_results$scenario)) all_results$scenario[all_results$scenario == \"\"] <- \"Clean\"  # Plot bias comparison ggplot(all_results, aes(x = scenario, y = Bias, fill = Population)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   geom_hline(yintercept = 0, linetype = \"dashed\") +   labs(     title = \"Shadow Bias in Sample vs Target Population\",     subtitle = \"Effect of measurement error (ME) and missingness (Miss) on transported estimates\",     x = \"Shadow Scenario\",     y = \"Bias in ATE Estimate\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"differential-bias","dir":"Articles","previous_headings":"Practical Implications","what":"1. Differential Bias","title":"Transport Weights and Shadow Bias Analysis","text":"Shadows can cause different amounts bias sample versus target population, especially effect modification:","code":"# Strong effect modification example strong_em <- margot_transport_analysis(   n_sample = 2000,   p_z_sample = 0.2,   p_z_population = 0.8,  # very different populations   beta_a = 0.5,   beta_az = 3,  # very strong effect modification   apply_shadows = TRUE,   shadow_config = list(measurement_error = TRUE, missingness = FALSE),   seed = 42 ) #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  # Weak effect modification example   weak_em <- margot_transport_analysis(   n_sample = 2000,   p_z_sample = 0.2,   p_z_population = 0.8,   beta_a = 2,   beta_az = 0.2,  # weak effect modification   apply_shadows = TRUE,   shadow_config = list(measurement_error = TRUE, missingness = FALSE),   seed = 42 ) #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  cat(\"Strong Effect Modification:\\n\") #> Strong Effect Modification: print(strong_em$bias_comparison[, c(\"Population\", \"Bias\", \"Relative_Bias\")]) #>            Population         Bias Relative_Bias #> 1 Sample (unweighted) -0.008673325    -0.7450808 #> 2   Target (weighted) -0.030736353    -1.0405595  cat(\"\\nWeak Effect Modification:\\n\") #>  #> Weak Effect Modification: print(weak_em$bias_comparison[, c(\"Population\", \"Bias\", \"Relative_Bias\")]) #>            Population        Bias Relative_Bias #> 1 Sample (unweighted) -0.01507733    -0.7279169 #> 2   Target (weighted) -0.02256382    -1.0338862"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"weight-diagnostics","dir":"Articles","previous_headings":"Practical Implications","what":"2. Weight Diagnostics","title":"Transport Weights and Shadow Bias Analysis","text":"Always check weights extreme values:","code":"# Generate example with more extreme weight scenario extreme_data <- simulate_ate_data_with_weights(   n_sample = 1000,   p_z_sample = 0.05,   # very few elderly in sample   p_z_population = 0.7  # mostly elderly in population )  # Weight diagnostics weights <- extreme_data$sample_data$weights cat(\"Weight Summary:\\n\") #> Weight Summary: cat(\"  Mean:\", mean(weights), \"\\n\") #>   Mean: 0.8357895 cat(\"  SD:\", sd(weights), \"\\n\") #>   SD: 2.617679 cat(\"  Min:\", min(weights), \"\\n\") #>   Min: 0.3157895 cat(\"  Max:\", max(weights), \"\\n\") #>   Max: 14 cat(\"  Effective Sample Size:\", sum(weights)^2 / sum(weights^2), \"\\n\") #>   Effective Sample Size: 92.59679  # Visualize weight distribution hist(weights, breaks = 30, main = \"Distribution of Transport Weights\",      xlab = \"Weight\", col = \"lightblue\") abline(v = 1, col = \"red\", lty = 2, lwd = 2)"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"combining-with-margot-sims-shadow-framework","dir":"Articles","previous_headings":"Practical Implications","what":"3. Combining with margot.sim’s Shadow Framework","title":"Transport Weights and Shadow Bias Analysis","text":"can create custom shadows transport analyses:","code":"# Start with basic transported data base_data <- simulate_ate_data_with_weights(   n_sample = 1000,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_az = 1.5 )  # Convert to margot format margot_data <- data.frame(   id = 1:1000,   b1 = base_data$sample_data$z_sample,   t0_a = base_data$sample_data$a_sample,   t2_y = base_data$sample_data$y_sample,   sampling_weight = base_data$sample_data$weights )  # Apply custom shadow configuration shadows <- list(   create_shadow(     type = \"measurement_error\",     params = list(       variables = \"t0_a\",       error_type = \"classical\",  # simple classical error for this example       sigma = 0.25     ),     name = \"treatment_measurement_error\"   ) )  # Apply shadows and analyze shadow_result <- apply_shadows_with_truth(margot_data, shadows) effects_comparison <- compare_shadow_effects(   shadow_result,   wave = 0,   outcome_wave = 2,   weights = margot_data$sampling_weight ) #> Warning in compute_causal_effects(extracted, exposure = \"a\", outcome = \"y\", : #> Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  print(effects_comparison$comparison) #> Shadow Bias Comparison: #>  #>  estimand truth observed   bias relative_bias #>       ate 1.494    1.419 -0.075           -5% #>       att 1.494    1.419 -0.075           -5% #>       atu 1.494    1.419 -0.075           -5%"},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Transport Weights and Shadow Bias Analysis","text":"Transport weights essential generalizing samples populations : 1. distribution effect modifiers differs 2. Treatment effects heterogeneous However, observational shadows complicate transport: - Measurement error missingness can bias transported estimates - bias may differ source target populations - Strong effect modification can amplify shadow bias margot.sim framework helps : - Generate realistic scenarios transport weights shadows - Evaluate different data problems affect generalizability - Design studies robust challenges","code":""},{"path":"https://go-bayes.github.io/margot.sim/articles/transport-weights-shadows.html","id":"key-takeaways","dir":"Articles","previous_headings":"Summary","what":"Key Takeaways","title":"Transport Weights and Shadow Bias Analysis","text":"Always check effect modification transporting results Evaluate weight distributions ensure stable estimates Consider shadows interact transport - bias can population-specific Use sensitivity analyses understand robustness transported estimates","code":""},{"path":"https://go-bayes.github.io/margot.sim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Bulbulia. Author, maintainer.","code":""},{"path":"https://go-bayes.github.io/margot.sim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bulbulia J (2025). margot.sim: Simulate Longitudinal Data Observational Shadows Monte Carlo Evaluation. R package version 0.1.2, https://go-bayes.github.io/margot.sim/.","code":"@Manual{,   title = {margot.sim: Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation},   author = {Joseph Bulbulia},   year = {2025},   note = {R package version 0.1.2},   url = {https://go-bayes.github.io/margot.sim/}, }"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"margotsim","dir":"","previous_headings":"","what":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"R package simulating longitudinal data realistic observational shadows (measurement error, missingness, selection bias) evaluating causal inference methods via Monte Carlo simulation.","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"can install development version margot.sim GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"go-bayes/margot.sim\")"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"whats-new-in-v012","dir":"","previous_headings":"","what":"What’s New in v0.1.2","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"6 new comprehensive vignettes covering shift interventions, censoring, heterogeneous effects, practical workflows Shadow bias comparison framework evaluating observational distortions affect causal estimates Transport weights integration generalizing samples target populations Enhanced documentation complete examples major functions","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"margot.sim extends margot package : Shadowing Framework - Apply observational distortions (measurement error, missingness, selection bias) Monte Carlo Framework - Systematically evaluate statistical estimators Flexible Distributions - Specify non-normal distributions Integrated Workflows - Complete simulation studies","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"","code":"library(margot.sim)  # Generate data with measurement error shadow <- create_shadow(   type = \"measurement_error\",   params = list(     variables = c(\"t1_l\", \"t2_l\"),     error_type = \"classical\",     sigma = 0.5   ) )  dat <- margot_simulate(   n = 1000,   waves = 3,   shadows = shadow )  # Run Monte Carlo evaluation mc_results <- margot_monte_carlo(   n_reps = 100,   n_per_rep = 500,   dgp_params = list(waves = 2),   shadows = list(shadow),   estimator_fn = function(data) {     fit <- lm(t3_y ~ t2_a + t1_l + b1, data = data)     list(       estimate = coef(fit)[\"t2_a\"],       se = sqrt(diag(vcov(fit)))[\"t2_a\"]     )   } )  print(mc_results)"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"available-shadow-types","dir":"","previous_headings":"Shadowing Framework","what":"Available Shadow Types","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Measurement Error: - Classical error (continuous variables) - Misclassification (binary variables) - Differential error - Dichotomization - Correlated errors Missing Data: Selection Bias:","code":"# Classical measurement error me_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     variables = \"t1_l\",     error_type = \"classical\",     sigma = 0.5   ) )  # Misclassification for binary variables misclass_shadow <- create_shadow(   type = \"measurement_error\",    params = list(     variables = \"t1_a\",     error_type = \"misclassification\",     sensitivity = 0.85,  # P(observed=1|true=1)     specificity = 0.90   # P(observed=0|true=0)   ) ) # Item-level missingness miss_shadow <- create_item_missingness_shadow(   variables = c(\"t1_l\", \"t2_l\"),   missing_rate = 0.2,   missing_mechanism = \"MAR\",   dependent_vars = \"b1\" ) # Positivity violations pos_shadow <- create_positivity_shadow(   exposure_var = \"t1_a\",   filter_fn = function(data) {     # Treatment only possible if risk score <= 2     data$b1 + data$b2 <= 2   } )"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"combining-shadows","dir":"","previous_headings":"Shadowing Framework","what":"Combining Shadows","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"","code":"# Apply multiple shadows shadows <- list(me_shadow, miss_shadow) dat <- margot_simulate(n = 1000, waves = 3, shadows = shadows)  # Or apply post-hoc shadowed_data <- apply_shadows(dat, shadows)"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"monte-carlo-framework","dir":"","previous_headings":"","what":"Monte Carlo Framework","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Evaluate estimator performance various conditions:","code":"# Define estimator ipw_estimator <- function(data) {   # Fit propensity score model   ps_model <- glm(t1_a ~ b1 + b2 + t0_l,                    data = data,                    family = binomial)   ps <- predict(ps_model, type = \"response\")      # Calculate weights   weights <- ifelse(data$t1_a == 1, 1/ps, 1/(1-ps))      # Outcome model   fit <- lm(t2_y ~ t1_a, weights = weights, data = data)      list(     estimate = coef(fit)[\"t1_a\"],     se = sqrt(diag(vcov(fit)))[\"t1_a\"],     converged = TRUE   ) }  # Run simulation results <- margot_monte_carlo(   n_reps = 500,   n_per_rep = 1000,   dgp_params = list(     waves = 2,     params = list(a_lag_y_coef = 0.3)  # True effect   ),   shadows = list(me_shadow, miss_shadow),   estimator_fn = ipw_estimator,   truth_fn = function(data) 0.3,   parallel = TRUE,   n_cores = 4 )  # View results print(results) plot(results, type = \"histogram\")"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"performance-metrics","dir":"","previous_headings":"Monte Carlo Framework","what":"Performance Metrics","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"framework automatically calculates: - Bias relative bias - Variance MSE - Coverage confidence intervals - Convergence rates - Sample size retention","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"complete-example","dir":"","previous_headings":"","what":"Complete Example","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"","code":"# Compare estimators under measurement error comparison <- example_measurement_error_comparison()  # Full workflow demonstration results <- example_complete_workflow()"},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"custom-shadows","dir":"","previous_headings":"Advanced Usage","what":"Custom Shadows","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Create shadow types:","code":"# Define apply method apply_shadow.my_custom_shadow <- function(data, shadow, ...) {   # Your shadowing logic here   data }  # Use it shadow <- structure(   list(type = \"my_custom\", params = list(...)),   class = c(\"my_custom_shadow\", \"margot_shadow\") )"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"flexible-distributions","dir":"","previous_headings":"Advanced Usage","what":"Flexible Distributions","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"","code":"# Non-normal baseline gamma_dist <- create_distribution(   \"gamma\",   params = list(shape = 2, rate = 1) )  # Use in simulation dat <- margot_simulate_flex(   n = 1000,   distributions = list(baseline = gamma_dist) )"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"detailed documentation, see:","code":"# Package documentation ?margot.sim  # Key functions ?create_shadow ?margot_monte_carlo ?margot_simulate ?simulate_ate_data_with_weights  # Vignettes vignette(\"basic-simulation\", package = \"margot.sim\") vignette(\"applying-shadows\", package = \"margot.sim\")  vignette(\"monte-carlo-simple\", package = \"margot.sim\") vignette(\"shift-interventions\", package = \"margot.sim\") vignette(\"shift-weights\", package = \"margot.sim\") vignette(\"censoring-effect-mod\", package = \"margot.sim\") vignette(\"heterogeneous-effects\", package = \"margot.sim\") vignette(\"advanced-shift-interventions\", package = \"margot.sim\") vignette(\"misclassification-bias\", package = \"margot.sim\") vignette(\"practical-workflow\", package = \"margot.sim\") vignette(\"transport-weights-shadows\", package = \"margot.sim\")"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"transport-weights-example","dir":"","previous_headings":"","what":"Transport Weights Example","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"margot.sim supports transportability analyses need generalize study sample target population:","code":"# Simulate data where effect modifier distribution differs # between sample (10% elderly) and population (50% elderly) data <- simulate_ate_data_with_weights(   n_sample = 1000,   p_z_sample = 0.1,      # 10% elderly in sample   p_z_population = 0.5,   # 50% elderly in population     beta_a = 1,            # base treatment effect   beta_az = 2,           # treatment works better in elderly   seed = 2025 )  # Compare effects sample_ate <- with(data$sample_data,   mean(y_sample[a_sample == 1]) - mean(y_sample[a_sample == 0]))  weighted_ate <- with(data$sample_data, {   weighted.mean(y_sample[a_sample == 1], weights[a_sample == 1]) -   weighted.mean(y_sample[a_sample == 0], weights[a_sample == 0]) })  cat(\"Sample ATE:\", round(sample_ate, 2), \"\\n\") cat(\"Population ATE (weighted):\", round(weighted_ate, 2), \"\\n\")"},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Contributions welcome. Please: Fork repository Create feature branch Add tests new functionality Submit pull request","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"MIT License","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"use margot.sim research, please cite:","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"why-do-we-need-a-beefed-up-simulator","dir":"","previous_headings":"","what":"Why do we need a beefed-up simulator?","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"Real studies seldom hand us tidy, truth-telling data. Instead get scratches dents: * Missing answers. People skip survey items drop follow-ups. * Blurred measurements. Blood-pressure cuffs mis-read, self-reports round . * Uneven treatment chances. groups far (far less) likely receive exposure ’re studying, making “apples--apples” comparisons tricky. Traditional toy simulations gloss hassles, method looks brilliant paper can wilt practice. : Mirror messiness. Simulating truth adding “shadows” let us layer realistic missing data, measurement error, selection bias. means virtual datasets behave like ones sitting analyst’s desk. Stress-test causal tools. can ask, “method still give right answer half blood-pressure readings 5 mmHg? drop-twice common among treated?” Running thousands scenarios silico faster, cheaper, safer discovering problem costly field study. Keep truth separate distortion. generating “clean” data first adding shadow, always know ground truth. makes painless check far estimator strays smoke mirrors appear. Plug causal question users can tailor simulations exact claim plan make. Build confidence. Showing method works sharp, realistic tests—especially can gives us (journal referees) fewer reasons worry. margot.sim package provides simulation framework quantify statistical estimators perform data fed shadows true causal process. concept nods Plato’s “Allegory Cave,” prisoners mistake shadows cast walls reality (Bloom, Kirsch, et al. 1968). margot.sim gives us access simulated ground truth can evaluate far data modelling choices can mislead us. framework’s power comes consistent architecture maintains clean separation true data-generating process distorted data investigators observe, allowing principled evaluation statistical methods face data limitations inevitably arise science (Bulbulia 2024).","code":""},{"path":"https://go-bayes.github.io/margot.sim/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Simulate Longitudinal Data with Observational Shadows and Monte Carlo Evaluation","text":"","code":"citation(\"margot.sim\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_mask_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare data before and after masking — analyse_mask_effects","title":"Compare data before and after masking — analyse_mask_effects","text":"Compare data masking","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_mask_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare data before and after masking — analyse_mask_effects","text":"","code":"analyse_mask_effects(original, masked, variables = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_mask_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare data before and after masking — analyse_mask_effects","text":"original Original data masked Masked data variables Variables compare","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_mask_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare data before and after masking — analyse_mask_effects","text":"Summary mask effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_shadow_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare data before and after shadowing — analyse_shadow_effects","title":"Compare data before and after shadowing — analyse_shadow_effects","text":"Compare data shadowing","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_shadow_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare data before and after shadowing — analyse_shadow_effects","text":"","code":"analyse_shadow_effects(original, shadowed, variables = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_shadow_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare data before and after shadowing — analyse_shadow_effects","text":"original Original data shadowed Shadowed data variables Variables compare","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyse_shadow_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare data before and after shadowing — analyse_shadow_effects","text":"Summary shadow effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyze_heterogeneity.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze heterogeneous effects from simulation output — analyze_heterogeneity","title":"Analyze heterogeneous effects from simulation output — analyze_heterogeneity","text":"Helper function analyze treatment effect heterogeneity margot_simulate output custom heterogeneity parameters.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyze_heterogeneity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze heterogeneous effects from simulation output — analyze_heterogeneity","text":"","code":"analyze_heterogeneity(   data,   treatment_wave = 2,   outcome_wave = 3,   effect_modifiers = c(\"b1\", \"b2\", \"b3\", \"t0_y\", \"t0_a\") )"},{"path":"https://go-bayes.github.io/margot.sim/reference/analyze_heterogeneity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze heterogeneous effects from simulation output — analyze_heterogeneity","text":"data Output margot_simulate treatment_wave Wave treatment analyze (default 2) outcome_wave Wave outcome analyze (default 3) effect_modifiers Character vector baseline variables test","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/analyze_heterogeneity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze heterogeneous effects from simulation output — analyze_heterogeneity","text":"Data frame heterogeneity statistics","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_baseline_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply baseline selection — apply_baseline_selection","title":"Apply baseline selection — apply_baseline_selection","text":"Apply baseline selection","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_baseline_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply baseline selection — apply_baseline_selection","text":"","code":"apply_baseline_selection(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply censoring to complete data — apply_censoring_post_hoc","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"Takes data generated margot_simulate applies censoring based stored censoring probabilities custom censoring function.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"","code":"apply_censoring_post_hoc(   complete_data,   censoring_type = c(\"built_in\", \"custom\"),   censoring_function = NULL,   apply_process_function = TRUE,   ... )"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"complete_data Data frame margot_simulate \"margot_meta\" attribute censoring_type Character: \"built_in\" uses stored probabilities, \"custom\" uses custom function censoring_function Function custom censoring (required censoring_type = \"custom\"). take data frame return censoring applied. apply_process_function Logical. Apply margot_process_longitudinal create -lost indicators? Default: TRUE ... Additional arguments passed margot_process_longitudinal custom censoring_function","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"Data frame censoring applied indicators created. returned   object maintains \"margot_meta\" attribute additional censoring information.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"## Censoring Logic subject censored wave k: 1. variables wave k onwards set NA 2. subject considered \"lost follow-\" point 3. future data observed subject ## -Lost Indicators `apply_process_function = TRUE`, function creates \"not_lost\" indicators: - `t0_not_lost_following_wave`: 1 subject data t1, 0 otherwise - `t1_not_lost_following_wave`: 1 subject data t2, 0 otherwise - ... indicators useful : - Inverse probability censoring weights (IPCW) - Determining -risk population wave - Creating proper denominators survival analyses ## Important Note Unlike implementations, function carry forward last observations. subject censored: - Future values set NA (carried forward) - represents true missingness due dropout - Methods like IPCW multiple imputation used analysis","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_censoring_post_hoc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply censoring to complete data — apply_censoring_post_hoc","text":"","code":"# Generate complete data complete <- margot_simulate(n = 1000, waves = 3,                             censoring = list(rate = 0.2))  # Apply censoring  observed <- apply_censoring_post_hoc(complete)  # Check censoring rates table(observed$t0_not_lost_following_wave) #>  #>   0   1  #> 395 605  table(observed$t1_not_lost_following_wave) #>  #>   0   1  #> 518 482"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_classical_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply classical measurement error — apply_classical_error","title":"Apply classical measurement error — apply_classical_error","text":"Apply classical measurement error","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_classical_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply classical measurement error — apply_classical_error","text":"","code":"apply_classical_error(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_correlated_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply correlated measurement error — apply_correlated_error","title":"Apply correlated measurement error — apply_correlated_error","text":"Apply correlated measurement error","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_correlated_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply correlated measurement error — apply_correlated_error","text":"","code":"apply_correlated_error(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_dichotomisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dichotomisation — apply_dichotomisation","title":"Apply dichotomisation — apply_dichotomisation","text":"Apply dichotomisation","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_dichotomisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dichotomisation — apply_dichotomisation","text":"","code":"apply_dichotomisation(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_differential_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply differential measurement error — apply_differential_error","title":"Apply differential measurement error — apply_differential_error","text":"Apply differential measurement error","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_differential_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply differential measurement error — apply_differential_error","text":"","code":"apply_differential_error(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.censoring_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply censoring mask — apply_mask.censoring_mask","title":"Apply censoring mask — apply_mask.censoring_mask","text":"Apply censoring mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.censoring_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply censoring mask — apply_mask.censoring_mask","text":"","code":"# S3 method for class 'censoring_mask' apply_mask(data, mask, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.combined_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply combined mask — apply_mask.combined_mask","title":"Apply combined mask — apply_mask.combined_mask","text":"Apply combined mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.combined_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply combined mask — apply_mask.combined_mask","text":"","code":"# S3 method for class 'combined_mask' apply_mask(data, mask, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a mask to data — apply_mask","title":"Apply a mask to data — apply_mask","text":"Apply mask data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a mask to data — apply_mask","text":"","code":"apply_mask(data, mask, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a mask to data — apply_mask","text":"data Data frame apply mask mask mask object created create_mask() ... Additional arguments passed specific mask methods","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a mask to data — apply_mask","text":"Modified data frame","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.item_missingness_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply item-level missingness mask — apply_mask.item_missingness_mask","title":"Apply item-level missingness mask — apply_mask.item_missingness_mask","text":"Apply item-level missingness mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.item_missingness_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply item-level missingness mask — apply_mask.item_missingness_mask","text":"","code":"# S3 method for class 'item_missingness_mask' apply_mask(data, mask, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.measurement_error_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply measurement error mask — apply_mask.measurement_error_mask","title":"Apply measurement error mask — apply_mask.measurement_error_mask","text":"Apply measurement error mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.measurement_error_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply measurement error mask — apply_mask.measurement_error_mask","text":"","code":"# S3 method for class 'measurement_error_mask' apply_mask(data, mask, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.positivity_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply positivity violation mask — apply_mask.positivity_mask","title":"Apply positivity violation mask — apply_mask.positivity_mask","text":"Apply positivity violation mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.positivity_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply positivity violation mask — apply_mask.positivity_mask","text":"","code":"# S3 method for class 'positivity_mask' apply_mask(data, mask, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.selection_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply selection bias mask — apply_mask.selection_mask","title":"Apply selection bias mask — apply_mask.selection_mask","text":"Apply selection bias mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_mask.selection_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply selection bias mask — apply_mask.selection_mask","text":"","code":"# S3 method for class 'selection_mask' apply_mask(data, mask, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_masks.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply multiple masks sequentially — apply_masks","title":"Apply multiple masks sequentially — apply_masks","text":"Apply multiple masks sequentially","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_masks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply multiple masks sequentially — apply_masks","text":"","code":"apply_masks(data, masks, verbose = FALSE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_masks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply multiple masks sequentially — apply_masks","text":"data Data frame masks List mask objects verbose Logical, print progress?","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_masks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply multiple masks sequentially — apply_masks","text":"Data frame masks applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_misclassification.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply misclassification to binary variables — apply_misclassification","title":"Apply misclassification to binary variables — apply_misclassification","text":"Apply misclassification binary variables","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_misclassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply misclassification to binary variables — apply_misclassification","text":"","code":"apply_misclassification(data, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.censoring_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply censoring shadow — apply_shadow.censoring_shadow","title":"Apply censoring shadow — apply_shadow.censoring_shadow","text":"Apply censoring shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.censoring_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply censoring shadow — apply_shadow.censoring_shadow","text":"","code":"# S3 method for class 'censoring_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.censoring_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply censoring shadow — apply_shadow.censoring_shadow","text":"data Data frame apply shadow shadow censoring shadow object created create_shadow() ... Additional arguments passed apply_censoring_post_hoc","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.censoring_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply censoring shadow — apply_shadow.censoring_shadow","text":"Modified data frame censoring applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.combined_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply combined shadow — apply_shadow.combined_shadow","title":"Apply combined shadow — apply_shadow.combined_shadow","text":"Apply combined shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.combined_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply combined shadow — apply_shadow.combined_shadow","text":"","code":"# S3 method for class 'combined_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.combined_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply combined shadow — apply_shadow.combined_shadow","text":"data Data frame apply shadow shadow combined shadow object created combine_shadows() ... Additional arguments passed apply_shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.combined_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply combined shadow — apply_shadow.combined_shadow","text":"Modified data frame component shadows applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a shadow to data — apply_shadow","title":"Apply a shadow to data — apply_shadow","text":"Apply shadow data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a shadow to data — apply_shadow","text":"","code":"apply_shadow(data, shadow, preserve_truth = FALSE, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a shadow to data — apply_shadow","text":"data Data frame apply shadow shadow shadow object created create_shadow() preserve_truth Logical, whether preserve original values (default FALSE) ... Additional arguments passed specific shadow methods","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a shadow to data — apply_shadow","text":"Modified data frame","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.item_missingness_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply item-level missingness shadow — apply_shadow.item_missingness_shadow","title":"Apply item-level missingness shadow — apply_shadow.item_missingness_shadow","text":"Apply item-level missingness shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.item_missingness_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply item-level missingness shadow — apply_shadow.item_missingness_shadow","text":"","code":"# S3 method for class 'item_missingness_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.item_missingness_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply item-level missingness shadow — apply_shadow.item_missingness_shadow","text":"data Data frame apply shadow shadow item missingness shadow object created create_item_missingness_shadow() ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.item_missingness_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply item-level missingness shadow — apply_shadow.item_missingness_shadow","text":"Modified data frame missing values introduced","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.measurement_error_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply measurement error shadow — apply_shadow.measurement_error_shadow","title":"Apply measurement error shadow — apply_shadow.measurement_error_shadow","text":"Apply measurement error shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.measurement_error_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply measurement error shadow — apply_shadow.measurement_error_shadow","text":"","code":"# S3 method for class 'measurement_error_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.measurement_error_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply measurement error shadow — apply_shadow.measurement_error_shadow","text":"data Data frame apply shadow shadow measurement error shadow object created create_shadow() ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.measurement_error_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply measurement error shadow — apply_shadow.measurement_error_shadow","text":"Modified data frame measurement error applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.positivity_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply positivity violation shadow — apply_shadow.positivity_shadow","title":"Apply positivity violation shadow — apply_shadow.positivity_shadow","text":"Apply positivity violation shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.positivity_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply positivity violation shadow — apply_shadow.positivity_shadow","text":"","code":"# S3 method for class 'positivity_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.positivity_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply positivity violation shadow — apply_shadow.positivity_shadow","text":"data Data frame apply shadow shadow positivity shadow object created create_positivity_shadow() ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.positivity_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply positivity violation shadow — apply_shadow.positivity_shadow","text":"Filtered data frame positivity violations removed","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.selection_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply selection bias shadow — apply_shadow.selection_shadow","title":"Apply selection bias shadow — apply_shadow.selection_shadow","text":"Apply selection bias shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.selection_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply selection bias shadow — apply_shadow.selection_shadow","text":"","code":"# S3 method for class 'selection_shadow' apply_shadow(data, shadow, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.selection_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply selection bias shadow — apply_shadow.selection_shadow","text":"data Data frame apply shadow shadow selection shadow object created create_shadow() ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadow.selection_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply selection bias shadow — apply_shadow.selection_shadow","text":"Subset data frame selection bias applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply multiple shadows sequentially — apply_shadows","title":"Apply multiple shadows sequentially — apply_shadows","text":"Apply multiple shadows sequentially","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply multiple shadows sequentially — apply_shadows","text":"","code":"apply_shadows(data, shadows, verbose = FALSE, preserve_truth = FALSE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply multiple shadows sequentially — apply_shadows","text":"data Data frame shadows List shadow objects verbose Logical, print progress? preserve_truth Logical, whether preserve original values (default FALSE)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply multiple shadows sequentially — apply_shadows","text":"Data frame shadows applied","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_truth.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for Shadow Application with Dual Data Architecture — apply_shadows_with_truth","title":"Wrapper for Shadow Application with Dual Data Architecture — apply_shadows_with_truth","text":"function provides unified interface applying shadows optionally maintaining complete copy original data.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_truth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for Shadow Application with Dual Data Architecture — apply_shadows_with_truth","text":"","code":"apply_shadows_with_truth(   data,   shadows,   preserve_complete = TRUE,   verbose = FALSE,   ... )"},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_truth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for Shadow Application with Dual Data Architecture — apply_shadows_with_truth","text":"data Data frame apply shadows shadows Shadow object list shadow objects preserve_complete Logical, whether return true observed data verbose Logical, print progress messages ... Additional arguments passed shadow methods","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/apply_shadows_with_truth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for Shadow Application with Dual Data Architecture — apply_shadows_with_truth","text":"preserve_complete FALSE, returns shadowed data.   preserve_complete TRUE, returns list : data_true: Original data shadows data_observed: Data shadows applied shadows_applied: List applied shadow names","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/calculate_performance_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate performance metrics from MC results — calculate_performance_metrics","title":"Calculate performance metrics from MC results — calculate_performance_metrics","text":"Calculate performance metrics MC results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/calculate_performance_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate performance metrics from MC results — calculate_performance_metrics","text":"","code":"calculate_performance_metrics(results_df)"},{"path":"https://go-bayes.github.io/margot.sim/reference/check_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a variable follows a specified distribution — check_distribution","title":"Check if a variable follows a specified distribution — check_distribution","text":"Check variable follows specified distribution","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a variable follows a specified distribution — check_distribution","text":"","code":"check_distribution(x, dist, plot = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/check_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a variable follows a specified distribution — check_distribution","text":"x Vector values dist Distribution specification family name plot Logical, create diagnostic plot?","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a variable follows a specified distribution — check_distribution","text":"List test results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positive_definite.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and fix positive definiteness of a covariance matrix — check_positive_definite","title":"Check and fix positive definiteness of a covariance matrix — check_positive_definite","text":"Check fix positive definiteness covariance matrix","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positive_definite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and fix positive definiteness of a covariance matrix — check_positive_definite","text":"","code":"check_positive_definite(mat, tol = 1e-08)"},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Check positivity of treatment probabilities — check_positivity","title":"Check positivity of treatment probabilities — check_positivity","text":"Check positivity treatment probabilities","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/check_positivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check positivity of treatment probabilities — check_positivity","text":"","code":"check_positivity(treatment_probs, trt_name, time, min_prob = 0.01)"},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_masks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complex mask combining multiple distortions — combine_masks","title":"Create a complex mask combining multiple distortions — combine_masks","text":"Create complex mask combining multiple distortions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_masks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complex mask combining multiple distortions — combine_masks","text":"","code":"combine_masks(..., name = \"combined_mask\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_masks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complex mask combining multiple distortions — combine_masks","text":"... Individual mask objects combine name Name combined mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_masks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complex mask combining multiple distortions — combine_masks","text":"composite mask object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_shadows.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complex shadow combining multiple distortions — combine_shadows","title":"Create a complex shadow combining multiple distortions — combine_shadows","text":"Create complex shadow combining multiple distortions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_shadows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complex shadow combining multiple distortions — combine_shadows","text":"","code":"combine_shadows(..., name = \"combined_shadow\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_shadows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complex shadow combining multiple distortions — combine_shadows","text":"... Individual shadow objects combine name Name combined shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/combine_shadows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complex shadow combining multiple distortions — combine_shadows","text":"composite shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_mc_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare multiple Monte Carlo results — compare_mc_results","title":"Compare multiple Monte Carlo results — compare_mc_results","text":"Compare multiple Monte Carlo results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_mc_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare multiple Monte Carlo results — compare_mc_results","text":"","code":"compare_mc_results(..., names = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_mc_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare multiple Monte Carlo results — compare_mc_results","text":"... Multiple margot_mc_results objects names Optional names result set","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_mc_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare multiple Monte Carlo results — compare_mc_results","text":"Comparison object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","title":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","text":"Compares causal effect estimates true (unshadowed) data estimates observed (shadowed) data quantify bias introduced observational distortions.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","text":"","code":"compare_shadow_bias(effects_true, effects_observed, include_relative = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","text":"effects_true list true causal effects (compute_causal_effects) effects_observed list observed causal effects (compute_causal_effects) include_relative Logical, whether include relative bias (default TRUE)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","text":"data frame bias metrics estimand: estimand: causal estimand (ate, att, atu) truth: True value estimand observed: Observed value estimand bias: Absolute bias (observed - truth) relative_bias: Relative bias percentage truth","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Shadow Bias in Causal Effects — compare_shadow_bias","text":"","code":"# Simulate true and observed effects true_effects <- list(ate = 0.5, att = 0.6, atu = 0.4) obs_effects <- list(ate = 0.3, att = 0.35, atu = 0.25)  # Compare bias bias_summary <- compare_shadow_bias(true_effects, obs_effects) print(bias_summary) #> Shadow Bias Comparison: #>  #>  estimand truth observed  bias relative_bias #>       ate   0.5     0.30 -0.20          -40% #>       att   0.6     0.35 -0.25        -41.7% #>       atu   0.4     0.25 -0.15        -37.5%"},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Effects Before and After Shadows — compare_shadow_effects","title":"Compare Effects Before and After Shadows — compare_shadow_effects","text":"Convenience function computes causal effects true observed data shadow result object.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Effects Before and After Shadows — compare_shadow_effects","text":"","code":"compare_shadow_effects(   shadow_result,   wave = 1,   outcome_wave = NULL,   treatment_name = \"a\",   outcome_name = \"y\",   estimands = c(\"ate\", \"att\", \"atu\"),   ... )"},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Effects Before and After Shadows — compare_shadow_effects","text":"shadow_result margot_shadow_result object wave Treatment wave outcome_wave Outcome wave treatment_name Treatment variable name outcome_name Outcome variable name estimands estimands compute ... Additional arguments passed compute_effects_from_sim","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compare_shadow_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Effects Before and After Shadows — compare_shadow_effects","text":"list : effects_true: Effects true data effects_observed: Effects observed data comparison: Bias comparison table","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_causal_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Causal Effects from Data — compute_causal_effects","title":"Compute Causal Effects from Data — compute_causal_effects","text":"Calculates various causal estimands (ATE, ATT, ATU) simulated observed data. function assumes data contains potential outcomes can used compute contrasts treatment groups.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_causal_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Causal Effects from Data — compute_causal_effects","text":"","code":"compute_causal_effects(   data,   exposure,   outcome,   covariates = NULL,   estimands = c(\"ate\", \"att\", \"atu\"),   weights = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_causal_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Causal Effects from Data — compute_causal_effects","text":"data data frame containing outcome exposure variables exposure Character string naming exposure/treatment variable outcome Character string naming outcome variable covariates Character vector covariate names (currently unused, future HTE) estimands Character vector specifying estimands compute weights Optional weights observation","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_causal_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Causal Effects from Data — compute_causal_effects","text":"list containing requested causal effects: ate: Average Treatment Effect E[Y(1) - Y(0)] att: Average Treatment Treated E[Y(1) - Y(0) | = 1] atu: Average Treatment Untreated E[Y(1) - Y(0) | = 0]","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_causal_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Causal Effects from Data — compute_causal_effects","text":"","code":"# Generate simple data set.seed(123) n <- 1000 data <- data.frame(   a = rbinom(n, 1, 0.5),   y = rnorm(n, mean = 2) ) data$y[data$a == 1] <- data$y[data$a == 1] + 0.5  # True ATE = 0.5  # Compute effects effects <- compute_causal_effects(data, exposure = \"a\", outcome = \"y\") print(effects) #> Causal Effect Estimates: #>   N (total): 1000 [Treated: 493, Control: 507] #>   ATE: 0.503 #>   ATT: 0.503 #>   ATU: 0.503"},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_effects_from_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Causal Effects from Margot Simulation Data — compute_effects_from_sim","title":"Compute Causal Effects from Margot Simulation Data — compute_effects_from_sim","text":"Wrapper function extracts treatment outcome margot simulation data structure computes causal effects.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_effects_from_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Causal Effects from Margot Simulation Data — compute_effects_from_sim","text":"","code":"compute_effects_from_sim(   sim_data,   wave = 1,   outcome_wave = NULL,   treatment_name = \"a\",   outcome_name = \"y\",   estimands = c(\"ate\", \"att\", \"atu\"),   weights = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_effects_from_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Causal Effects from Margot Simulation Data — compute_effects_from_sim","text":"sim_data Data margot_simulate margot_simulate_causal wave Treatment wave (default 1) outcome_wave Outcome wave (default last wave) treatment_name Name treatment variable outcome_name Name outcome variable estimands estimands compute weights Optional weights","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_effects_from_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Causal Effects from Margot Simulation Data — compute_effects_from_sim","text":"margot_effects object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_true_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute true causal effects from simulated data — compute_true_effects","title":"Compute true causal effects from simulated data — compute_true_effects","text":"Compute true causal effects simulated data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/compute_true_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute true causal effects from simulated data — compute_true_effects","text":"","code":"compute_true_effects(data_list, outcome_name, estimand = \"ATE\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Flexible Distribution Specifications for margot — create_distribution","title":"Flexible Distribution Specifications for margot — create_distribution","text":"file implements system specifying custom distributions data generating process, allowing skewed, heavy-tailed, non-normal distributions. Create distribution specification","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flexible Distribution Specifications for margot — create_distribution","text":"","code":"create_distribution(   family,   params = list(),   link = NULL,   inverse_link = NULL,   name = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flexible Distribution Specifications for margot — create_distribution","text":"family Distribution family name custom function params Named list distribution parameters link Link function transforming linear predictor scale inverse_link Inverse link function name Optional name distribution","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flexible Distribution Specifications for margot — create_distribution","text":"Distribution specification object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flexible Distribution Specifications for margot — create_distribution","text":"","code":"# Normal distribution dist_normal <- create_distribution(\"normal\", params = list(sd = 1))  # Log-normal via transformation dist_lognormal <- create_distribution(   \"normal\",   params = list(sd = 0.5),   inverse_link = exp )  # Beta distribution for bounded variables dist_beta <- create_distribution(   \"beta\",   params = list(shape1 = 2, shape2 = 5) )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_diagnostic_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create diagnostic plot for distribution — create_distribution_diagnostic_plot","title":"Create diagnostic plot for distribution — create_distribution_diagnostic_plot","text":"Create diagnostic plot distribution","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_diagnostic_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create diagnostic plot for distribution — create_distribution_diagnostic_plot","text":"","code":"create_distribution_diagnostic_plot(x, family)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of distributions for different variable types — create_distribution_set","title":"Create a set of distributions for different variable types — create_distribution_set","text":"Create set distributions different variable types","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of distributions for different variable types — create_distribution_set","text":"","code":"create_distribution_set(   baseline = NULL,   exposure = NULL,   outcome = NULL,   confounder = NULL,   error = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of distributions for different variable types — create_distribution_set","text":"baseline Distribution baseline covariates exposure Distribution exposure/treatment outcome Distribution outcome confounder Distribution time-varying confounders error Distribution error terms","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_distribution_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of distributions for different variable types — create_distribution_set","text":"Distribution set object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_ips_intervention.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Incremental propensity score interventions — create_ips_intervention","title":"Example: Incremental propensity score interventions — create_ips_intervention","text":"Example: Incremental propensity score interventions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_ips_intervention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Incremental propensity score interventions — create_ips_intervention","text":"","code":"create_ips_intervention(delta, start_wave = 1)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_ips_intervention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example: Incremental propensity score interventions — create_ips_intervention","text":"delta Multiplicative shift odds treatment start_wave Wave start intervention","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_ips_intervention.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Incremental propensity score interventions — create_ips_intervention","text":"Function suitable use intervention margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_ips_intervention.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example: Incremental propensity score interventions — create_ips_intervention","text":"","code":"# Increase odds of treatment by 20% ips_intervention <- create_ips_intervention(delta = 1.2)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Create item-level missingness mask — create_item_missingness_mask","title":"Create item-level missingness mask — create_item_missingness_mask","text":"Create item-level missingness mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create item-level missingness mask — create_item_missingness_mask","text":"","code":"create_item_missingness_mask(   variables,   missing_rate,   missing_mechanism = c(\"MCAR\", \"MAR\", \"MNAR\"),   dependent_vars = NULL,   name = \"item_missingness\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create item-level missingness mask — create_item_missingness_mask","text":"variables Character vector variables apply missingness missing_rate Numeric. Overall missing rate (0-1) missing_mechanism Character. One \"MCAR\", \"MAR\", \"MNAR\" dependent_vars Character vector. Variables influence missingness (MAR/MNAR) name Optional name mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create item-level missingness mask — create_item_missingness_mask","text":"Item missingness mask object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create item-level missingness shadow — create_item_missingness_shadow","title":"Create item-level missingness shadow — create_item_missingness_shadow","text":"Create item-level missingness shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create item-level missingness shadow — create_item_missingness_shadow","text":"","code":"create_item_missingness_shadow(   variables,   missing_rate,   missing_mechanism = c(\"MCAR\", \"MAR\", \"MNAR\"),   dependent_vars = NULL,   name = \"item_missingness\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create item-level missingness shadow — create_item_missingness_shadow","text":"variables Character vector variables apply missingness missing_rate Numeric. Overall missing rate (0-1) missing_mechanism Character. One \"MCAR\", \"MAR\", \"MNAR\" dependent_vars Character vector. Variables influence missingness (MAR/MNAR) name Optional name shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_item_missingness_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create item-level missingness shadow — create_item_missingness_shadow","text":"Item missingness shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_lmtp_style_shifts.html","id":null,"dir":"Reference","previous_headings":"","what":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","title":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","text":"Example shift interventions matching lmtp style","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_lmtp_style_shifts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","text":"","code":"create_lmtp_style_shifts(   min_score = 1,   max_score = 7,   baseline_wave = 0,   shift_wave = 1 )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_lmtp_style_shifts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","text":"min_score Minimum score value max_score Maximum score value baseline_wave Wave keep observed (typically 0) shift_wave Wave apply shift (typically 1)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_lmtp_style_shifts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","text":"List containing shift_up shift_down intervention functions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_lmtp_style_shifts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example shift interventions matching lmtp style — create_lmtp_style_shifts","text":"","code":"# Create lmtp-style shift interventions shifts <- create_lmtp_style_shifts(   min_score = 1,   max_score = 7,   baseline_wave = 0,   shift_wave = 1 )  # Use in margot_simulate_causal if (FALSE) { # \\dontrun{ results <- margot_simulate_causal(   n = 1000,   waves = 2,   treatments = \"a\",   interventions = list(     natural = function(data, time, trt) data[[trt]],     shift_up = shifts$shift_up,     shift_down = shifts$shift_down   ) ) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Masking Framework for margot — create_mask","title":"Masking Framework for margot — create_mask","text":"file implements unified masking framework applying various observational distortions simulated data, including censoring, measurement error, selection bias. Create mask object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Masking Framework for margot — create_mask","text":"","code":"create_mask(   type = c(\"censoring\", \"measurement_error\", \"selection\", \"item_missingness\",     \"positivity\"),   params = list(),   name = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Masking Framework for margot — create_mask","text":"type Character string specifying mask type: \"censoring\", \"measurement_error\", \"selection\" params List parameters specific mask type name Optional name mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Masking Framework for margot — create_mask","text":"mask object class attributes method dispatch","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Masking Framework for margot — create_mask","text":"","code":"# Create a measurement error mask mask <- create_mask(   type = \"measurement_error\",   params = list(     variables = c(\"t1_l\", \"t2_l\"),     error_type = \"classical\",     sigma = 0.5   ) )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mtp_intervention.html","id":null,"dir":"Reference","previous_headings":"","what":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","title":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","text":"Creates interventions depend natural value treatment, similar lmtp package approach.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mtp_intervention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","text":"","code":"create_mtp_intervention(policy, covariate_names = NULL, start_wave = 1)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mtp_intervention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","text":"policy Function takes (natural_value, covariates) returns modified value covariate_names Character vector covariate names consider start_wave Wave start applying policy","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mtp_intervention.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","text":"Function suitable use intervention margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_mtp_intervention.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create modified treatment policy (MTP) intervention — create_mtp_intervention","text":"","code":"# Only treat if natural value > 0 AND covariate L > 0 mtp <- create_mtp_intervention(   policy = function(natural, covars) {     ifelse(natural > 0 & covars$L > 0, natural, 0)   },   covariate_names = \"L\",   start_wave = 1 )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Create positivity violation mask — create_positivity_mask","title":"Create positivity violation mask — create_positivity_mask","text":"Create positivity violation mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create positivity violation mask — create_positivity_mask","text":"","code":"create_positivity_mask(exposure_var, filter_fn, name = \"positivity_filter\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create positivity violation mask — create_positivity_mask","text":"exposure_var Character. Name exposure variable filter filter_fn Function takes data returns logical vector valid rows name Optional name mask","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create positivity violation mask — create_positivity_mask","text":"Positivity mask object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create positivity violation shadow — create_positivity_shadow","title":"Create positivity violation shadow — create_positivity_shadow","text":"Create positivity violation shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create positivity violation shadow — create_positivity_shadow","text":"","code":"create_positivity_shadow(exposure_var, filter_fn, name = \"positivity_filter\")"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create positivity violation shadow — create_positivity_shadow","text":"exposure_var Character. Name exposure variable filter filter_fn Function takes data returns logical vector valid rows name Optional name shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_positivity_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create positivity violation shadow — create_positivity_shadow","text":"Positivity shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scm_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SCM diagram — create_scm_diagram","title":"Create SCM diagram — create_scm_diagram","text":"Creates visual representation structural causal model DAG. Can output various formats including text, mermaid, DOT.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scm_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SCM diagram — create_scm_diagram","text":"","code":"create_scm_diagram(   format = c(\"text\", \"mermaid\", \"dot\"),   waves = 3,   show_equations = FALSE,   highlight_path = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scm_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SCM diagram — create_scm_diagram","text":"format Output format: \"text\", \"mermaid\", \"dot\" waves Number waves show show_equations Include structural equations? highlight_path Optional path highlight (e.g., c(\"A1\", \"Y2\"))","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_scm_diagram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SCM diagram — create_scm_diagram","text":"Character string diagram specification","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shadow.html","id":null,"dir":"Reference","previous_headings":"","what":"Shadowing Framework for margot — create_shadow","title":"Shadowing Framework for margot — create_shadow","text":"file implements unified shadowing framework applying various observational distortions simulated data, including censoring, measurement error, selection bias. Create shadow object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shadow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shadowing Framework for margot — create_shadow","text":"","code":"create_shadow(   type = c(\"censoring\", \"measurement_error\", \"selection\", \"item_missingness\",     \"positivity\"),   params = list(),   name = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shadow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shadowing Framework for margot — create_shadow","text":"type Character string specifying shadow type: \"censoring\", \"measurement_error\", \"selection\" params List parameters specific shadow type. measurement_error type: - variables: Character vector variable names apply error - error_type: \"classical\", \"differential\", \"dichotomise\", \"correlated\", \"misclassification\" - \"classical\": sigma (numeric) error standard deviation - \"misclassification\": sensitivity specificity (numeric 0-1) name Optional name shadow","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shadow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shadowing Framework for margot — create_shadow","text":"shadow object class attributes method dispatch","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shadow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shadowing Framework for margot — create_shadow","text":"","code":"# Create a classical measurement error shadow shadow <- create_shadow(   type = \"measurement_error\",   params = list(     variables = c(\"t1_l\", \"t2_l\"),     error_type = \"classical\",     sigma = 0.5   ) )  # Create a misclassification shadow for binary variables misclass_shadow <- create_shadow(   type = \"measurement_error\",   params = list(     variables = \"t1_a\",     error_type = \"misclassification\",     sensitivity = 0.85,  # 85% of true positives correctly classified     specificity = 0.90   # 90% of true negatives correctly classified   ) )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shift_intervention.html","id":null,"dir":"Reference","previous_headings":"","what":"Create bounded shift intervention — create_shift_intervention","title":"Create bounded shift intervention — create_shift_intervention","text":"Create bounded shift intervention","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shift_intervention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create bounded shift intervention — create_shift_intervention","text":"","code":"create_shift_intervention(   shift_amount,   min_value = -Inf,   max_value = Inf,   start_wave = 1 )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shift_intervention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create bounded shift intervention — create_shift_intervention","text":"shift_amount Numeric amount shift (positive negative) min_value Minimum allowed value shift max_value Maximum allowed value shift start_wave Wave start shifting (default: 1)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shift_intervention.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create bounded shift intervention — create_shift_intervention","text":"Function suitable use intervention margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_shift_intervention.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create bounded shift intervention — create_shift_intervention","text":"","code":"# Shift up by 1, bounded between 1 and 7 shift_up_bounded <- create_shift_intervention(   shift_amount = 1,   min_value = 1,   max_value = 7,   start_wave = 1 )  # Use in simulation if (FALSE) { # \\dontrun{ sim_data <- margot_simulate(   n = 1000,   waves = 3,   exposure_type = \"continuous\",   intervention = shift_up_bounded ) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_threshold_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Create threshold-based shift intervention — create_threshold_shift","title":"Create threshold-based shift intervention — create_threshold_shift","text":"Create threshold-based shift intervention","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_threshold_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create threshold-based shift intervention — create_threshold_shift","text":"","code":"create_threshold_shift(   threshold,   shift_to,   direction = c(\"up\", \"down\"),   start_wave = 1 )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_threshold_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create threshold-based shift intervention — create_threshold_shift","text":"threshold Value /apply shift shift_to Target value shift direction \"\" shift values threshold, \"\" start_wave Wave start shifting","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_threshold_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create threshold-based shift intervention — create_threshold_shift","text":"Function suitable use intervention margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_threshold_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create threshold-based shift intervention — create_threshold_shift","text":"","code":"# Shift values below 1 up to 1 shift_low_values <- create_threshold_shift(   threshold = 1,   shift_to = 1,   direction = \"up\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_wave_specific_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Create wave-specific shift intervention — create_wave_specific_shift","title":"Create wave-specific shift intervention — create_wave_specific_shift","text":"Create wave-specific shift intervention","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_wave_specific_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create wave-specific shift intervention — create_wave_specific_shift","text":"","code":"create_wave_specific_shift(wave_shifts)"},{"path":"https://go-bayes.github.io/margot.sim/reference/create_wave_specific_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create wave-specific shift intervention — create_wave_specific_shift","text":"wave_shifts Named list mapping waves shift functions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_wave_specific_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create wave-specific shift intervention — create_wave_specific_shift","text":"Function suitable use intervention margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/create_wave_specific_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create wave-specific shift intervention — create_wave_specific_shift","text":"","code":"# Different shifts at different waves wave_specific <- create_wave_specific_shift(   wave_shifts = list(     \"0\" = function(x) x,              # No change at baseline     \"1\" = function(x) pmin(x + 1, 7), # Shift up by 1 at wave 1     \"2\" = function(x) pmax(x - 1, 1)  # Shift down by 1 at wave 2   ) )"},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_masking.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick diagnostic for a masked dataset — diagnose_masking","title":"Quick diagnostic for a masked dataset — diagnose_masking","text":"Quick diagnostic masked dataset","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_masking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick diagnostic for a masked dataset — diagnose_masking","text":"","code":"diagnose_masking(original, masked, key_vars = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_masking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick diagnostic for a masked dataset — diagnose_masking","text":"original Original data masked Masked data key_vars Variables focus ","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_shadowing.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick diagnostic for a shadowed dataset — diagnose_shadowing","title":"Quick diagnostic for a shadowed dataset — diagnose_shadowing","text":"Quick diagnostic shadowed dataset","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_shadowing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick diagnostic for a shadowed dataset — diagnose_shadowing","text":"","code":"diagnose_shadowing(original, shadowed, key_vars = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/diagnose_shadowing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick diagnostic for a shadowed dataset — diagnose_shadowing","text":"original Original data shadowed Shadowed data key_vars Variables focus ","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/dot-default_sim_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Default simulation parameter values — .default_sim_params","title":"Default simulation parameter values — .default_sim_params","text":"Default simulation parameter values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/dot-default_sim_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default simulation parameter values — .default_sim_params","text":"","code":".default_sim_params()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_basic_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Basic simulation — example_basic_simulation","title":"Example: Basic simulation — example_basic_simulation","text":"Example: Basic simulation","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_basic_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Basic simulation — example_basic_simulation","text":"","code":"example_basic_simulation()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_causal_censoring_bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Causal effects under censoring — example_causal_censoring_bias","title":"Example: Causal effects under censoring — example_causal_censoring_bias","text":"Example: Causal effects censoring","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_causal_censoring_bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Causal effects under censoring — example_causal_censoring_bias","text":"","code":"example_causal_censoring_bias()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_censoring_mechanisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Different censoring mechanisms — example_censoring_mechanisms","title":"Example: Different censoring mechanisms — example_censoring_mechanisms","text":"Example: Different censoring mechanisms","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_censoring_mechanisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Different censoring mechanisms — example_censoring_mechanisms","text":"","code":"example_censoring_mechanisms()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_complete_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrated Examples for margot Extensions — example_complete_workflow","title":"Integrated Examples for margot Extensions — example_complete_workflow","text":"file demonstrates complete workflows using shadowing framework, Monte Carlo simulations, flexible distributions together. Complete workflow: Evaluating TMLE complex shadowing example demonstrates: 1. Setting realistic DGP non-normal distributions 2. Applying multiple types shadows (censoring + measurement error) 3. Evaluating estimator (TMLE) via Monte Carlo 4. Comparing performance different shadowing scenarios Comprehensive example showing: - Sampling weights create target population - Multiple interventions causal contrasts - Post-hoc censoring creating observed data - Bias analysis censoring","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_complete_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrated Examples for margot Extensions — example_complete_workflow","text":"","code":"example_complete_workflow()  example_complete_workflow()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_complete_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrated Examples for margot Extensions — example_complete_workflow","text":"margot_causal_sim object results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_dynamic_interventions.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Dynamic treatment strategies — example_dynamic_interventions","title":"Example: Dynamic treatment strategies — example_dynamic_interventions","text":"Example: Dynamic treatment strategies","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_dynamic_interventions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Dynamic treatment strategies — example_dynamic_interventions","text":"","code":"example_dynamic_interventions()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_flexible_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Simulate with different distributions — example_flexible_distributions","title":"Example: Simulate with different distributions — example_flexible_distributions","text":"Example: Simulate different distributions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_flexible_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Simulate with different distributions — example_flexible_distributions","text":"","code":"example_flexible_distributions()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_heterogeneous_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","title":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","text":"Demonstrates simulate analyze treatment effect heterogeneity baseline covariates, baseline outcome, baseline exposure.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_heterogeneous_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","text":"","code":"example_heterogeneous_effects(   n = 2000,   waves = 2,   seed = 2025,   plot = TRUE,   verbose = TRUE )"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_heterogeneous_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","text":"n Sample size (default 2000) waves Number waves (default 2) seed Random seed (default 2025) plot Logical, whether create diagnostic plots (default TRUE) verbose Logical, whether print results (default TRUE)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_heterogeneous_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","text":"List containing simulated data heterogeneity analysis","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_heterogeneous_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example: Heterogeneous Treatment Effects by Baseline Characteristics — example_heterogeneous_effects","text":"","code":"if (FALSE) { # \\dontrun{ # Run heterogeneity analysis het_results <- example_heterogeneous_effects()  # Access the data dat <- het_results$data  # See heterogeneity by b1 het_results$het_by_b1 } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_long_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Long format data — example_long_format","title":"Example: Long format data — example_long_format","text":"Example: Long format data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_long_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Long format data — example_long_format","text":"","code":"example_long_format()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_masks.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Create and apply various masks — example_masks","title":"Example: Create and apply various masks — example_masks","text":"Example: Create apply various masks","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_masks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Create and apply various masks — example_masks","text":"","code":"example_masks()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_mc_measurement_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Evaluate estimator under measurement error — example_mc_measurement_error","title":"Example: Evaluate estimator under measurement error — example_mc_measurement_error","text":"Example: Evaluate estimator measurement error","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_mc_measurement_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Evaluate estimator under measurement error — example_mc_measurement_error","text":"","code":"example_mc_measurement_error()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_measurement_error_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Practical example: Impact of measurement error on different estimators — example_measurement_error_comparison","title":"Practical example: Impact of measurement error on different estimators — example_measurement_error_comparison","text":"Compares different estimators (OLS, IPW, G-computation) perform increasing levels measurement error","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_measurement_error_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Practical example: Impact of measurement error on different estimators — example_measurement_error_comparison","text":"","code":"example_measurement_error_comparison()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_multiple_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Multiple correlated outcomes — example_multiple_outcomes","title":"Example: Multiple correlated outcomes — example_multiple_outcomes","text":"Example: Multiple correlated outcomes","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_multiple_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Multiple correlated outcomes — example_multiple_outcomes","text":"","code":"example_multiple_outcomes()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_sampling_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Sampling weights — example_sampling_weights","title":"Example: Sampling weights — example_sampling_weights","text":"Example: Sampling weights","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_sampling_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Sampling weights — example_sampling_weights","text":"","code":"example_sampling_weights()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_bias_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","title":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","text":"example demonstrates complete workflow analyzing observational shadows affect causal effect estimation.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_bias_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","text":"","code":"example_shadow_bias_analysis(n = 1000, seed = 2024, verbose = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_bias_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","text":"n Sample size (default 1000) seed Random seed reproducibility verbose Print progress messages","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_bias_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","text":"list containing simulation results bias analysis","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_bias_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example: Shadow Bias Analysis Workflow — example_shadow_bias_analysis","text":"","code":"if (FALSE) { # \\dontrun{ # Run the example results <- example_shadow_bias_analysis()  # View the bias comparison print(results$comparison) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_scenarios.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Multiple Shadow Scenarios — example_shadow_scenarios","title":"Example: Multiple Shadow Scenarios — example_shadow_scenarios","text":"Demonstrates different shadow combinations affect bias.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_scenarios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Multiple Shadow Scenarios — example_shadow_scenarios","text":"","code":"example_shadow_scenarios(n = 500, scenarios = NULL, verbose = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_scenarios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example: Multiple Shadow Scenarios — example_shadow_scenarios","text":"n Sample size scenarios List shadow scenarios compare verbose Print progress","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadow_scenarios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Multiple Shadow Scenarios — example_shadow_scenarios","text":"Data frame comparing bias across scenarios","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadows.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Create and apply various shadows — example_shadows","title":"Example: Create and apply various shadows — example_shadows","text":"Example: Create apply various shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_shadows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Create and apply various shadows — example_shadows","text":"","code":"example_shadows()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_test_censoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Test censoring indicators — example_test_censoring","title":"Example: Test censoring indicators — example_test_censoring","text":"Demonstrates censoring indicators work validates censoring logic showing future data NA not_lost indicator 0.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_test_censoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Test censoring indicators — example_test_censoring","text":"","code":"example_test_censoring()"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_test_censoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Test censoring indicators — example_test_censoring","text":"List original censored data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_weighted_shadow_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","title":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","text":"Demonstrates sampling weights interact shadow bias analysis, showing effects source population weighted target population.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_weighted_shadow_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","text":"","code":"example_weighted_shadow_analysis(n = 800, seed = 2025, verbose = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/example_weighted_shadow_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","text":"n Sample size seed Random seed verbose Print progress","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_weighted_shadow_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","text":"List weighted unweighted comparisons","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/example_weighted_shadow_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example: Shadow Bias Analysis with Sampling Weights — example_weighted_shadow_analysis","text":"","code":"if (FALSE) { # \\dontrun{ # Run weighted analysis results <- example_weighted_shadow_analysis()  # Compare weighted vs unweighted bias print(results$comparison_weighted) print(results$comparison_unweighted) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/extract_treatment_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Treatment and Outcome for Causal Effect Computation — extract_treatment_outcome","title":"Extract Treatment and Outcome for Causal Effect Computation — extract_treatment_outcome","text":"Helper function extract treatment outcome variables margot simulation data structure proper time indexing.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/extract_treatment_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Treatment and Outcome for Causal Effect Computation — extract_treatment_outcome","text":"","code":"extract_treatment_outcome(   data,   wave = 1,   outcome_wave = NULL,   treatment_name = \"a\",   outcome_name = \"y\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/extract_treatment_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Treatment and Outcome for Causal Effect Computation — extract_treatment_outcome","text":"data Data frame margot simulation wave wave use treatment (default first wave) outcome_wave wave use outcome (default last wave) treatment_name Name treatment variable (without time prefix) outcome_name Name outcome variable (without time prefix)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/extract_treatment_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Treatment and Outcome for Causal Effect Computation — extract_treatment_outcome","text":"data frame columns '' (treatment) 'y' (outcome)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.custom_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate from custom distribution function — generate_from_dist.custom_distribution","title":"Generate from custom distribution function — generate_from_dist.custom_distribution","text":"Generate custom distribution function","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.custom_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate from custom distribution function — generate_from_dist.custom_distribution","text":"","code":"# S3 method for class 'custom_distribution' generate_from_dist(dist, n, linear_predictor = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.custom_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate from custom distribution function — generate_from_dist.custom_distribution","text":"dist custom distribution object n Number values generate linear_predictor Optional linear predictor values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.custom_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate from custom distribution function — generate_from_dist.custom_distribution","text":"Vector generated values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate values from a distribution specification — generate_from_dist","title":"Generate values from a distribution specification — generate_from_dist","text":"Generate values distribution specification","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate values from a distribution specification — generate_from_dist","text":"","code":"generate_from_dist(dist, n, linear_predictor = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate values from a distribution specification — generate_from_dist","text":"dist Distribution specification n Number values generate linear_predictor Optional linear predictor values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate values from a distribution specification — generate_from_dist","text":"Vector generated values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.parametric_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate from parametric distribution — generate_from_dist.parametric_distribution","title":"Generate from parametric distribution — generate_from_dist.parametric_distribution","text":"Generate parametric distribution","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.parametric_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate from parametric distribution — generate_from_dist.parametric_distribution","text":"","code":"# S3 method for class 'parametric_distribution' generate_from_dist(dist, n, linear_predictor = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.parametric_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate from parametric distribution — generate_from_dist.parametric_distribution","text":"dist parametric distribution object n Number values generate linear_predictor Optional linear predictor values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/generate_from_dist.parametric_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate from parametric distribution — generate_from_dist.parametric_distribution","text":"Vector generated values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_default_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default link functions for distribution families — get_default_links","title":"Get default link functions for distribution families — get_default_links","text":"Get default link functions distribution families","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_default_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default link functions for distribution families — get_default_links","text":"","code":"get_default_links(family)"},{"path":"https://go-bayes.github.io/margot.sim/reference/get_time_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract time index from variable name — get_time_index","title":"Extract time index from variable name — get_time_index","text":"Extract time index variable name","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/get_time_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract time index from variable name — get_time_index","text":"","code":"get_time_index(var_name)"},{"path":"https://go-bayes.github.io/margot.sim/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://go-bayes.github.io/margot.sim/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_convert_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert margot data between wide and long formats — margot_convert_format","title":"Convert margot data between wide and long formats — margot_convert_format","text":"Convert margot data wide long formats","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_convert_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert margot data between wide and long formats — margot_convert_format","text":"","code":"margot_convert_format(data, format = c(\"wide\", \"long\"))"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_convert_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert margot data between wide and long formats — margot_convert_format","text":"data Data margot_simulate format Target format: \"wide\" \"long\"","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_convert_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert margot data between wide and long formats — margot_convert_format","text":"Data requested format metadata preserved","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Common distribution specifications — margot_distributions","title":"Common distribution specifications — margot_distributions","text":"Common distribution specifications","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common distribution specifications — margot_distributions","text":"","code":"margot_distributions"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_distributions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common distribution specifications — margot_distributions","text":"object class list length 9.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_extract_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variable at specific time point — margot_extract_var","title":"Extract variable at specific time point — margot_extract_var","text":"Extract variable specific time point","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_extract_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variable at specific time point — margot_extract_var","text":"","code":"margot_extract_var(data, var, time)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_extract_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variable at specific time point — margot_extract_var","text":"data Wide format data margot_simulate var Variable name (without time prefix) time Time point","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_extract_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variable at specific time point — margot_extract_var","text":"Vector values","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_missingness_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary of missingness patterns — margot_missingness_summary","title":"Get summary of missingness patterns — margot_missingness_summary","text":"Get summary missingness patterns","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_missingness_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary of missingness patterns — margot_missingness_summary","text":"","code":"margot_missingness_summary(data, vars = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_missingness_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary of missingness patterns — margot_missingness_summary","text":"data Data margot_simulate vars Variables check (defaults )","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_missingness_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary of missingness patterns — margot_missingness_summary","text":"Data frame missingness summary","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_monte_carlo.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Framework for margot — margot_monte_carlo","title":"Monte Carlo Framework for margot — margot_monte_carlo","text":"file implements Monte Carlo simulation capabilities evaluating statistical estimators various shadowing conditions. Run Monte Carlo simulation evaluate estimator performance","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_monte_carlo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Framework for margot — margot_monte_carlo","text":"","code":"margot_monte_carlo(   n_reps = 500,   n_per_rep = 1000,   dgp_params = list(),   shadows = list(),   estimator_fn = NULL,   truth_fn = NULL,   extract_fn = NULL,   parallel = FALSE,   n_cores = NULL,   seed = NULL,   verbose = TRUE,   save_data = FALSE )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_monte_carlo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Framework for margot — margot_monte_carlo","text":"n_reps Number Monte Carlo replications n_per_rep Sample size per replication dgp_params List parameters margot_simulate_causal() shadows List shadow objects apply data estimator_fn Function takes data returns estimate(s) truth_fn Optional function compute true parameter value extract_fn Optional function extract additional information parallel Logical, use parallel processing? n_cores Number cores parallel processing seed Random seed verbose Print progress? save_data Logical, save datasets replication?","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_monte_carlo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Framework for margot — margot_monte_carlo","text":"Object class \"margot_mc_results\" simulation results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_monte_carlo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Framework for margot — margot_monte_carlo","text":"","code":"if (FALSE) { # \\dontrun{ # Define estimator my_estimator <- function(data) {   fit <- lm(t3_y ~ t2_a + t1_a + b1, data = data)   list(     estimate = coef(fit)[\"t2_a\"],     se = sqrt(diag(vcov(fit)))[\"t2_a\"],     converged = TRUE   ) }  # Run simulation results <- margot_monte_carlo(   n_reps = 500,   n_per_rep = 1000,   dgp_params = list(     waves = 3,     params = list(a_lag_y_coef = 0.3)   ),   estimator_fn = my_estimator ) } # }"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_process_longitudinal.html","id":null,"dir":"Reference","previous_headings":"","what":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","title":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","text":"Internal replacement margot_process_longitudinal_data_wider(). Processes longitudinal data wide format across multiple waves, handling censoring indicators optional scaling.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_process_longitudinal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","text":"","code":"margot_process_longitudinal(   df_wide,   exposure_vars = NULL,   outcome_vars = NULL,   preserve_temporal_order = TRUE,   scale_continuous = FALSE,   not_lost_suffix = \"not_lost_following_wave\",   time_point_regex = \"^(t\\\\d+)_.*$\" )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_process_longitudinal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","text":"df_wide Wide-format data frame containing time-prefixed columns (e.g., `t0_x`) exposure_vars Character vector exposure base names (without time prefixes) outcome_vars Character vector outcome base names (without time prefixes) preserve_temporal_order Logical; TRUE, maintains temporal ordering (t0_var, t1_var, ..., tn_var) scale_continuous Logical; TRUE, scales continuous variables. Default: FALSE not_lost_suffix Suffix -lost indicator. Default: \"not_lost_following_wave\" time_point_regex Regex pattern identify time-point prefixes. Default: \"^(t\\d+)_.*$\"","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_process_longitudinal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","text":"data frame processed columns censoring indicators. Future waves   set NA censored subjects (carry-forward).","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_process_longitudinal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process longitudinal data in wide format with censoring — margot_process_longitudinal","text":"## Censoring Propagation function enforces monotonic missingness patterns: - subject lost (data wave k), remain lost - future waves set NA consistency - prevents \"resurrections\" subjects reappear lost ## -Lost Indicators wave k, indicator `tk_not_lost_following_wave` created: - Value = 1: Subject least data wave k+1 - Value = 0: Subject data wave k+1 (censored) indicators essential : - Constructing inverse probability weights - Defining -risk set wave - Implementing proper survival analysis methods ## Carry-Forward function implement last observation carried forward (LOCF). Missing values due censoring remain NA. intentional : - LOCF can introduce bias longitudinal causal inference - Modern methods (IPCW, g-computation) handle missingness appropriately - Carrying forward values can mask true censoring pattern","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_report_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Report margot simulation summary — margot_report_sim","title":"Report margot simulation summary — margot_report_sim","text":"Provides formatted summary margot_simulate() output object, including structural model details, sample sizes, censoring patterns.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_report_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report margot simulation summary — margot_report_sim","text":"","code":"margot_report_sim(dat)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_report_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report margot simulation summary — margot_report_sim","text":"dat data frame tibble output margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_report_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report margot simulation summary — margot_report_sim","text":"Invisibly returns metadata list. Called side effect   printing formatted summary console.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_report_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report margot simulation summary — margot_report_sim","text":"","code":"dat <- margot_simulate(n = 100, waves = 3, seed = 123) margot_report_sim(dat) #>  #> ── margot simulation summary ─────────────────────────────────────────────────── #>  #> ── design ── #>  #> • n = 100 subjects #> • waves = 3 measurement occasions #> • structural model: semi-markovian #> • intervention: no #> • sampling weights: no #>  #> ── variables ── #>  #> • baseline covariates: 5 #> • exposure type: binary #> • outcome type: continuous (1 outcome) #> • outcome feedback: full #>  #> ── censoring ── #>  #> • censoring mechanism: built-in #> • base rate: 0.1 #> ℹ data format: wide (id only)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Display detailed SCM equations — margot_scm_details","title":"Display detailed SCM equations — margot_scm_details","text":"Provides detailed mathematical specifications structural causal model (SCM) used margot_simulate. Shows DAG structure specific parametric forms structural equations.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display detailed SCM equations — margot_scm_details","text":"","code":"margot_scm_details(format = c(\"text\", \"latex\"), estimand = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display detailed SCM equations — margot_scm_details","text":"format Character: \"text\" console output, \"latex\" LaTeX estimand Character: specific estimand highlight (optional)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display detailed SCM equations — margot_scm_details","text":"Invisibly returns list equations","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_overview.html","id":null,"dir":"Reference","previous_headings":"","what":"High-level SCM overview — margot_scm_overview","title":"High-level SCM overview — margot_scm_overview","text":"Provides high-level overview structural causal model implementation margot, including key principles, available estimands, usage guidance.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_overview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"High-level SCM overview — margot_scm_overview","text":"","code":"margot_scm_overview(topic = NULL)"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_overview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"High-level SCM overview — margot_scm_overview","text":"topic Optional specific topic focus ","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_scm_overview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"High-level SCM overview — margot_scm_overview","text":"Invisibly returns NULL","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"Generates data following semi-markovian structural causal model (SCM) : - Semi-markovian data generating process - Optional sampling weights reflect target population - Intervention functions causal inference - Post-hoc censoring bias analysis function cleanly separates three stages: 1. Data generation intervention g (specified): \\((B, L_k^g, A_k^g, Y_k^g)\\) 2. Application sampling weights match target population 3. Creation censoring indicators: \\(C_k\\) (via margot_process_longitudinal) mirrors counterfactual notation: \\(A_k \\A_k^g, C_k \\equiv 0, Y_K^{g,C=0}\\)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"","code":"margot_simulate(   n,   waves,   n_outcomes = 1,   n_baselines = 5,   exposure_type = \"binary\",   outcome_type = \"continuous\",   y_feedback = c(\"full\", \"y_only\", \"none\"),   censoring = list(rate = 0.1, exposure_dependence = TRUE, l_dependence = FALSE,     y_dependence = FALSE, latent_dependence = FALSE),   params = list(),   seed = NULL,   wide = TRUE,   validate_props = TRUE,   verbose = FALSE,   intervention = NULL,   sampling_weights = NULL,   apply_process_function = TRUE,   process_args = list(),   shadows = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"n Integer. Number subjects simulate waves Integer. Number measurement waves (time points) n_outcomes Integer. Number outcomes (1-3). Default: 1 n_baselines Integer. Number baseline covariates. Default: 5 exposure_type Character. Type exposure: \"binary\" \"continuous\". Default: \"binary\" outcome_type Character. Type outcome: \"continuous\" \"binary\". Default: \"continuous\" y_feedback Character. Type outcome feedback: \"full\", \"y_only\", \"none\". Default: \"full\" censoring List. Censoring parameters including rate, exposure_dependence, l_dependence, y_dependence, latent_dependence params List. Named list model parameters (see defaults .default_sim_params()). Key heterogeneity parameters include: a_b1_y_het, a_b2_y_het, a_b3_y_het: Effect modification baseline covariates a_y0_y_het: Effect modification baseline outcome (y_feedback != \"none\") a_a0_y_het: Effect modification baseline exposure a_b_y_het: Legacy parameter b1 interaction (kept compatibility) a_l_y_het: Effect modification time-varying confounder seed Integer. Random seed reproducibility wide Logical. Return data wide format? Default: TRUE validate_props Logical. Validate coefficients sum < 1? Default: TRUE verbose Logical. Print progress messages? Default: FALSE intervention Function. Intervention function(data, time, trt) modifies treatment sampling_weights Numeric vector length n, function(baseline_data) returns weights. Used weight baseline covariates reflect target population. NULL, weighting applied. apply_process_function Logical. TRUE, applies margot_process_longitudinal create proper censoring indicators process_args List arguments pass margot_process_longitudinal shadows shadow object list shadow objects created create_shadow() related functions. Shadows applied data generation processing simulate observational distortions like measurement error, missingness, selection bias.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"tibble columns :   - id: Subject identifier   - b1, ..., bn: Baseline covariates   - t0_a, t1_a, ...: Treatment assignments (natural intervention)   - t1_l, t2_l, ...: Time-varying confounders   - t0_y, t1_y, ..., t(K+1)_y: Outcomes   - t*_not_lost_following_wave: Censoring indicators (apply_process_function = TRUE)   - sampling_weight: Applied weights (sampling_weights provided) returned object attribute \"margot_meta\" containing simulation parameters.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"directed-acyclic-graph-dag-","dir":"Reference","previous_headings":"","what":"Directed Acyclic Graph (DAG)","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"data generating process follows DAG structure:","code":"B --+---> L_1 ---> A_1 ---> Y_1 ---> L_2 ---> A_2 ---> Y_2 ---> ... ---> Y_K         |      |      |      |      |      |      |         |      v      v      v      v      v      v         +----> C_1     C_2     C_3    C_4     C_5     C_6  Where:   B  = Baseline covariates (time-invariant)   L_k = Time-varying confounders at wave k   A_k = Exposure/treatment at wave k   Y_k = Outcome(s) at wave k   C_k = Censoring indicator after wave k"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"structural-equations","dir":"Reference","previous_headings":"","what":"Structural Equations","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"SCM defined following structural equations. baseline (k=0): $$B \\sim \\text{MVN}(0, \\Sigma_B) \\text{ } \\Sigma_B[,j] = \\rho_B \\text{ } \\neq j$$ $$A_0 = f_{A_0}(B, U_{A_0})$$ $$Y_0 = f_{Y_0}(B, A_0, U_{Y_0})$$ wave k >= 1: $$L_k = \\beta_{B \\L} \\cdot h_k(B) + \\beta_{\\L} A_{k-1} + \\beta_{Y \\L} Y_{k-1} + U_{L_k}$$ $$A_k = f_{A_k}(B, L_k, A_{k-1}, Y_{k-1}, U_{A_k})$$ $$Y_k = f_{Y_k}(B, L_{k-1}, A_{k-1}, Y_{k-1}, U_{Y_k})$$ $$C_k = f_{C_k}(A_{k-1}, L_{k-1}, Y_{k-1}, \\theta, U_{C_k})$$ : - \\(h_k(B)\\) represents time-varying functions baseline covariates - \\(U_{\\cdot} \\sim N(0,1)\\) independent errors except noted - \\(\\theta\\) shared frailty term latent_dependence = TRUE","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"unmeasured-confounding","dir":"Reference","previous_headings":"","what":"Unmeasured Confounding","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"following unmeasured confounding structures supported: 1. **Independent errors** (default): \\(U_{\\cdot}\\) mutually independent 2. **Shared frailty censoring**: latent_dependence = TRUE,    $$\\theta \\sim N(0, \\sigma^2_{\\text{frailty}})$$    affects censoring events, inducing correlation dropout times 3. **Correlated outcomes**: n_outcomes > 1,    $$U_{Y_k} \\sim \\text{MVN}(0, \\Sigma_Y)$$    \\(\\Sigma_Y\\) -diagonal elements y_cor Note: unmeasured confounding treatment outcome design. confounding passes measured variables (B, L).","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"parameter-interpretation","dir":"Reference","previous_headings":"","what":"Parameter Interpretation","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"Key parameters structural equations: - b_l_coef: \\(\\beta_{B \\L}\\) effect baseline time-varying confounder - a_l_coef: \\(\\beta_{\\L}\\) effect past treatment confounder - y_l_coef: \\(\\beta_{Y \\L}\\) feedback past outcome confounder - l_a_coef: \\(\\beta_{L \\}\\) effect confounder treatment - a_autoreg: \\(\\beta_{\\}\\) treatment persistence - a_lag_y_coef: \\(\\beta_{\\Y}\\) causal effect treatment outcome - cens_*_coef: Effects censoring hazard","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"Robins JM (1986). \"new approach causal inference mortality studies sustained exposure periods–application control healthy worker survivor effect.\" Mathematical Modelling, 7(9-12), 1393-1512. Hernan MA, Robins JM (2020). \"Causal Inference: .\" Boca Raton: Chapman & Hall/CRC.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate semi-markovian longitudinal data with sampling weights — margot_simulate","text":"","code":"# basic simulation following the SCM dat <- margot_simulate(   n = 1000,   waves = 3,   seed = 2025 )  # with intervention g: always treat after baseline dat_g <- margot_simulate(   n = 1000,   waves = 3,   intervention = function(data, time, trt) {     if (time == 0) return(data[[trt]])  # natural at baseline     rep(1, nrow(data))                   # always treat after   },   seed = 2025 )  # the estimand E[Y_K^{g,C=0}] can be computed as mean(dat_g$t4_y)  # Example with shadows # Create measurement error shadow me_shadow <- create_shadow(   \"measurement_error\",   params = list(     variables = c(\"t1_l\", \"t2_l\"),     error_type = \"classical\",     sigma = 0.5   ) )  # Generate data with measurement error dat_with_error <- margot_simulate(   n = 1000,   waves = 2,   shadows = me_shadow,   seed = 2025 ) # shadowed data has measurement error applied to specified variables"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_causal.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data for causal inference with proper censoring — margot_simulate_causal","title":"Simulate data for causal inference with proper censoring — margot_simulate_causal","text":"Wrapper function simulates data multiple intervention regimes causal inference. Supports: - Multiple treatment strategies - Sampling weights target populations - Post-hoc censoring create realistic observed data - Automatic computation true causal effects - Bias analysis censoring","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_causal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data for causal inference with proper censoring — margot_simulate_causal","text":"","code":"margot_simulate_causal(   n,   waves,   treatments,   interventions,   sampling_weights = NULL,   apply_censoring = FALSE,   use_process_function = TRUE,   common_params = list(),   ... )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_causal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data for causal inference with proper censoring — margot_simulate_causal","text":"n Integer. Number subjects simulate waves Integer. Number measurement waves treatments Character vector. Names treatment variables (currently uses first) interventions Named list intervention functions. function signature function(data, time, trt) return treatment values sampling_weights Weights function create target population apply_censoring Logical. Apply censoring create observed data? use_process_function Logical. Use margot_process_longitudinal? common_params List elements: - params: Parameters margot_simulate - censoring_params: Censoring parameters - verbose: Print progress? ... Additional arguments passed margot_simulate","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_causal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data for causal inference with proper censoring — margot_simulate_causal","text":"Object class \"margot_causal_sim\" containing:   - data: List datasets intervention   - data_true: Complete data shadows (shadows applied)   - data_observed: Data shadows applied (shadows applied)   - effects: True causal effects (multiple interventions)   - effects_true: Effects computed true data   - effects_observed: Effects computed observed data   - censoring_bias: Bias induced censoring (apply_censoring = TRUE)   - metadata: Simulation metadata","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_causal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data for causal inference with proper censoring — margot_simulate_causal","text":"","code":"# Define interventions interventions <- list(   never_treat = function(data, time, trt) {     rep(0, nrow(data))   },   always_treat = function(data, time, trt) {     rep(1, nrow(data))   },   natural = function(data, time, trt) {     data[[trt]]  # return natural treatment   } )  # Simulate with censoring results <- margot_simulate_causal(   n = 1000,   waves = 3,   treatments = \"a\",   interventions = interventions,   apply_censoring = TRUE,   common_params = list(     params = list(a_lag_y_coef = 0.3),     verbose = TRUE   ) ) #> simulating under intervention: never_treat #> simulating under intervention: always_treat #> simulating under intervention: natural"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_flex.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced margot_simulate with flexible distributions — margot_simulate_flex","title":"Enhanced margot_simulate with flexible distributions — margot_simulate_flex","text":"Enhanced margot_simulate flexible distributions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced margot_simulate with flexible distributions — margot_simulate_flex","text":"","code":"margot_simulate_flex(   n,   waves,   distributions = NULL,   ...,   validate_distributions = TRUE )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_flex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced margot_simulate with flexible distributions — margot_simulate_flex","text":"n Integer. Number subjects simulate waves Integer. Number measurement waves (time points) distributions Distribution set list distributions ... Additional arguments passed margot_simulate validate_distributions Logical. Validate distribution specifications? Default: TRUE","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_simulate_flex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced margot_simulate with flexible distributions — margot_simulate_flex","text":"Simulated data specified distributions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_transport_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","title":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","text":"demonstrates extend basic transport weights example include realistic observational shadows using margot.sim.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_transport_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","text":"","code":"margot_transport_analysis(   n_sample = 1000,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_z = 2.5,   beta_az = 0.5,   apply_shadows = FALSE,   shadow_config = NULL,   seed = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_transport_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","text":"n_sample Sample size p_z_sample Probability effect modifier sample p_z_population Probability effect modifier population beta_a Treatment effect beta_z Effect modifier coefficient beta_az Treatment--modifier interaction apply_shadows Logical, whether apply observational shadows shadow_config List specifying shadows apply seed Random seed","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_transport_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","text":"list data, weights, shadow bias analysis","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/margot_transport_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enhanced Version Using margot.sim Shadow Framework — margot_transport_analysis","text":"","code":"# Basic usage without shadows result1 <- margot_transport_analysis(   n_sample = 1000,   apply_shadows = FALSE )  # With measurement error and missingness result2 <- margot_transport_analysis(   n_sample = 1000,   apply_shadows = TRUE,   shadow_config = list(     measurement_error = TRUE,     missingness = TRUE   ) ) #> Warning: Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation. #> Warning: Non-binary treatment detected. Dichotomizing at 0.5 for effect estimation.  print(result2$bias_comparison) #>            Population True_ATE Observed_ATE        Bias Relative_Bias #> 1 Sample (unweighted) 1.092509     1.094768 0.002259162     0.2067866 #> 2   Target (weighted) 1.336656     1.348308 0.011651611     0.8716983"},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_mc_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Monte Carlo results — plot.margot_mc_results","title":"Plot Monte Carlo results — plot.margot_mc_results","text":"Plot Monte Carlo results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_mc_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Monte Carlo results — plot.margot_mc_results","text":"","code":"# S3 method for class 'margot_mc_results' plot(x, type = c(\"histogram\", \"qq\", \"trace\", \"bias\"), ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_mc_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Monte Carlo results — plot.margot_mc_results","text":"x margot_mc_results object type Character string specifying plot type: \"histogram\", \"qq\", \"trace\", \"bias\" ... Additional arguments passed ggplot2 functions","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/plot.margot_mc_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Monte Carlo results — plot.margot_mc_results","text":"ggplot2 plot object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_causal_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for margot_causal_sim — print.margot_causal_sim","title":"Print method for margot_causal_sim — print.margot_causal_sim","text":"Print method margot_causal_sim","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_causal_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for margot_causal_sim — print.margot_causal_sim","text":"","code":"# S3 method for class 'margot_causal_sim' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_causal_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for margot_causal_sim — print.margot_causal_sim","text":"x margot_causal_sim object ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_causal_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for margot_causal_sim — print.margot_causal_sim","text":"Invisibly returns original object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Margot Effects — print.margot_effects","title":"Print Method for Margot Effects — print.margot_effects","text":"Print Method Margot Effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Margot Effects — print.margot_effects","text":"","code":"# S3 method for class 'margot_effects' print(x, digits = 3, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Margot Effects — print.margot_effects","text":"x margot_effects object digits Number digits display ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_mc_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for Monte Carlo results — print.margot_mc_results","title":"Print method for Monte Carlo results — print.margot_mc_results","text":"Print method Monte Carlo results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_mc_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for Monte Carlo results — print.margot_mc_results","text":"","code":"# S3 method for class 'margot_mc_results' print(x, digits = 4, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_mc_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for Monte Carlo results — print.margot_mc_results","text":"x margot_mc_results object digits Integer. Number digits display ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_mc_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for Monte Carlo results — print.margot_mc_results","text":"Invisibly returns original object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_shadow_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Shadow Result — print.margot_shadow_result","title":"Print Method for Shadow Result — print.margot_shadow_result","text":"Print Method Shadow Result","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_shadow_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Shadow Result — print.margot_shadow_result","text":"","code":"# S3 method for class 'margot_shadow_result' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.margot_shadow_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Shadow Result — print.margot_shadow_result","text":"x margot_shadow_result object ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.mask_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print mask effects — print.mask_effects","title":"Print mask effects — print.mask_effects","text":"Print mask effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.mask_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print mask effects — print.mask_effects","text":"","code":"# S3 method for class 'mask_effects' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.mc_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for MC comparison — print.mc_comparison","title":"Print method for MC comparison — print.mc_comparison","text":"Print method MC comparison","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.mc_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for MC comparison — print.mc_comparison","text":"","code":"# S3 method for class 'mc_comparison' print(x, digits = 4, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.mc_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for MC comparison — print.mc_comparison","text":"x mc_comparison object compare_mc_results() digits Integer. Number digits display ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.mc_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for MC comparison — print.mc_comparison","text":"Invisibly returns original object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_bias_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Shadow Bias Comparison — print.shadow_bias_comparison","title":"Print Method for Shadow Bias Comparison — print.shadow_bias_comparison","text":"Print Method Shadow Bias Comparison","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_bias_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Shadow Bias Comparison — print.shadow_bias_comparison","text":"","code":"# S3 method for class 'shadow_bias_comparison' print(x, digits = 3, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_bias_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Shadow Bias Comparison — print.shadow_bias_comparison","text":"x shadow_bias_comparison object digits Number digits display ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effect_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Shadow Effect Comparison — print.shadow_effect_comparison","title":"Print Method for Shadow Effect Comparison — print.shadow_effect_comparison","text":"Print Method Shadow Effect Comparison","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effect_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Shadow Effect Comparison — print.shadow_effect_comparison","text":"","code":"# S3 method for class 'shadow_effect_comparison' print(x, digits = 3, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effect_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Shadow Effect Comparison — print.shadow_effect_comparison","text":"x shadow_effect_comparison object digits Number digits rounding ... Additional arguments (ignored)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print shadow effects — print.shadow_effects","title":"Print shadow effects — print.shadow_effects","text":"Print shadow effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print shadow effects — print.shadow_effects","text":"","code":"# S3 method for class 'shadow_effects' print(x, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print shadow effects — print.shadow_effects","text":"x shadow_effects object analyse_shadow_effects() ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/print.shadow_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print shadow effects — print.shadow_effects","text":"Invisibly returns original object","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/run_all_examples.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all margot examples — run_all_examples","title":"Run all margot examples — run_all_examples","text":"Runs example functions demonstrate package capabilities.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/run_all_examples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all margot examples — run_all_examples","text":"","code":"run_all_examples(pause = TRUE)"},{"path":"https://go-bayes.github.io/margot.sim/reference/run_all_examples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all margot examples — run_all_examples","text":"pause Logical. Pause examples?","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/shift-interventions.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift intervention functions for margot.sim — shift-interventions","title":"Shift intervention functions for margot.sim — shift-interventions","text":"Functions creating shift interventions commonly used modified treatment policies (MTPs) longitudinal causal inference.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/simulate_ate_data_with_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","title":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","text":"simplified direct replacement exactly mimics old function's behavior without using full margot.sim machinery.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/simulate_ate_data_with_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","text":"","code":"simulate_ate_data_with_weights(   n_sample = 10000,   n_population = 1e+05,   p_z_sample = 0.1,   p_z_population = 0.5,   beta_a = 1,   beta_z = 2.5,   beta_az = 0.5,   noise_sd = 0.5,   seed = NULL )"},{"path":"https://go-bayes.github.io/margot.sim/reference/simulate_ate_data_with_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","text":"n_sample Sample size n_population Population size p_z_sample Probability effect modifier Z=1 sample p_z_population Probability effect modifier Z=1 population beta_a Treatment effect beta_z Effect modifier coefficient beta_az Treatment--modifier interaction noise_sd Standard deviation outcome noise seed Random seed reproducibility","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/simulate_ate_data_with_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","text":"List containing sample_data population_data appropriate weights","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/simulate_ate_data_with_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direct Replacement for simulate_ate_data_with_weights — simulate_ate_data_with_weights","text":"","code":"# Direct replacement usage data <- simulate_ate_data_with_weights(   n_sample = 1000,   n_population = 10000,   p_z_sample = 0.1,   p_z_population = 0.5 )  # Check weighted vs unweighted ATE with(data$sample_data, {   cat(\"Unweighted ATE:\", mean(y_sample[a_sample==1]) - mean(y_sample[a_sample==0]), \"\\n\")   cat(\"Weighted ATE:\",        weighted.mean(y_sample[a_sample==1], weights[a_sample==1]) -        weighted.mean(y_sample[a_sample==0], weights[a_sample==0]), \"\\n\") }) #> Unweighted ATE: 1.016271  #> Weighted ATE: 1.071841"},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_mc_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for Monte Carlo results — summary.margot_mc_results","title":"Summary method for Monte Carlo results — summary.margot_mc_results","text":"Summary method Monte Carlo results","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_mc_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for Monte Carlo results — summary.margot_mc_results","text":"","code":"# S3 method for class 'margot_mc_results' summary(object, ...)"},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_mc_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for Monte Carlo results — summary.margot_mc_results","text":"object margot_mc_results object ... Additional arguments (currently unused)","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/summary.margot_mc_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for Monte Carlo results — summary.margot_mc_results","text":"summary object class \"summary.margot_mc_results\"","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/test_censoring_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Test simple censoring — test_censoring_simple","title":"Test simple censoring — test_censoring_simple","text":"Example function demonstrating basic censoring functionality. Generates data high censoring rate show effect.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/test_censoring_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test simple censoring — test_censoring_simple","text":"","code":"test_censoring_simple()"},{"path":"https://go-bayes.github.io/margot.sim/reference/test_censoring_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test simple censoring — test_censoring_simple","text":"Invisibly returns generated data","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_mask_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate mask parameters — validate_mask_params","title":"Validate mask parameters — validate_mask_params","text":"Validate mask parameters","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_mask_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate mask parameters — validate_mask_params","text":"","code":"validate_mask_params(type, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_proportions.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that coefficients sum to less than 1 — validate_proportions","title":"Validate that coefficients sum to less than 1 — validate_proportions","text":"Validate coefficients sum less 1","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_proportions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that coefficients sum to less than 1 — validate_proportions","text":"","code":"validate_proportions(coefs, node_name, threshold = 0.95)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scm_assumptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate SCM assumptions in simulated data — validate_scm_assumptions","title":"Validate SCM assumptions in simulated data — validate_scm_assumptions","text":"Tests whether simulated data follows expected structural causal model checking independence assumptions, temporal ordering, structural effects.","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scm_assumptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate SCM assumptions in simulated data — validate_scm_assumptions","text":"","code":"validate_scm_assumptions(   data,   tests = c(\"independence\", \"temporal\", \"structural\"),   alpha = 0.05,   verbose = TRUE )"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scm_assumptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate SCM assumptions in simulated data — validate_scm_assumptions","text":"data Data frame margot_simulate tests Character vector tests perform alpha Significance level tests verbose Print detailed results?","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_scm_assumptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate SCM assumptions in simulated data — validate_scm_assumptions","text":"List test results pass/fail summary","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate shadow parameters — validate_shadow_params","title":"Validate shadow parameters — validate_shadow_params","text":"Validate shadow parameters","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_shadow_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate shadow parameters — validate_shadow_params","text":"","code":"validate_shadow_params(type, params)"},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_temporal_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate temporal order of shadow dependencies — validate_temporal_order","title":"Validate temporal order of shadow dependencies — validate_temporal_order","text":"Validate temporal order shadow dependencies","code":""},{"path":"https://go-bayes.github.io/margot.sim/reference/validate_temporal_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate temporal order of shadow dependencies — validate_temporal_order","text":"","code":"validate_temporal_order(target_vars, dependency_vars)"},{"path":[]},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"shadow-bias-comparison-framework-0-1-2","dir":"Changelog","previous_headings":"New features","what":"Shadow Bias Comparison Framework","title":"margot.sim 0.1.2 (2025-06-11)","text":"compute_causal_effects(): Standardized function computing ATE, ATT, ATU data compute_effects_from_sim(): Wrapper margot simulation data proper time indexing compare_shadow_bias(): Calculates absolute relative bias estimand apply_shadows_with_truth(): Preserves complete data alongside shadowed observations compare_shadow_effects(): Full workflow comparing true vs observed effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"transport-weights-and-generalizability-0-1-2","dir":"Changelog","previous_headings":"New features","what":"Transport Weights and Generalizability","title":"margot.sim 0.1.2 (2025-06-11)","text":"simulate_ate_data_with_weights(): Direct replacement legacy function identical interface margot_transport_analysis(): Enhanced version integrating shadows transport weights Shows observational distortions affect transported estimates differently source vs target populations Handles effect modification differs sample population","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"enhanced-examples-and-documentation-0-1-2","dir":"Changelog","previous_headings":"New features","what":"Enhanced Examples and Documentation","title":"margot.sim 0.1.2 (2025-06-11)","text":"example_shadow_bias_analysis(): Complete workflow demonstrating shadow bias evaluation example_shadow_scenarios(): Compares bias across multiple shadow combinations example_weighted_shadow_analysis(): Shows transport weights interacting shadows","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"new-vignettes-0-1-2","dir":"Changelog","previous_headings":"New features","what":"New Vignettes","title":"margot.sim 0.1.2 (2025-06-11)","text":"“Shift Interventions Sampling Weights”: Demonstrates progressive interventions population weighting “Censoring Effect Modification”: Explores differential censoring severity IPCW correction “Heterogeneous Treatment Effects Simpson’s Paradox”: Shows aggregation can mask subgroup benefits “Advanced Shift Interventions”: Covers threshold, bounded, responsive, combined shift patterns “Misclassification Bias”: Compares plain vs differential misclassification model misspecification “Practical Workflow”: Complete analysis pipeline design reporting “Transport Weights Shadows”: Generalizability observational distortions","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"dual-data-architecture-0-1-2","dir":"Changelog","previous_headings":"Improvements","what":"Dual Data Architecture","title":"margot.sim 0.1.2 (2025-06-11)","text":"Modified margot_simulate_causal() support dual data structure (data_true data_observed) Shadows now preserve original values systematically ground truth comparisons Enhanced print methods shadow results effect comparisons","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"sampling-weights-integration-0-1-2","dir":"Changelog","previous_headings":"Improvements","what":"Sampling Weights Integration","title":"margot.sim 0.1.2 (2025-06-11)","text":"Sampling weights fully integrated throughout effect computation pipeline Weights preserved shadow application process Support comparing weighted (target population) vs unweighted (source population) effects","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"documentation-0-1-2","dir":"Changelog","previous_headings":"Improvements","what":"Documentation","title":"margot.sim 0.1.2 (2025-06-11)","text":"Added comprehensive design documentation CLAUDE.md Updated README transport weights example Enhanced _pkgdown.yml structure new function categories","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"margot.sim 0.1.2 (2025-06-11)","text":"Fixed wave indexing properly handle margot.sim structure (wave 0: baseline, wave 1: treatment, wave 2: outcome) Improved handling non-binary treatments effect computation (appropriate warnings) Fixed recursive print method issue shadow_bias_comparison","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"margot.sim 0.1.1 (2025-06-10)","text":"Fixed vignette errors applying-shadows.Rmd monte-carlo-simple.Rmd Corrected function signatures create_positivity_shadow() analyse_shadow_effects() Fixed pkgdown accessibility warning adding aria-label GitHub icon","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"margot.sim 0.1.1 (2025-06-10)","text":"Shadows can depend variables time point earlier Prevents future information affecting past measurements Added internal functions get_time_index() validate_temporal_order() Comprehensive tests ensure temporal causality maintained","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"improvements-0-1-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"margot.sim 0.1.1 (2025-06-10)","text":"Added GitHub Actions workflows R CMD check code coverage Added badges lifecycle, license, R CMD check, code coverage, GitHub stars Cleaned internal function documentation","code":""},{"path":[]},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"new-0-1-0","dir":"Changelog","previous_headings":"","what":"New","title":"[2025-06-10] margot.sim 0.1.0","text":"Initial release margot.sim package Classical measurement error continuous variables Misclassification bias binary variables (sensitivity/specificity) Differential measurement error Dichotomization thresholds Correlated errors across variables Item-level missingness (MCAR, MAR, MNAR mechanisms) Positivity violations (filtering impossible exposures) Selection bias (baseline post-treatment) Parallel processing support Automatic performance metrics (bias, variance, MSE, coverage) Comparison functions multiple methods Support parametric custom distributions Distribution sets multivariate outcomes Integration margot_simulate() function via shadows parameter Comprehensive unit tests using testthat Package website using pkgdown Examples demonstrating complete workflows","code":""},{"path":"https://go-bayes.github.io/margot.sim/news/index.html","id":"improved-0-1-0","dir":"Changelog","previous_headings":"","what":"Improved","title":"[2025-06-10] margot.sim 0.1.0","text":"Replaced external dependency margot::margot_process_longitudinal_data_wider() internal margot.sim::margot_process_longitudinal() function margot-simulate-core.R - Main simulation function margot-simulate-censoring.R - Censoring functions margot-simulate-causal.R - Causal inference wrapper margot-simulate-utils.R - Utility functions margot-scm-docs.R - SCM documentation margot-simulate-examples.R - Example functions Changed terminology “masks/masking” “shadows/shadowing” better metaphor Added startup message showing package version (can suppressed options(margot.sim.quiet = TRUE))","code":""}]
